
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002874  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002980  08002980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029a4  080029a4  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  080029a4  080029a4  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029a4  080029a4  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029a4  080029a4  000129a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029a8  080029a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080029ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000030  080029dc  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080029dc  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fa5  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001958  00000000  00000000  00028ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002a958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002b390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168f6  00000000  00000000  0002bce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad1d  00000000  00000000  000425d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008239c  00000000  00000000  0004d2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf68f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028cc  00000000  00000000  000cf6e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002968 	.word	0x08002968

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002968 	.word	0x08002968

0800014c <initialButton>:
int BT3_flag;
int TimerForKeyPress = 200;


void initialButton()
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	// i = 0 (BT1), i = 1 (BT2), i = 3 (BT3)
	BT1_flag = 0;
 8000152:	4b16      	ldr	r3, [pc, #88]	; (80001ac <initialButton+0x60>)
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
	BT2_flag = 0;
 8000158:	4b15      	ldr	r3, [pc, #84]	; (80001b0 <initialButton+0x64>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
	BT3_flag = 0;
 800015e:	4b15      	ldr	r3, [pc, #84]	; (80001b4 <initialButton+0x68>)
 8000160:	2200      	movs	r2, #0
 8000162:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_OF_BUTTON; i++)
 8000164:	2300      	movs	r3, #0
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	e016      	b.n	8000198 <initialButton+0x4c>
	{
		KeyReg0[i] = NORMAL_STATE;
 800016a:	4a13      	ldr	r2, [pc, #76]	; (80001b8 <initialButton+0x6c>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2101      	movs	r1, #1
 8000170:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg1[i] = NORMAL_STATE;
 8000174:	4a11      	ldr	r2, [pc, #68]	; (80001bc <initialButton+0x70>)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	2101      	movs	r1, #1
 800017a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg2[i] = NORMAL_STATE;
 800017e:	4a10      	ldr	r2, [pc, #64]	; (80001c0 <initialButton+0x74>)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	2101      	movs	r1, #1
 8000184:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg3[i] = NORMAL_STATE;
 8000188:	4a0e      	ldr	r2, [pc, #56]	; (80001c4 <initialButton+0x78>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_BUTTON; i++)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	3301      	adds	r3, #1
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2b02      	cmp	r3, #2
 800019c:	dde5      	ble.n	800016a <initialButton+0x1e>
	}
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	370c      	adds	r7, #12
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	200000a4 	.word	0x200000a4
 80001b0:	200000a0 	.word	0x200000a0
 80001b4:	20000078 	.word	0x20000078
 80001b8:	20000088 	.word	0x20000088
 80001bc:	20000094 	.word	0x20000094
 80001c0:	200000a8 	.word	0x200000a8
 80001c4:	2000007c 	.word	0x2000007c

080001c8 <isButton1Pressed>:
int isButton1Pressed()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	if (BT1_flag == 1)
 80001cc:	4b06      	ldr	r3, [pc, #24]	; (80001e8 <isButton1Pressed+0x20>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d104      	bne.n	80001de <isButton1Pressed+0x16>
	{
		BT1_flag = 0;
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <isButton1Pressed+0x20>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
		return 1;
 80001da:	2301      	movs	r3, #1
 80001dc:	e000      	b.n	80001e0 <isButton1Pressed+0x18>
	}
	return 0;
 80001de:	2300      	movs	r3, #0
}
 80001e0:	4618      	mov	r0, r3
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	200000a4 	.word	0x200000a4

080001ec <isButton2Pressed>:
int isButton2Pressed()
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	if (BT2_flag == 1)
 80001f0:	4b06      	ldr	r3, [pc, #24]	; (800020c <isButton2Pressed+0x20>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d104      	bne.n	8000202 <isButton2Pressed+0x16>
	{
		BT2_flag = 0;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <isButton2Pressed+0x20>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
		return 1;
 80001fe:	2301      	movs	r3, #1
 8000200:	e000      	b.n	8000204 <isButton2Pressed+0x18>
	}
	return 0;
 8000202:	2300      	movs	r3, #0
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200000a0 	.word	0x200000a0

08000210 <isButton3Pressed>:
int isButton3Pressed()
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	if (BT3_flag == 1)
 8000214:	4b06      	ldr	r3, [pc, #24]	; (8000230 <isButton3Pressed+0x20>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b01      	cmp	r3, #1
 800021a:	d104      	bne.n	8000226 <isButton3Pressed+0x16>
	{
		BT3_flag = 0;
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <isButton3Pressed+0x20>)
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
		return 1;
 8000222:	2301      	movs	r3, #1
 8000224:	e000      	b.n	8000228 <isButton3Pressed+0x18>
	}
	return 0;
 8000226:	2300      	movs	r3, #0
}
 8000228:	4618      	mov	r0, r3
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	20000078 	.word	0x20000078

08000234 <getKeyInput>:
void getKeyInput()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTON; i++)
 800023a:	2300      	movs	r3, #0
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	e090      	b.n	8000362 <getKeyInput+0x12e>
	{
		KeyReg0[i] = KeyReg1[i];
 8000240:	4a4c      	ldr	r2, [pc, #304]	; (8000374 <getKeyInput+0x140>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	494b      	ldr	r1, [pc, #300]	; (8000378 <getKeyInput+0x144>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000250:	4a4a      	ldr	r2, [pc, #296]	; (800037c <getKeyInput+0x148>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000258:	4946      	ldr	r1, [pc, #280]	; (8000374 <getKeyInput+0x140>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (i == 0) KeyReg2[i] = HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d10a      	bne.n	800027c <getKeyInput+0x48>
 8000266:	2102      	movs	r1, #2
 8000268:	4845      	ldr	r0, [pc, #276]	; (8000380 <getKeyInput+0x14c>)
 800026a:	f001 fb45 	bl	80018f8 <HAL_GPIO_ReadPin>
 800026e:	4603      	mov	r3, r0
 8000270:	4619      	mov	r1, r3
 8000272:	4a42      	ldr	r2, [pc, #264]	; (800037c <getKeyInput+0x148>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800027a:	e01a      	b.n	80002b2 <getKeyInput+0x7e>
		else if (i == 1) KeyReg2[i] = HAL_GPIO_ReadPin(BT2_GPIO_Port, BT2_Pin);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d10a      	bne.n	8000298 <getKeyInput+0x64>
 8000282:	2104      	movs	r1, #4
 8000284:	483e      	ldr	r0, [pc, #248]	; (8000380 <getKeyInput+0x14c>)
 8000286:	f001 fb37 	bl	80018f8 <HAL_GPIO_ReadPin>
 800028a:	4603      	mov	r3, r0
 800028c:	4619      	mov	r1, r3
 800028e:	4a3b      	ldr	r2, [pc, #236]	; (800037c <getKeyInput+0x148>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000296:	e00c      	b.n	80002b2 <getKeyInput+0x7e>
		else if (i == 2) KeyReg2[i] = HAL_GPIO_ReadPin(BT3_GPIO_Port, BT3_Pin);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b02      	cmp	r3, #2
 800029c:	d109      	bne.n	80002b2 <getKeyInput+0x7e>
 800029e:	2108      	movs	r1, #8
 80002a0:	4837      	ldr	r0, [pc, #220]	; (8000380 <getKeyInput+0x14c>)
 80002a2:	f001 fb29 	bl	80018f8 <HAL_GPIO_ReadPin>
 80002a6:	4603      	mov	r3, r0
 80002a8:	4619      	mov	r1, r3
 80002aa:	4a34      	ldr	r2, [pc, #208]	; (800037c <getKeyInput+0x148>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i]))
 80002b2:	4a31      	ldr	r2, [pc, #196]	; (8000378 <getKeyInput+0x144>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ba:	492e      	ldr	r1, [pc, #184]	; (8000374 <getKeyInput+0x140>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d14a      	bne.n	800035c <getKeyInput+0x128>
 80002c6:	4a2b      	ldr	r2, [pc, #172]	; (8000374 <getKeyInput+0x140>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ce:	492b      	ldr	r1, [pc, #172]	; (800037c <getKeyInput+0x148>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d140      	bne.n	800035c <getKeyInput+0x128>
		{
			if (KeyReg3[i] != KeyReg2[i]) // NHẤN THẢ
 80002da:	4a2a      	ldr	r2, [pc, #168]	; (8000384 <getKeyInput+0x150>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002e2:	4926      	ldr	r1, [pc, #152]	; (800037c <getKeyInput+0x148>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d025      	beq.n	800033a <getKeyInput+0x106>
			{
				KeyReg3[i] = KeyReg2[i];
 80002ee:	4a23      	ldr	r2, [pc, #140]	; (800037c <getKeyInput+0x148>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f6:	4923      	ldr	r1, [pc, #140]	; (8000384 <getKeyInput+0x150>)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE)
 80002fe:	4a1f      	ldr	r2, [pc, #124]	; (800037c <getKeyInput+0x148>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d128      	bne.n	800035c <getKeyInput+0x128>
				{
					if (i == 0) BT1_flag = 1;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d103      	bne.n	8000318 <getKeyInput+0xe4>
 8000310:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <getKeyInput+0x154>)
 8000312:	2201      	movs	r2, #1
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	e00c      	b.n	8000332 <getKeyInput+0xfe>
					else if (i == 1) BT2_flag = 1;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d103      	bne.n	8000326 <getKeyInput+0xf2>
 800031e:	4b1b      	ldr	r3, [pc, #108]	; (800038c <getKeyInput+0x158>)
 8000320:	2201      	movs	r2, #1
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	e005      	b.n	8000332 <getKeyInput+0xfe>
					else if (i == 2) BT3_flag = 1;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2b02      	cmp	r3, #2
 800032a:	d102      	bne.n	8000332 <getKeyInput+0xfe>
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <getKeyInput+0x15c>)
 800032e:	2201      	movs	r2, #1
 8000330:	601a      	str	r2, [r3, #0]
					TimerForKeyPress = 200;
 8000332:	4b18      	ldr	r3, [pc, #96]	; (8000394 <getKeyInput+0x160>)
 8000334:	22c8      	movs	r2, #200	; 0xc8
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	e010      	b.n	800035c <getKeyInput+0x128>
				}
			}
			else // NHẤN GIỮ
			{
				TimerForKeyPress--;
 800033a:	4b16      	ldr	r3, [pc, #88]	; (8000394 <getKeyInput+0x160>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	3b01      	subs	r3, #1
 8000340:	4a14      	ldr	r2, [pc, #80]	; (8000394 <getKeyInput+0x160>)
 8000342:	6013      	str	r3, [r2, #0]
				if (TimerForKeyPress == 0)
 8000344:	4b13      	ldr	r3, [pc, #76]	; (8000394 <getKeyInput+0x160>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d107      	bne.n	800035c <getKeyInput+0x128>
				{
					KeyReg3[i] = NORMAL_STATE;
 800034c:	4a0d      	ldr	r2, [pc, #52]	; (8000384 <getKeyInput+0x150>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2101      	movs	r1, #1
 8000352:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress = 200;
 8000356:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <getKeyInput+0x160>)
 8000358:	22c8      	movs	r2, #200	; 0xc8
 800035a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_OF_BUTTON; i++)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	3301      	adds	r3, #1
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2b02      	cmp	r3, #2
 8000366:	f77f af6b 	ble.w	8000240 <getKeyInput+0xc>
				}
			}
		}
	}
}
 800036a:	bf00      	nop
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000094 	.word	0x20000094
 8000378:	20000088 	.word	0x20000088
 800037c:	200000a8 	.word	0x200000a8
 8000380:	40010800 	.word	0x40010800
 8000384:	2000007c 	.word	0x2000007c
 8000388:	200000a4 	.word	0x200000a4
 800038c:	200000a0 	.word	0x200000a0
 8000390:	20000078 	.word	0x20000078
 8000394:	20000000 	.word	0x20000000

08000398 <fsm_processing>:
int timeAmber = 2;
int timeRedTemp;
int timeGreenTemp;
int timeAmberTemp;
void fsm_processing()
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	// TĂNG MODE KHI BUTTON 1 ĐƯỢC NHẤN
	switch(Mode)
 800039c:	4b9c      	ldr	r3, [pc, #624]	; (8000610 <fsm_processing+0x278>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b04      	cmp	r3, #4
 80003a2:	f200 8295 	bhi.w	80008d0 <fsm_processing+0x538>
 80003a6:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <fsm_processing+0x14>)
 80003a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ac:	080003c1 	.word	0x080003c1
 80003b0:	0800043d 	.word	0x0800043d
 80003b4:	080005e5 	.word	0x080005e5
 80003b8:	080006e9 	.word	0x080006e9
 80003bc:	0800079b 	.word	0x0800079b
	{
	case Initial:
		// ĐỌC NÚT NHẤN VÀ XỬ LÍ KHI NHẬN ĐƯỢC TÍN HIỆU
		if (timer3_flag == 1)
 80003c0:	4b94      	ldr	r3, [pc, #592]	; (8000614 <fsm_processing+0x27c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d104      	bne.n	80003d2 <fsm_processing+0x3a>
		{
			getKeyInput();
 80003c8:	f7ff ff34 	bl	8000234 <getKeyInput>
			setTimer3(1);
 80003cc:	2001      	movs	r0, #1
 80003ce:	f000 fe93 	bl	80010f8 <setTimer3>
		}
		if (isButton1Pressed() == 1)
 80003d2:	f7ff fef9 	bl	80001c8 <isButton1Pressed>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d117      	bne.n	800040c <fsm_processing+0x74>
		{
			Mode = MODE1;
 80003dc:	4b8c      	ldr	r3, [pc, #560]	; (8000610 <fsm_processing+0x278>)
 80003de:	2201      	movs	r2, #1
 80003e0:	701a      	strb	r2, [r3, #0]
			led_off(Red1);
 80003e2:	2040      	movs	r0, #64	; 0x40
 80003e4:	f000 fd04 	bl	8000df0 <led_off>
			led_off(Red2);
 80003e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003ec:	f000 fd00 	bl	8000df0 <led_off>
			led_off(Green1);
 80003f0:	2010      	movs	r0, #16
 80003f2:	f000 fcfd 	bl	8000df0 <led_off>
			led_off(Green2);
 80003f6:	2080      	movs	r0, #128	; 0x80
 80003f8:	f000 fcfa 	bl	8000df0 <led_off>
			led_off(Amber1);
 80003fc:	2020      	movs	r0, #32
 80003fe:	f000 fcf7 	bl	8000df0 <led_off>
			led_off(Amber2);
 8000402:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000406:	f000 fcf3 	bl	8000df0 <led_off>
			break;
 800040a:	e26c      	b.n	80008e6 <fsm_processing+0x54e>
		}
		// HIỂN THỊ LED 7 ĐOẠN
		if (timer1_flag == 1)
 800040c:	4b82      	ldr	r3, [pc, #520]	; (8000618 <fsm_processing+0x280>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b01      	cmp	r3, #1
 8000412:	f040 825f 	bne.w	80008d4 <fsm_processing+0x53c>
		{
			if (Index > 3) Index = 0;
 8000416:	4b81      	ldr	r3, [pc, #516]	; (800061c <fsm_processing+0x284>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b03      	cmp	r3, #3
 800041c:	dd02      	ble.n	8000424 <fsm_processing+0x8c>
 800041e:	4b7f      	ldr	r3, [pc, #508]	; (800061c <fsm_processing+0x284>)
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 8000424:	4b7d      	ldr	r3, [pc, #500]	; (800061c <fsm_processing+0x284>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	1c5a      	adds	r2, r3, #1
 800042a:	497c      	ldr	r1, [pc, #496]	; (800061c <fsm_processing+0x284>)
 800042c:	600a      	str	r2, [r1, #0]
 800042e:	4618      	mov	r0, r3
 8000430:	f000 fc22 	bl	8000c78 <update7SEG>
			setTimer1(25);
 8000434:	2019      	movs	r0, #25
 8000436:	f000 fe37 	bl	80010a8 <setTimer1>
		}
		break;
 800043a:	e24b      	b.n	80008d4 <fsm_processing+0x53c>
	case MODE1:
		// ĐỌC NÚT NHẤN VÀ XỬ LÍ KHI NHẬN ĐƯỢC TÍN HIỆU
		if (timer3_flag == 1)
 800043c:	4b75      	ldr	r3, [pc, #468]	; (8000614 <fsm_processing+0x27c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d104      	bne.n	800044e <fsm_processing+0xb6>
		{
			getKeyInput();
 8000444:	f7ff fef6 	bl	8000234 <getKeyInput>
			setTimer3(1);
 8000448:	2001      	movs	r0, #1
 800044a:	f000 fe55 	bl	80010f8 <setTimer3>
		}
		if (isButton1Pressed() == 1)
 800044e:	f7ff febb 	bl	80001c8 <isButton1Pressed>
 8000452:	4603      	mov	r3, r0
 8000454:	2b01      	cmp	r3, #1
 8000456:	d107      	bne.n	8000468 <fsm_processing+0xd0>
		{
			Mode = MODE2;
 8000458:	4b6d      	ldr	r3, [pc, #436]	; (8000610 <fsm_processing+0x278>)
 800045a:	2202      	movs	r2, #2
 800045c:	701a      	strb	r2, [r3, #0]
			timeRedTemp = timeRed;
 800045e:	4b70      	ldr	r3, [pc, #448]	; (8000620 <fsm_processing+0x288>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a70      	ldr	r2, [pc, #448]	; (8000624 <fsm_processing+0x28c>)
 8000464:	6013      	str	r3, [r2, #0]
			break;
 8000466:	e23e      	b.n	80008e6 <fsm_processing+0x54e>
		}
		if (timer2_flag == 1)// HIỂN THỊ LED ĐƠN + CẬP NHẬT GIÁ TRỊ CHO LED 7 ĐOẠN
 8000468:	4b6f      	ldr	r3, [pc, #444]	; (8000628 <fsm_processing+0x290>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b01      	cmp	r3, #1
 800046e:	f040 80a1 	bne.w	80005b4 <fsm_processing+0x21c>
		{
			//LED TRÊN DƯỚI
			if (count1 == 0)
 8000472:	4b6e      	ldr	r3, [pc, #440]	; (800062c <fsm_processing+0x294>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d13d      	bne.n	80004f6 <fsm_processing+0x15e>
			{
				if (status1 == 0) // RED
 800047a:	4b6d      	ldr	r3, [pc, #436]	; (8000630 <fsm_processing+0x298>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d110      	bne.n	80004a4 <fsm_processing+0x10c>
				{
					led_on(Red1);
 8000482:	2040      	movs	r0, #64	; 0x40
 8000484:	f000 fca2 	bl	8000dcc <led_on>
					led_off(Green1);
 8000488:	2010      	movs	r0, #16
 800048a:	f000 fcb1 	bl	8000df0 <led_off>
					led_off(Amber1);
 800048e:	2020      	movs	r0, #32
 8000490:	f000 fcae 	bl	8000df0 <led_off>
					status1 = 2;
 8000494:	4b66      	ldr	r3, [pc, #408]	; (8000630 <fsm_processing+0x298>)
 8000496:	2202      	movs	r2, #2
 8000498:	601a      	str	r2, [r3, #0]
					count1 = timeRed;
 800049a:	4b61      	ldr	r3, [pc, #388]	; (8000620 <fsm_processing+0x288>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a63      	ldr	r2, [pc, #396]	; (800062c <fsm_processing+0x294>)
 80004a0:	6013      	str	r3, [r2, #0]
 80004a2:	e028      	b.n	80004f6 <fsm_processing+0x15e>
				}
				else if (status1 == 1) // AMBER
 80004a4:	4b62      	ldr	r3, [pc, #392]	; (8000630 <fsm_processing+0x298>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d110      	bne.n	80004ce <fsm_processing+0x136>
				{
					led_off(Red1);
 80004ac:	2040      	movs	r0, #64	; 0x40
 80004ae:	f000 fc9f 	bl	8000df0 <led_off>
					led_on(Amber1);
 80004b2:	2020      	movs	r0, #32
 80004b4:	f000 fc8a 	bl	8000dcc <led_on>
					led_off(Green1);
 80004b8:	2010      	movs	r0, #16
 80004ba:	f000 fc99 	bl	8000df0 <led_off>
					status1 = 0;
 80004be:	4b5c      	ldr	r3, [pc, #368]	; (8000630 <fsm_processing+0x298>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
					count1 = timeAmber;
 80004c4:	4b5b      	ldr	r3, [pc, #364]	; (8000634 <fsm_processing+0x29c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a58      	ldr	r2, [pc, #352]	; (800062c <fsm_processing+0x294>)
 80004ca:	6013      	str	r3, [r2, #0]
 80004cc:	e013      	b.n	80004f6 <fsm_processing+0x15e>
				}
				else if (status1 == 2) // GREEN
 80004ce:	4b58      	ldr	r3, [pc, #352]	; (8000630 <fsm_processing+0x298>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	d10f      	bne.n	80004f6 <fsm_processing+0x15e>
				{
					led_off(Red1);
 80004d6:	2040      	movs	r0, #64	; 0x40
 80004d8:	f000 fc8a 	bl	8000df0 <led_off>
					led_off(Amber1);
 80004dc:	2020      	movs	r0, #32
 80004de:	f000 fc87 	bl	8000df0 <led_off>
					led_on(Green1);
 80004e2:	2010      	movs	r0, #16
 80004e4:	f000 fc72 	bl	8000dcc <led_on>
					status1 = 1;
 80004e8:	4b51      	ldr	r3, [pc, #324]	; (8000630 <fsm_processing+0x298>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	601a      	str	r2, [r3, #0]
					count1 = timeGreen;
 80004ee:	4b52      	ldr	r3, [pc, #328]	; (8000638 <fsm_processing+0x2a0>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a4e      	ldr	r2, [pc, #312]	; (800062c <fsm_processing+0x294>)
 80004f4:	6013      	str	r3, [r2, #0]
				}
			}

			//LED TRÁI PHẢI

			if (count2 == 0)
 80004f6:	4b51      	ldr	r3, [pc, #324]	; (800063c <fsm_processing+0x2a4>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d143      	bne.n	8000586 <fsm_processing+0x1ee>
			{
				if (status2 == 0) // RED
 80004fe:	4b50      	ldr	r3, [pc, #320]	; (8000640 <fsm_processing+0x2a8>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d112      	bne.n	800052c <fsm_processing+0x194>
				{
					led_on(Red2);
 8000506:	f44f 7000 	mov.w	r0, #512	; 0x200
 800050a:	f000 fc5f 	bl	8000dcc <led_on>
					led_off(Green2);
 800050e:	2080      	movs	r0, #128	; 0x80
 8000510:	f000 fc6e 	bl	8000df0 <led_off>
					led_off(Amber2);
 8000514:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000518:	f000 fc6a 	bl	8000df0 <led_off>
					status2 = 2;
 800051c:	4b48      	ldr	r3, [pc, #288]	; (8000640 <fsm_processing+0x2a8>)
 800051e:	2202      	movs	r2, #2
 8000520:	601a      	str	r2, [r3, #0]
					count2 = timeRed;
 8000522:	4b3f      	ldr	r3, [pc, #252]	; (8000620 <fsm_processing+0x288>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a45      	ldr	r2, [pc, #276]	; (800063c <fsm_processing+0x2a4>)
 8000528:	6013      	str	r3, [r2, #0]
 800052a:	e02c      	b.n	8000586 <fsm_processing+0x1ee>
				}
				else if (status2 == 1) // AMBER
 800052c:	4b44      	ldr	r3, [pc, #272]	; (8000640 <fsm_processing+0x2a8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d112      	bne.n	800055a <fsm_processing+0x1c2>
				{
					led_off(Red2);
 8000534:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000538:	f000 fc5a 	bl	8000df0 <led_off>
					led_on(Amber2);
 800053c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000540:	f000 fc44 	bl	8000dcc <led_on>
					led_off(Green2);
 8000544:	2080      	movs	r0, #128	; 0x80
 8000546:	f000 fc53 	bl	8000df0 <led_off>
					status2 = 0;
 800054a:	4b3d      	ldr	r3, [pc, #244]	; (8000640 <fsm_processing+0x2a8>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
					count2 = timeAmber;
 8000550:	4b38      	ldr	r3, [pc, #224]	; (8000634 <fsm_processing+0x29c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a39      	ldr	r2, [pc, #228]	; (800063c <fsm_processing+0x2a4>)
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	e015      	b.n	8000586 <fsm_processing+0x1ee>
				}
				else if (status2 == 2) // GREEN
 800055a:	4b39      	ldr	r3, [pc, #228]	; (8000640 <fsm_processing+0x2a8>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b02      	cmp	r3, #2
 8000560:	d111      	bne.n	8000586 <fsm_processing+0x1ee>
				{
					led_off(Red2);
 8000562:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000566:	f000 fc43 	bl	8000df0 <led_off>
					led_off(Amber2);
 800056a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800056e:	f000 fc3f 	bl	8000df0 <led_off>
					led_on(Green2);
 8000572:	2080      	movs	r0, #128	; 0x80
 8000574:	f000 fc2a 	bl	8000dcc <led_on>
					status2 = 1;
 8000578:	4b31      	ldr	r3, [pc, #196]	; (8000640 <fsm_processing+0x2a8>)
 800057a:	2201      	movs	r2, #1
 800057c:	601a      	str	r2, [r3, #0]
					count2 = timeGreen;
 800057e:	4b2e      	ldr	r3, [pc, #184]	; (8000638 <fsm_processing+0x2a0>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a2e      	ldr	r2, [pc, #184]	; (800063c <fsm_processing+0x2a4>)
 8000584:	6013      	str	r3, [r2, #0]
				}
			}
			count1--;
 8000586:	4b29      	ldr	r3, [pc, #164]	; (800062c <fsm_processing+0x294>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3b01      	subs	r3, #1
 800058c:	4a27      	ldr	r2, [pc, #156]	; (800062c <fsm_processing+0x294>)
 800058e:	6013      	str	r3, [r2, #0]
			count2--;
 8000590:	4b2a      	ldr	r3, [pc, #168]	; (800063c <fsm_processing+0x2a4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3b01      	subs	r3, #1
 8000596:	4a29      	ldr	r2, [pc, #164]	; (800063c <fsm_processing+0x2a4>)
 8000598:	6013      	str	r3, [r2, #0]
			valueSEG12 = count1;
 800059a:	4b24      	ldr	r3, [pc, #144]	; (800062c <fsm_processing+0x294>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a29      	ldr	r2, [pc, #164]	; (8000644 <fsm_processing+0x2ac>)
 80005a0:	6013      	str	r3, [r2, #0]
			valueSEG34 = count2;
 80005a2:	4b26      	ldr	r3, [pc, #152]	; (800063c <fsm_processing+0x2a4>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a28      	ldr	r2, [pc, #160]	; (8000648 <fsm_processing+0x2b0>)
 80005a8:	6013      	str	r3, [r2, #0]
			updateClockBuffer();
 80005aa:	f000 fbb7 	bl	8000d1c <updateClockBuffer>
			setTimer2(100);
 80005ae:	2064      	movs	r0, #100	; 0x64
 80005b0:	f000 fd8e 	bl	80010d0 <setTimer2>
		}
		if (timer1_flag == 1) // HIỂN THỊ LED 7 ĐOẠN
 80005b4:	4b18      	ldr	r3, [pc, #96]	; (8000618 <fsm_processing+0x280>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	f040 818d 	bne.w	80008d8 <fsm_processing+0x540>
		{
			if (Index > 3) Index = 0;
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <fsm_processing+0x284>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	dd02      	ble.n	80005cc <fsm_processing+0x234>
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <fsm_processing+0x284>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <fsm_processing+0x284>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	1c5a      	adds	r2, r3, #1
 80005d2:	4912      	ldr	r1, [pc, #72]	; (800061c <fsm_processing+0x284>)
 80005d4:	600a      	str	r2, [r1, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fb4e 	bl	8000c78 <update7SEG>
			setTimer1(25);
 80005dc:	2019      	movs	r0, #25
 80005de:	f000 fd63 	bl	80010a8 <setTimer1>
		}
		break;
 80005e2:	e179      	b.n	80008d8 <fsm_processing+0x540>
	case MODE2:
		// ĐỌC NÚT NHẤN VÀ XỬ LÍ KHI NHẬN ĐƯỢC TÍN HIỆU
		if (timer3_flag == 1)
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <fsm_processing+0x27c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d104      	bne.n	80005f6 <fsm_processing+0x25e>
		{
			getKeyInput();
 80005ec:	f7ff fe22 	bl	8000234 <getKeyInput>
			setTimer3(1);
 80005f0:	2001      	movs	r0, #1
 80005f2:	f000 fd81 	bl	80010f8 <setTimer3>
		}
		if (isButton1Pressed() == 1)
 80005f6:	f7ff fde7 	bl	80001c8 <isButton1Pressed>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d127      	bne.n	8000650 <fsm_processing+0x2b8>
		{
			Mode = MODE3;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <fsm_processing+0x278>)
 8000602:	2203      	movs	r2, #3
 8000604:	701a      	strb	r2, [r3, #0]
			timeAmberTemp = timeAmber;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <fsm_processing+0x29c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a10      	ldr	r2, [pc, #64]	; (800064c <fsm_processing+0x2b4>)
 800060c:	6013      	str	r3, [r2, #0]
			break;
 800060e:	e16a      	b.n	80008e6 <fsm_processing+0x54e>
 8000610:	2000004c 	.word	0x2000004c
 8000614:	20000074 	.word	0x20000074
 8000618:	20000064 	.word	0x20000064
 800061c:	2000005c 	.word	0x2000005c
 8000620:	20000008 	.word	0x20000008
 8000624:	200000bc 	.word	0x200000bc
 8000628:	2000006c 	.word	0x2000006c
 800062c:	20000054 	.word	0x20000054
 8000630:	20000050 	.word	0x20000050
 8000634:	20000010 	.word	0x20000010
 8000638:	2000000c 	.word	0x2000000c
 800063c:	20000058 	.word	0x20000058
 8000640:	20000004 	.word	0x20000004
 8000644:	200000c4 	.word	0x200000c4
 8000648:	200000c0 	.word	0x200000c0
 800064c:	200000b8 	.word	0x200000b8
		}
		if (isButton2Pressed() == 1)
 8000650:	f7ff fdcc 	bl	80001ec <isButton2Pressed>
 8000654:	4603      	mov	r3, r0
 8000656:	2b01      	cmp	r3, #1
 8000658:	d104      	bne.n	8000664 <fsm_processing+0x2cc>
		{
			timeRedTemp++;
 800065a:	4ba4      	ldr	r3, [pc, #656]	; (80008ec <fsm_processing+0x554>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	4aa2      	ldr	r2, [pc, #648]	; (80008ec <fsm_processing+0x554>)
 8000662:	6013      	str	r3, [r2, #0]
		}
		if (isButton3Pressed() == 1)
 8000664:	f7ff fdd4 	bl	8000210 <isButton3Pressed>
 8000668:	4603      	mov	r3, r0
 800066a:	2b01      	cmp	r3, #1
 800066c:	d103      	bne.n	8000676 <fsm_processing+0x2de>
		{
			timeRed = timeRedTemp;
 800066e:	4b9f      	ldr	r3, [pc, #636]	; (80008ec <fsm_processing+0x554>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a9f      	ldr	r2, [pc, #636]	; (80008f0 <fsm_processing+0x558>)
 8000674:	6013      	str	r3, [r2, #0]
		}
		led_off(Green1);
 8000676:	2010      	movs	r0, #16
 8000678:	f000 fbba 	bl	8000df0 <led_off>
		led_off(Green2);
 800067c:	2080      	movs	r0, #128	; 0x80
 800067e:	f000 fbb7 	bl	8000df0 <led_off>
		led_off(Amber1);
 8000682:	2020      	movs	r0, #32
 8000684:	f000 fbb4 	bl	8000df0 <led_off>
		led_off(Amber2);
 8000688:	f44f 7080 	mov.w	r0, #256	; 0x100
 800068c:	f000 fbb0 	bl	8000df0 <led_off>
		valueSEG12 = 2;
 8000690:	4b98      	ldr	r3, [pc, #608]	; (80008f4 <fsm_processing+0x55c>)
 8000692:	2202      	movs	r2, #2
 8000694:	601a      	str	r2, [r3, #0]
		valueSEG34 = timeRedTemp;
 8000696:	4b95      	ldr	r3, [pc, #596]	; (80008ec <fsm_processing+0x554>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a97      	ldr	r2, [pc, #604]	; (80008f8 <fsm_processing+0x560>)
 800069c:	6013      	str	r3, [r2, #0]
		updateClockBuffer();
 800069e:	f000 fb3d 	bl	8000d1c <updateClockBuffer>
		if (timer1_flag == 1) // HIỂN THỊ LED 7 ĐOẠN
 80006a2:	4b96      	ldr	r3, [pc, #600]	; (80008fc <fsm_processing+0x564>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d113      	bne.n	80006d2 <fsm_processing+0x33a>
		{
			if (Index > 3) Index = 0;
 80006aa:	4b95      	ldr	r3, [pc, #596]	; (8000900 <fsm_processing+0x568>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	dd02      	ble.n	80006b8 <fsm_processing+0x320>
 80006b2:	4b93      	ldr	r3, [pc, #588]	; (8000900 <fsm_processing+0x568>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 80006b8:	4b91      	ldr	r3, [pc, #580]	; (8000900 <fsm_processing+0x568>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	4990      	ldr	r1, [pc, #576]	; (8000900 <fsm_processing+0x568>)
 80006c0:	600a      	str	r2, [r1, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fad8 	bl	8000c78 <update7SEG>
			setTimer1(25);
 80006c8:	2019      	movs	r0, #25
 80006ca:	f000 fced 	bl	80010a8 <setTimer1>
			blinkingLedRed();
 80006ce:	f000 fba1 	bl	8000e14 <blinkingLedRed>
		}
		if (isButton3Pressed() == 1)
 80006d2:	f7ff fd9d 	bl	8000210 <isButton3Pressed>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b01      	cmp	r3, #1
 80006da:	f040 80ff 	bne.w	80008dc <fsm_processing+0x544>
		{
			timeRed = timeRedTemp;
 80006de:	4b83      	ldr	r3, [pc, #524]	; (80008ec <fsm_processing+0x554>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a83      	ldr	r2, [pc, #524]	; (80008f0 <fsm_processing+0x558>)
 80006e4:	6013      	str	r3, [r2, #0]
		}
		break;
 80006e6:	e0f9      	b.n	80008dc <fsm_processing+0x544>
	case MODE3:
		// ĐỌC NÚT NHẤN VÀ XỬ LÍ KHI NHẬN ĐƯỢC TÍN HIỆU
		if (timer3_flag == 1)
 80006e8:	4b86      	ldr	r3, [pc, #536]	; (8000904 <fsm_processing+0x56c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d104      	bne.n	80006fa <fsm_processing+0x362>
		{
			getKeyInput();
 80006f0:	f7ff fda0 	bl	8000234 <getKeyInput>
			setTimer3(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f000 fcff 	bl	80010f8 <setTimer3>
		}
		if (isButton1Pressed() == 1)
 80006fa:	f7ff fd65 	bl	80001c8 <isButton1Pressed>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b01      	cmp	r3, #1
 8000702:	d107      	bne.n	8000714 <fsm_processing+0x37c>
		{
			Mode = MODE4;
 8000704:	4b80      	ldr	r3, [pc, #512]	; (8000908 <fsm_processing+0x570>)
 8000706:	2204      	movs	r2, #4
 8000708:	701a      	strb	r2, [r3, #0]
			timeGreenTemp = timeGreen;
 800070a:	4b80      	ldr	r3, [pc, #512]	; (800090c <fsm_processing+0x574>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a80      	ldr	r2, [pc, #512]	; (8000910 <fsm_processing+0x578>)
 8000710:	6013      	str	r3, [r2, #0]
			break;
 8000712:	e0e8      	b.n	80008e6 <fsm_processing+0x54e>
		}
		if (isButton2Pressed() == 1)
 8000714:	f7ff fd6a 	bl	80001ec <isButton2Pressed>
 8000718:	4603      	mov	r3, r0
 800071a:	2b01      	cmp	r3, #1
 800071c:	d104      	bne.n	8000728 <fsm_processing+0x390>
		{
			timeAmberTemp++;
 800071e:	4b7d      	ldr	r3, [pc, #500]	; (8000914 <fsm_processing+0x57c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	4a7b      	ldr	r2, [pc, #492]	; (8000914 <fsm_processing+0x57c>)
 8000726:	6013      	str	r3, [r2, #0]
		}
		if (isButton3Pressed() == 1)
 8000728:	f7ff fd72 	bl	8000210 <isButton3Pressed>
 800072c:	4603      	mov	r3, r0
 800072e:	2b01      	cmp	r3, #1
 8000730:	d103      	bne.n	800073a <fsm_processing+0x3a2>
		{
			timeAmber = timeAmberTemp;
 8000732:	4b78      	ldr	r3, [pc, #480]	; (8000914 <fsm_processing+0x57c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a78      	ldr	r2, [pc, #480]	; (8000918 <fsm_processing+0x580>)
 8000738:	6013      	str	r3, [r2, #0]
		}
		led_off(Red1);
 800073a:	2040      	movs	r0, #64	; 0x40
 800073c:	f000 fb58 	bl	8000df0 <led_off>
		led_off(Red2);
 8000740:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000744:	f000 fb54 	bl	8000df0 <led_off>
		led_off(Green1);
 8000748:	2010      	movs	r0, #16
 800074a:	f000 fb51 	bl	8000df0 <led_off>
		led_off(Green2);
 800074e:	2080      	movs	r0, #128	; 0x80
 8000750:	f000 fb4e 	bl	8000df0 <led_off>
		valueSEG12 = 3;
 8000754:	4b67      	ldr	r3, [pc, #412]	; (80008f4 <fsm_processing+0x55c>)
 8000756:	2203      	movs	r2, #3
 8000758:	601a      	str	r2, [r3, #0]
		valueSEG34 = timeAmberTemp;
 800075a:	4b6e      	ldr	r3, [pc, #440]	; (8000914 <fsm_processing+0x57c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a66      	ldr	r2, [pc, #408]	; (80008f8 <fsm_processing+0x560>)
 8000760:	6013      	str	r3, [r2, #0]
		updateClockBuffer();
 8000762:	f000 fadb 	bl	8000d1c <updateClockBuffer>
		if (timer1_flag == 1) // HIỂN THỊ LED 7 ĐOẠN
 8000766:	4b65      	ldr	r3, [pc, #404]	; (80008fc <fsm_processing+0x564>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	f040 80b8 	bne.w	80008e0 <fsm_processing+0x548>
		{
			if (Index > 3) Index = 0;
 8000770:	4b63      	ldr	r3, [pc, #396]	; (8000900 <fsm_processing+0x568>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b03      	cmp	r3, #3
 8000776:	dd02      	ble.n	800077e <fsm_processing+0x3e6>
 8000778:	4b61      	ldr	r3, [pc, #388]	; (8000900 <fsm_processing+0x568>)
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 800077e:	4b60      	ldr	r3, [pc, #384]	; (8000900 <fsm_processing+0x568>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	495e      	ldr	r1, [pc, #376]	; (8000900 <fsm_processing+0x568>)
 8000786:	600a      	str	r2, [r1, #0]
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fa75 	bl	8000c78 <update7SEG>
			setTimer1(25);
 800078e:	2019      	movs	r0, #25
 8000790:	f000 fc8a 	bl	80010a8 <setTimer1>
			blinkingLedAmber();
 8000794:	f000 fb5c 	bl	8000e50 <blinkingLedAmber>
		}
		break;
 8000798:	e0a2      	b.n	80008e0 <fsm_processing+0x548>
	case MODE4:
		// ĐỌC NÚT NHẤN VÀ XỬ LÍ KHI NHẬN ĐƯỢC TÍN HIỆU
		if (timer3_flag == 1)
 800079a:	4b5a      	ldr	r3, [pc, #360]	; (8000904 <fsm_processing+0x56c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d104      	bne.n	80007ac <fsm_processing+0x414>
		{
			getKeyInput();
 80007a2:	f7ff fd47 	bl	8000234 <getKeyInput>
			setTimer3(1);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f000 fca6 	bl	80010f8 <setTimer3>
		}
		if (isButton1Pressed() == 1)
 80007ac:	f7ff fd0c 	bl	80001c8 <isButton1Pressed>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d149      	bne.n	800084a <fsm_processing+0x4b2>
		{
			if (timeRed == timeGreen + timeAmber)
 80007b6:	4b55      	ldr	r3, [pc, #340]	; (800090c <fsm_processing+0x574>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	4b57      	ldr	r3, [pc, #348]	; (8000918 <fsm_processing+0x580>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	441a      	add	r2, r3
 80007c0:	4b4b      	ldr	r3, [pc, #300]	; (80008f0 <fsm_processing+0x558>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d117      	bne.n	80007f8 <fsm_processing+0x460>
			{
				Mode = MODE1;
 80007c8:	4b4f      	ldr	r3, [pc, #316]	; (8000908 <fsm_processing+0x570>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
				led_on(Red1);
 80007ce:	2040      	movs	r0, #64	; 0x40
 80007d0:	f000 fafc 	bl	8000dcc <led_on>
				led_on(Red2);
 80007d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007d8:	f000 faf8 	bl	8000dcc <led_on>
				led_on(Green1);
 80007dc:	2010      	movs	r0, #16
 80007de:	f000 faf5 	bl	8000dcc <led_on>
				led_on(Green2);
 80007e2:	2080      	movs	r0, #128	; 0x80
 80007e4:	f000 faf2 	bl	8000dcc <led_on>
				led_on(Amber1);
 80007e8:	2020      	movs	r0, #32
 80007ea:	f000 faef 	bl	8000dcc <led_on>
				led_on(Amber2);
 80007ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007f2:	f000 faeb 	bl	8000dcc <led_on>
				led_on(Amber2);
				valueSEG12 = 88;
				valueSEG34 = 88;
				updateClockBuffer();
			}
			break;
 80007f6:	e076      	b.n	80008e6 <fsm_processing+0x54e>
				Mode = Initial;
 80007f8:	4b43      	ldr	r3, [pc, #268]	; (8000908 <fsm_processing+0x570>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
				timeRed = 5;
 80007fe:	4b3c      	ldr	r3, [pc, #240]	; (80008f0 <fsm_processing+0x558>)
 8000800:	2205      	movs	r2, #5
 8000802:	601a      	str	r2, [r3, #0]
				timeGreen = 3;
 8000804:	4b41      	ldr	r3, [pc, #260]	; (800090c <fsm_processing+0x574>)
 8000806:	2203      	movs	r2, #3
 8000808:	601a      	str	r2, [r3, #0]
				timeAmber = 2;
 800080a:	4b43      	ldr	r3, [pc, #268]	; (8000918 <fsm_processing+0x580>)
 800080c:	2202      	movs	r2, #2
 800080e:	601a      	str	r2, [r3, #0]
				led_on(Red1);
 8000810:	2040      	movs	r0, #64	; 0x40
 8000812:	f000 fadb 	bl	8000dcc <led_on>
				led_on(Red2);
 8000816:	f44f 7000 	mov.w	r0, #512	; 0x200
 800081a:	f000 fad7 	bl	8000dcc <led_on>
				led_on(Green1);
 800081e:	2010      	movs	r0, #16
 8000820:	f000 fad4 	bl	8000dcc <led_on>
				led_on(Green2);
 8000824:	2080      	movs	r0, #128	; 0x80
 8000826:	f000 fad1 	bl	8000dcc <led_on>
				led_on(Amber1);
 800082a:	2020      	movs	r0, #32
 800082c:	f000 face 	bl	8000dcc <led_on>
				led_on(Amber2);
 8000830:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000834:	f000 faca 	bl	8000dcc <led_on>
				valueSEG12 = 88;
 8000838:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <fsm_processing+0x55c>)
 800083a:	2258      	movs	r2, #88	; 0x58
 800083c:	601a      	str	r2, [r3, #0]
				valueSEG34 = 88;
 800083e:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <fsm_processing+0x560>)
 8000840:	2258      	movs	r2, #88	; 0x58
 8000842:	601a      	str	r2, [r3, #0]
				updateClockBuffer();
 8000844:	f000 fa6a 	bl	8000d1c <updateClockBuffer>
			break;
 8000848:	e04d      	b.n	80008e6 <fsm_processing+0x54e>
		}
		if (isButton2Pressed() == 1)
 800084a:	f7ff fccf 	bl	80001ec <isButton2Pressed>
 800084e:	4603      	mov	r3, r0
 8000850:	2b01      	cmp	r3, #1
 8000852:	d104      	bne.n	800085e <fsm_processing+0x4c6>
		{
			timeGreenTemp++;
 8000854:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <fsm_processing+0x578>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	4a2d      	ldr	r2, [pc, #180]	; (8000910 <fsm_processing+0x578>)
 800085c:	6013      	str	r3, [r2, #0]
		}
		if (isButton3Pressed() == 1)
 800085e:	f7ff fcd7 	bl	8000210 <isButton3Pressed>
 8000862:	4603      	mov	r3, r0
 8000864:	2b01      	cmp	r3, #1
 8000866:	d103      	bne.n	8000870 <fsm_processing+0x4d8>
		{
			timeGreen = timeGreenTemp;
 8000868:	4b29      	ldr	r3, [pc, #164]	; (8000910 <fsm_processing+0x578>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a27      	ldr	r2, [pc, #156]	; (800090c <fsm_processing+0x574>)
 800086e:	6013      	str	r3, [r2, #0]
		}
		led_off(Red1);
 8000870:	2040      	movs	r0, #64	; 0x40
 8000872:	f000 fabd 	bl	8000df0 <led_off>
		led_off(Red2);
 8000876:	f44f 7000 	mov.w	r0, #512	; 0x200
 800087a:	f000 fab9 	bl	8000df0 <led_off>
		led_off(Amber1);
 800087e:	2020      	movs	r0, #32
 8000880:	f000 fab6 	bl	8000df0 <led_off>
		led_off(Amber2);
 8000884:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000888:	f000 fab2 	bl	8000df0 <led_off>
		valueSEG12 = 4;
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <fsm_processing+0x55c>)
 800088e:	2204      	movs	r2, #4
 8000890:	601a      	str	r2, [r3, #0]
		valueSEG34 = timeGreenTemp;
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <fsm_processing+0x578>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <fsm_processing+0x560>)
 8000898:	6013      	str	r3, [r2, #0]
		updateClockBuffer();
 800089a:	f000 fa3f 	bl	8000d1c <updateClockBuffer>
		if (timer1_flag == 1) // HIỂN THỊ LED 7 ĐOẠN
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <fsm_processing+0x564>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d11e      	bne.n	80008e4 <fsm_processing+0x54c>
		{
			if (Index > 3) Index = 0;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <fsm_processing+0x568>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	dd02      	ble.n	80008b4 <fsm_processing+0x51c>
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <fsm_processing+0x568>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <fsm_processing+0x568>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	1c5a      	adds	r2, r3, #1
 80008ba:	4911      	ldr	r1, [pc, #68]	; (8000900 <fsm_processing+0x568>)
 80008bc:	600a      	str	r2, [r1, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f9da 	bl	8000c78 <update7SEG>
			setTimer1(25);
 80008c4:	2019      	movs	r0, #25
 80008c6:	f000 fbef 	bl	80010a8 <setTimer1>
			blinkingLedGreen();
 80008ca:	f000 fab3 	bl	8000e34 <blinkingLedGreen>
		}
		break;
 80008ce:	e009      	b.n	80008e4 <fsm_processing+0x54c>

	default:
		break;
 80008d0:	bf00      	nop
 80008d2:	e008      	b.n	80008e6 <fsm_processing+0x54e>
		break;
 80008d4:	bf00      	nop
 80008d6:	e006      	b.n	80008e6 <fsm_processing+0x54e>
		break;
 80008d8:	bf00      	nop
 80008da:	e004      	b.n	80008e6 <fsm_processing+0x54e>
		break;
 80008dc:	bf00      	nop
 80008de:	e002      	b.n	80008e6 <fsm_processing+0x54e>
		break;
 80008e0:	bf00      	nop
 80008e2:	e000      	b.n	80008e6 <fsm_processing+0x54e>
		break;
 80008e4:	bf00      	nop
	}

	//
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200000bc 	.word	0x200000bc
 80008f0:	20000008 	.word	0x20000008
 80008f4:	200000c4 	.word	0x200000c4
 80008f8:	200000c0 	.word	0x200000c0
 80008fc:	20000064 	.word	0x20000064
 8000900:	2000005c 	.word	0x2000005c
 8000904:	20000074 	.word	0x20000074
 8000908:	2000004c 	.word	0x2000004c
 800090c:	2000000c 	.word	0x2000000c
 8000910:	200000b4 	.word	0x200000b4
 8000914:	200000b8 	.word	0x200000b8
 8000918:	20000010 	.word	0x20000010

0800091c <display7SEG>:
 */
#include "led_display.h"


void display7SEG(int num)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
   	if (num == 0)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d123      	bne.n	8000972 <display7SEG+0x56>
    {
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2101      	movs	r1, #1
 800092e:	48c2      	ldr	r0, [pc, #776]	; (8000c38 <display7SEG+0x31c>)
 8000930:	f000 fff9 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2102      	movs	r1, #2
 8000938:	48bf      	ldr	r0, [pc, #764]	; (8000c38 <display7SEG+0x31c>)
 800093a:	f000 fff4 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2104      	movs	r1, #4
 8000942:	48bd      	ldr	r0, [pc, #756]	; (8000c38 <display7SEG+0x31c>)
 8000944:	f000 ffef 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2108      	movs	r1, #8
 800094c:	48ba      	ldr	r0, [pc, #744]	; (8000c38 <display7SEG+0x31c>)
 800094e:	f000 ffea 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2110      	movs	r1, #16
 8000956:	48b8      	ldr	r0, [pc, #736]	; (8000c38 <display7SEG+0x31c>)
 8000958:	f000 ffe5 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2120      	movs	r1, #32
 8000960:	48b5      	ldr	r0, [pc, #724]	; (8000c38 <display7SEG+0x31c>)
 8000962:	f000 ffe0 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 1);
 8000966:	2201      	movs	r2, #1
 8000968:	2140      	movs	r1, #64	; 0x40
 800096a:	48b3      	ldr	r0, [pc, #716]	; (8000c38 <display7SEG+0x31c>)
 800096c:	f000 ffdb 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
   	}
}
 8000970:	e15d      	b.n	8000c2e <display7SEG+0x312>
   	else if (num == 1)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d123      	bne.n	80009c0 <display7SEG+0xa4>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 1);
 8000978:	2201      	movs	r2, #1
 800097a:	2101      	movs	r1, #1
 800097c:	48ae      	ldr	r0, [pc, #696]	; (8000c38 <display7SEG+0x31c>)
 800097e:	f000 ffd2 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2102      	movs	r1, #2
 8000986:	48ac      	ldr	r0, [pc, #688]	; (8000c38 <display7SEG+0x31c>)
 8000988:	f000 ffcd 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2104      	movs	r1, #4
 8000990:	48a9      	ldr	r0, [pc, #676]	; (8000c38 <display7SEG+0x31c>)
 8000992:	f000 ffc8 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 1);
 8000996:	2201      	movs	r2, #1
 8000998:	2108      	movs	r1, #8
 800099a:	48a7      	ldr	r0, [pc, #668]	; (8000c38 <display7SEG+0x31c>)
 800099c:	f000 ffc3 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2110      	movs	r1, #16
 80009a4:	48a4      	ldr	r0, [pc, #656]	; (8000c38 <display7SEG+0x31c>)
 80009a6:	f000 ffbe 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 1);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2120      	movs	r1, #32
 80009ae:	48a2      	ldr	r0, [pc, #648]	; (8000c38 <display7SEG+0x31c>)
 80009b0:	f000 ffb9 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 1);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2140      	movs	r1, #64	; 0x40
 80009b8:	489f      	ldr	r0, [pc, #636]	; (8000c38 <display7SEG+0x31c>)
 80009ba:	f000 ffb4 	bl	8001926 <HAL_GPIO_WritePin>
}
 80009be:	e136      	b.n	8000c2e <display7SEG+0x312>
   	else if (num == 2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d123      	bne.n	8000a0e <display7SEG+0xf2>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2101      	movs	r1, #1
 80009ca:	489b      	ldr	r0, [pc, #620]	; (8000c38 <display7SEG+0x31c>)
 80009cc:	f000 ffab 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2102      	movs	r1, #2
 80009d4:	4898      	ldr	r0, [pc, #608]	; (8000c38 <display7SEG+0x31c>)
 80009d6:	f000 ffa6 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 1);
 80009da:	2201      	movs	r2, #1
 80009dc:	2104      	movs	r1, #4
 80009de:	4896      	ldr	r0, [pc, #600]	; (8000c38 <display7SEG+0x31c>)
 80009e0:	f000 ffa1 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2108      	movs	r1, #8
 80009e8:	4893      	ldr	r0, [pc, #588]	; (8000c38 <display7SEG+0x31c>)
 80009ea:	f000 ff9c 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2110      	movs	r1, #16
 80009f2:	4891      	ldr	r0, [pc, #580]	; (8000c38 <display7SEG+0x31c>)
 80009f4:	f000 ff97 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 1);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2120      	movs	r1, #32
 80009fc:	488e      	ldr	r0, [pc, #568]	; (8000c38 <display7SEG+0x31c>)
 80009fe:	f000 ff92 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2140      	movs	r1, #64	; 0x40
 8000a06:	488c      	ldr	r0, [pc, #560]	; (8000c38 <display7SEG+0x31c>)
 8000a08:	f000 ff8d 	bl	8001926 <HAL_GPIO_WritePin>
}
 8000a0c:	e10f      	b.n	8000c2e <display7SEG+0x312>
   	else if (num == 3)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b03      	cmp	r3, #3
 8000a12:	d123      	bne.n	8000a5c <display7SEG+0x140>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2101      	movs	r1, #1
 8000a18:	4887      	ldr	r0, [pc, #540]	; (8000c38 <display7SEG+0x31c>)
 8000a1a:	f000 ff84 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2102      	movs	r1, #2
 8000a22:	4885      	ldr	r0, [pc, #532]	; (8000c38 <display7SEG+0x31c>)
 8000a24:	f000 ff7f 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	4882      	ldr	r0, [pc, #520]	; (8000c38 <display7SEG+0x31c>)
 8000a2e:	f000 ff7a 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2108      	movs	r1, #8
 8000a36:	4880      	ldr	r0, [pc, #512]	; (8000c38 <display7SEG+0x31c>)
 8000a38:	f000 ff75 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2110      	movs	r1, #16
 8000a40:	487d      	ldr	r0, [pc, #500]	; (8000c38 <display7SEG+0x31c>)
 8000a42:	f000 ff70 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 1);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2120      	movs	r1, #32
 8000a4a:	487b      	ldr	r0, [pc, #492]	; (8000c38 <display7SEG+0x31c>)
 8000a4c:	f000 ff6b 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2140      	movs	r1, #64	; 0x40
 8000a54:	4878      	ldr	r0, [pc, #480]	; (8000c38 <display7SEG+0x31c>)
 8000a56:	f000 ff66 	bl	8001926 <HAL_GPIO_WritePin>
}
 8000a5a:	e0e8      	b.n	8000c2e <display7SEG+0x312>
   	else if (num == 4)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	d123      	bne.n	8000aaa <display7SEG+0x18e>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 1);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2101      	movs	r1, #1
 8000a66:	4874      	ldr	r0, [pc, #464]	; (8000c38 <display7SEG+0x31c>)
 8000a68:	f000 ff5d 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2102      	movs	r1, #2
 8000a70:	4871      	ldr	r0, [pc, #452]	; (8000c38 <display7SEG+0x31c>)
 8000a72:	f000 ff58 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2104      	movs	r1, #4
 8000a7a:	486f      	ldr	r0, [pc, #444]	; (8000c38 <display7SEG+0x31c>)
 8000a7c:	f000 ff53 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 1);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2108      	movs	r1, #8
 8000a84:	486c      	ldr	r0, [pc, #432]	; (8000c38 <display7SEG+0x31c>)
 8000a86:	f000 ff4e 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2110      	movs	r1, #16
 8000a8e:	486a      	ldr	r0, [pc, #424]	; (8000c38 <display7SEG+0x31c>)
 8000a90:	f000 ff49 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2120      	movs	r1, #32
 8000a98:	4867      	ldr	r0, [pc, #412]	; (8000c38 <display7SEG+0x31c>)
 8000a9a:	f000 ff44 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2140      	movs	r1, #64	; 0x40
 8000aa2:	4865      	ldr	r0, [pc, #404]	; (8000c38 <display7SEG+0x31c>)
 8000aa4:	f000 ff3f 	bl	8001926 <HAL_GPIO_WritePin>
}
 8000aa8:	e0c1      	b.n	8000c2e <display7SEG+0x312>
   	else if (num == 5)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b05      	cmp	r3, #5
 8000aae:	d123      	bne.n	8000af8 <display7SEG+0x1dc>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	4860      	ldr	r0, [pc, #384]	; (8000c38 <display7SEG+0x31c>)
 8000ab6:	f000 ff36 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 1);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2102      	movs	r1, #2
 8000abe:	485e      	ldr	r0, [pc, #376]	; (8000c38 <display7SEG+0x31c>)
 8000ac0:	f000 ff31 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	485b      	ldr	r0, [pc, #364]	; (8000c38 <display7SEG+0x31c>)
 8000aca:	f000 ff2c 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	4859      	ldr	r0, [pc, #356]	; (8000c38 <display7SEG+0x31c>)
 8000ad4:	f000 ff27 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2110      	movs	r1, #16
 8000adc:	4856      	ldr	r0, [pc, #344]	; (8000c38 <display7SEG+0x31c>)
 8000ade:	f000 ff22 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	4854      	ldr	r0, [pc, #336]	; (8000c38 <display7SEG+0x31c>)
 8000ae8:	f000 ff1d 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2140      	movs	r1, #64	; 0x40
 8000af0:	4851      	ldr	r0, [pc, #324]	; (8000c38 <display7SEG+0x31c>)
 8000af2:	f000 ff18 	bl	8001926 <HAL_GPIO_WritePin>
}
 8000af6:	e09a      	b.n	8000c2e <display7SEG+0x312>
   	else if (num == 6)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d123      	bne.n	8000b46 <display7SEG+0x22a>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2101      	movs	r1, #1
 8000b02:	484d      	ldr	r0, [pc, #308]	; (8000c38 <display7SEG+0x31c>)
 8000b04:	f000 ff0f 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 1);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	484a      	ldr	r0, [pc, #296]	; (8000c38 <display7SEG+0x31c>)
 8000b0e:	f000 ff0a 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2104      	movs	r1, #4
 8000b16:	4848      	ldr	r0, [pc, #288]	; (8000c38 <display7SEG+0x31c>)
 8000b18:	f000 ff05 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2108      	movs	r1, #8
 8000b20:	4845      	ldr	r0, [pc, #276]	; (8000c38 <display7SEG+0x31c>)
 8000b22:	f000 ff00 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4843      	ldr	r0, [pc, #268]	; (8000c38 <display7SEG+0x31c>)
 8000b2c:	f000 fefb 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2120      	movs	r1, #32
 8000b34:	4840      	ldr	r0, [pc, #256]	; (8000c38 <display7SEG+0x31c>)
 8000b36:	f000 fef6 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2140      	movs	r1, #64	; 0x40
 8000b3e:	483e      	ldr	r0, [pc, #248]	; (8000c38 <display7SEG+0x31c>)
 8000b40:	f000 fef1 	bl	8001926 <HAL_GPIO_WritePin>
}
 8000b44:	e073      	b.n	8000c2e <display7SEG+0x312>
   	else if (num == 7)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b07      	cmp	r3, #7
 8000b4a:	d123      	bne.n	8000b94 <display7SEG+0x278>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2101      	movs	r1, #1
 8000b50:	4839      	ldr	r0, [pc, #228]	; (8000c38 <display7SEG+0x31c>)
 8000b52:	f000 fee8 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2102      	movs	r1, #2
 8000b5a:	4837      	ldr	r0, [pc, #220]	; (8000c38 <display7SEG+0x31c>)
 8000b5c:	f000 fee3 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2104      	movs	r1, #4
 8000b64:	4834      	ldr	r0, [pc, #208]	; (8000c38 <display7SEG+0x31c>)
 8000b66:	f000 fede 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 1);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2108      	movs	r1, #8
 8000b6e:	4832      	ldr	r0, [pc, #200]	; (8000c38 <display7SEG+0x31c>)
 8000b70:	f000 fed9 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2110      	movs	r1, #16
 8000b78:	482f      	ldr	r0, [pc, #188]	; (8000c38 <display7SEG+0x31c>)
 8000b7a:	f000 fed4 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 1);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2120      	movs	r1, #32
 8000b82:	482d      	ldr	r0, [pc, #180]	; (8000c38 <display7SEG+0x31c>)
 8000b84:	f000 fecf 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 1);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2140      	movs	r1, #64	; 0x40
 8000b8c:	482a      	ldr	r0, [pc, #168]	; (8000c38 <display7SEG+0x31c>)
 8000b8e:	f000 feca 	bl	8001926 <HAL_GPIO_WritePin>
}
 8000b92:	e04c      	b.n	8000c2e <display7SEG+0x312>
   	else if (num == 8)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b08      	cmp	r3, #8
 8000b98:	d123      	bne.n	8000be2 <display7SEG+0x2c6>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4826      	ldr	r0, [pc, #152]	; (8000c38 <display7SEG+0x31c>)
 8000ba0:	f000 fec1 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	4823      	ldr	r0, [pc, #140]	; (8000c38 <display7SEG+0x31c>)
 8000baa:	f000 febc 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	4821      	ldr	r0, [pc, #132]	; (8000c38 <display7SEG+0x31c>)
 8000bb4:	f000 feb7 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2108      	movs	r1, #8
 8000bbc:	481e      	ldr	r0, [pc, #120]	; (8000c38 <display7SEG+0x31c>)
 8000bbe:	f000 feb2 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	481c      	ldr	r0, [pc, #112]	; (8000c38 <display7SEG+0x31c>)
 8000bc8:	f000 fead 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2120      	movs	r1, #32
 8000bd0:	4819      	ldr	r0, [pc, #100]	; (8000c38 <display7SEG+0x31c>)
 8000bd2:	f000 fea8 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	4817      	ldr	r0, [pc, #92]	; (8000c38 <display7SEG+0x31c>)
 8000bdc:	f000 fea3 	bl	8001926 <HAL_GPIO_WritePin>
}
 8000be0:	e025      	b.n	8000c2e <display7SEG+0x312>
   	else if (num == 9)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b09      	cmp	r3, #9
 8000be6:	d122      	bne.n	8000c2e <display7SEG+0x312>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2101      	movs	r1, #1
 8000bec:	4812      	ldr	r0, [pc, #72]	; (8000c38 <display7SEG+0x31c>)
 8000bee:	f000 fe9a 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4810      	ldr	r0, [pc, #64]	; (8000c38 <display7SEG+0x31c>)
 8000bf8:	f000 fe95 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2104      	movs	r1, #4
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <display7SEG+0x31c>)
 8000c02:	f000 fe90 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2108      	movs	r1, #8
 8000c0a:	480b      	ldr	r0, [pc, #44]	; (8000c38 <display7SEG+0x31c>)
 8000c0c:	f000 fe8b 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2110      	movs	r1, #16
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <display7SEG+0x31c>)
 8000c16:	f000 fe86 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <display7SEG+0x31c>)
 8000c20:	f000 fe81 	bl	8001926 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2140      	movs	r1, #64	; 0x40
 8000c28:	4803      	ldr	r0, [pc, #12]	; (8000c38 <display7SEG+0x31c>)
 8000c2a:	f000 fe7c 	bl	8001926 <HAL_GPIO_WritePin>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40010c00 	.word	0x40010c00

08000c3c <unEnableAll>:
int led_buffer[4] = {8, 8, 8, 8};
void unEnableAll()
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG7_1_GPIO_Port, SEG7_1_Pin, 1);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2180      	movs	r1, #128	; 0x80
 8000c44:	480b      	ldr	r0, [pc, #44]	; (8000c74 <unEnableAll+0x38>)
 8000c46:	f000 fe6e 	bl	8001926 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG7_2_GPIO_Port, SEG7_2_Pin, 1);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c50:	4808      	ldr	r0, [pc, #32]	; (8000c74 <unEnableAll+0x38>)
 8000c52:	f000 fe68 	bl	8001926 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG7_3_GPIO_Port, SEG7_3_Pin, 1);
 8000c56:	2201      	movs	r2, #1
 8000c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <unEnableAll+0x38>)
 8000c5e:	f000 fe62 	bl	8001926 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG7_4_GPIO_Port, SEG7_4_Pin, 1);
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <unEnableAll+0x38>)
 8000c6a:	f000 fe5c 	bl	8001926 <HAL_GPIO_WritePin>
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40010c00 	.word	0x40010c00

08000c78 <update7SEG>:
void update7SEG(int index)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d841      	bhi.n	8000d0a <update7SEG+0x92>
 8000c86:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <update7SEG+0x14>)
 8000c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8c:	08000c9d 	.word	0x08000c9d
 8000c90:	08000cb7 	.word	0x08000cb7
 8000c94:	08000cd3 	.word	0x08000cd3
 8000c98:	08000cef 	.word	0x08000cef
	switch (index)
	{
		case 0:
			unEnableAll();
 8000c9c:	f7ff ffce 	bl	8000c3c <unEnableAll>
			HAL_GPIO_WritePin(SEG7_1_GPIO_Port, SEG7_1_Pin, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2180      	movs	r1, #128	; 0x80
 8000ca4:	481b      	ldr	r0, [pc, #108]	; (8000d14 <update7SEG+0x9c>)
 8000ca6:	f000 fe3e 	bl	8001926 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <update7SEG+0xa0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fe34 	bl	800091c <display7SEG>
			break;
 8000cb4:	e02a      	b.n	8000d0c <update7SEG+0x94>
		case 1:
			unEnableAll();
 8000cb6:	f7ff ffc1 	bl	8000c3c <unEnableAll>
			HAL_GPIO_WritePin(SEG7_2_GPIO_Port, SEG7_2_Pin, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc0:	4814      	ldr	r0, [pc, #80]	; (8000d14 <update7SEG+0x9c>)
 8000cc2:	f000 fe30 	bl	8001926 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <update7SEG+0xa0>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fe26 	bl	800091c <display7SEG>
			break;
 8000cd0:	e01c      	b.n	8000d0c <update7SEG+0x94>
		case 2:
			unEnableAll();
 8000cd2:	f7ff ffb3 	bl	8000c3c <unEnableAll>
			HAL_GPIO_WritePin(SEG7_3_GPIO_Port, SEG7_3_Pin, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <update7SEG+0x9c>)
 8000cde:	f000 fe22 	bl	8001926 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <update7SEG+0xa0>)
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe18 	bl	800091c <display7SEG>
			break;
 8000cec:	e00e      	b.n	8000d0c <update7SEG+0x94>
		case 3:
			unEnableAll();
 8000cee:	f7ff ffa5 	bl	8000c3c <unEnableAll>
			HAL_GPIO_WritePin(SEG7_4_GPIO_Port, SEG7_4_Pin, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf8:	4806      	ldr	r0, [pc, #24]	; (8000d14 <update7SEG+0x9c>)
 8000cfa:	f000 fe14 	bl	8001926 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <update7SEG+0xa0>)
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fe0a 	bl	800091c <display7SEG>
			break;
 8000d08:	e000      	b.n	8000d0c <update7SEG+0x94>
		default:
			break;
 8000d0a:	bf00      	nop
	}
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40010c00 	.word	0x40010c00
 8000d18:	20000014 	.word	0x20000014

08000d1c <updateClockBuffer>:
int valueSEG12;
int valueSEG34;
void updateClockBuffer()
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
	if (valueSEG12 <= 9)
 8000d20:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <updateClockBuffer+0xa0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b09      	cmp	r3, #9
 8000d26:	dc07      	bgt.n	8000d38 <updateClockBuffer+0x1c>
	{
		led_buffer[0] = 0;
 8000d28:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <updateClockBuffer+0xa4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
		led_buffer[1] = valueSEG12;
 8000d2e:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <updateClockBuffer+0xa0>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a23      	ldr	r2, [pc, #140]	; (8000dc0 <updateClockBuffer+0xa4>)
 8000d34:	6053      	str	r3, [r2, #4]
 8000d36:	e018      	b.n	8000d6a <updateClockBuffer+0x4e>
	}
	else
	{
		led_buffer[0] = valueSEG12 / 10;
 8000d38:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <updateClockBuffer+0xa0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a21      	ldr	r2, [pc, #132]	; (8000dc4 <updateClockBuffer+0xa8>)
 8000d3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d42:	1092      	asrs	r2, r2, #2
 8000d44:	17db      	asrs	r3, r3, #31
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	4a1d      	ldr	r2, [pc, #116]	; (8000dc0 <updateClockBuffer+0xa4>)
 8000d4a:	6013      	str	r3, [r2, #0]
		led_buffer[1] = valueSEG12 % 10;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <updateClockBuffer+0xa0>)
 8000d4e:	6819      	ldr	r1, [r3, #0]
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <updateClockBuffer+0xa8>)
 8000d52:	fb83 2301 	smull	r2, r3, r3, r1
 8000d56:	109a      	asrs	r2, r3, #2
 8000d58:	17cb      	asrs	r3, r1, #31
 8000d5a:	1ad2      	subs	r2, r2, r3
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	1aca      	subs	r2, r1, r3
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <updateClockBuffer+0xa4>)
 8000d68:	605a      	str	r2, [r3, #4]
	}
	if (valueSEG34 <= 9)
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <updateClockBuffer+0xac>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b09      	cmp	r3, #9
 8000d70:	dc07      	bgt.n	8000d82 <updateClockBuffer+0x66>
	{
		led_buffer[2] = 0;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <updateClockBuffer+0xa4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
		led_buffer[3] = valueSEG34;
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <updateClockBuffer+0xac>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <updateClockBuffer+0xa4>)
 8000d7e:	60d3      	str	r3, [r2, #12]
	else
	{
		led_buffer[2] = valueSEG34 / 10;
		led_buffer[3] = valueSEG34 % 10;
	}
}
 8000d80:	e018      	b.n	8000db4 <updateClockBuffer+0x98>
		led_buffer[2] = valueSEG34 / 10;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <updateClockBuffer+0xac>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <updateClockBuffer+0xa8>)
 8000d88:	fb82 1203 	smull	r1, r2, r2, r3
 8000d8c:	1092      	asrs	r2, r2, #2
 8000d8e:	17db      	asrs	r3, r3, #31
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <updateClockBuffer+0xa4>)
 8000d94:	6093      	str	r3, [r2, #8]
		led_buffer[3] = valueSEG34 % 10;
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <updateClockBuffer+0xac>)
 8000d98:	6819      	ldr	r1, [r3, #0]
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <updateClockBuffer+0xa8>)
 8000d9c:	fb83 2301 	smull	r2, r3, r3, r1
 8000da0:	109a      	asrs	r2, r3, #2
 8000da2:	17cb      	asrs	r3, r1, #31
 8000da4:	1ad2      	subs	r2, r2, r3
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	1aca      	subs	r2, r1, r3
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <updateClockBuffer+0xa4>)
 8000db2:	60da      	str	r2, [r3, #12]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	200000c4 	.word	0x200000c4
 8000dc0:	20000014 	.word	0x20000014
 8000dc4:	66666667 	.word	0x66666667
 8000dc8:	200000c0 	.word	0x200000c0

08000dcc <led_on>:
void led_on(int pin)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, pin, 0);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	2200      	movs	r2, #0
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <led_on+0x20>)
 8000dde:	f000 fda2 	bl	8001926 <HAL_GPIO_WritePin>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40010800 	.word	0x40010800

08000df0 <led_off>:
void led_off(int pin)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, pin, 1);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <led_off+0x20>)
 8000e02:	f000 fd90 	bl	8001926 <HAL_GPIO_WritePin>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40010800 	.word	0x40010800

08000e14 <blinkingLedRed>:
void blinkingLedRed()
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Red1_GPIO_Port, Red1_Pin);
 8000e18:	2140      	movs	r1, #64	; 0x40
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <blinkingLedRed+0x1c>)
 8000e1c:	f000 fd9b 	bl	8001956 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Red2_GPIO_Port, Red2_Pin);
 8000e20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <blinkingLedRed+0x1c>)
 8000e26:	f000 fd96 	bl	8001956 <HAL_GPIO_TogglePin>
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40010800 	.word	0x40010800

08000e34 <blinkingLedGreen>:
void blinkingLedGreen()
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Green1_GPIO_Port, Green1_Pin);
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4804      	ldr	r0, [pc, #16]	; (8000e4c <blinkingLedGreen+0x18>)
 8000e3c:	f000 fd8b 	bl	8001956 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Green2_GPIO_Port, Green2_Pin);
 8000e40:	2180      	movs	r1, #128	; 0x80
 8000e42:	4802      	ldr	r0, [pc, #8]	; (8000e4c <blinkingLedGreen+0x18>)
 8000e44:	f000 fd87 	bl	8001956 <HAL_GPIO_TogglePin>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40010800 	.word	0x40010800

08000e50 <blinkingLedAmber>:
void blinkingLedAmber()
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Amber1_GPIO_Port, Amber1_Pin);
 8000e54:	2120      	movs	r1, #32
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <blinkingLedAmber+0x1c>)
 8000e58:	f000 fd7d 	bl	8001956 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Amber2_GPIO_Port, Amber2_Pin);
 8000e5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <blinkingLedAmber+0x1c>)
 8000e62:	f000 fd78 	bl	8001956 <HAL_GPIO_TogglePin>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40010800 	.word	0x40010800

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e74:	f000 fa56 	bl	8001324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e78:	f000 f818 	bl	8000eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7c:	f000 f89e 	bl	8000fbc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e80:	f000 f850 	bl	8000f24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e84:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <main+0x38>)
 8000e86:	f001 f9ab 	bl	80021e0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initialButton();
 8000e8a:	f7ff f95f 	bl	800014c <initialButton>
  setTimer1(25); // TIMER ĐỂ QUÉT LED
 8000e8e:	2019      	movs	r0, #25
 8000e90:	f000 f90a 	bl	80010a8 <setTimer1>
  setTimer2(100); // TIMER ĐỂ CẬP NHẬT GIÁ TRỊ LED
 8000e94:	2064      	movs	r0, #100	; 0x64
 8000e96:	f000 f91b 	bl	80010d0 <setTimer2>
  setTimer3(1); // TIMER ĐỂ READ VALUE CỦA BUTTON
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f000 f92c 	bl	80010f8 <setTimer3>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_processing();
 8000ea0:	f7ff fa7a 	bl	8000398 <fsm_processing>
 8000ea4:	e7fc      	b.n	8000ea0 <main+0x30>
 8000ea6:	bf00      	nop
 8000ea8:	200000c8 	.word	0x200000c8

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b090      	sub	sp, #64	; 0x40
 8000eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	2228      	movs	r2, #40	; 0x28
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 fd4c 	bl	8002958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed6:	2310      	movs	r3, #16
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ede:	f107 0318 	add.w	r3, r7, #24
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fd50 	bl	8001988 <HAL_RCC_OscConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000eee:	f000 f8d5 	bl	800109c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef2:	230f      	movs	r3, #15
 8000ef4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 ffbc 	bl	8001e88 <HAL_RCC_ClockConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f16:	f000 f8c1 	bl	800109c <Error_Handler>
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	3740      	adds	r7, #64	; 0x40
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	463b      	mov	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f4a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f58:	2209      	movs	r2, #9
 8000f5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f68:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f6a:	f001 f8e9 	bl	8002140 <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f74:	f000 f892 	bl	800109c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4619      	mov	r1, r3
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f86:	f001 fa7f 	bl	8002488 <HAL_TIM_ConfigClockSource>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f90:	f000 f884 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000fa2:	f001 fc4b 	bl	800283c <HAL_TIMEx_MasterConfigSynchronization>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fac:	f000 f876 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200000c8 	.word	0x200000c8

08000fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b28      	ldr	r3, [pc, #160]	; (8001074 <MX_GPIO_Init+0xb8>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a27      	ldr	r2, [pc, #156]	; (8001074 <MX_GPIO_Init+0xb8>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <MX_GPIO_Init+0xb8>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <MX_GPIO_Init+0xb8>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a21      	ldr	r2, [pc, #132]	; (8001074 <MX_GPIO_Init+0xb8>)
 8000fee:	f043 0308 	orr.w	r3, r3, #8
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <MX_GPIO_Init+0xb8>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0308 	and.w	r3, r3, #8
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green1_Pin|Amber1_Pin|Red1_Pin|Green2_Pin
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001006:	481c      	ldr	r0, [pc, #112]	; (8001078 <MX_GPIO_Init+0xbc>)
 8001008:	f000 fc8d 	bl	8001926 <HAL_GPIO_WritePin>
                          |Amber2_Pin|Red2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG7_a_Pin|SEG7_b_Pin|SEG7_c_Pin|SEG7_4_Pin
 800100c:	2200      	movs	r2, #0
 800100e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001012:	481a      	ldr	r0, [pc, #104]	; (800107c <MX_GPIO_Init+0xc0>)
 8001014:	f000 fc87 	bl	8001926 <HAL_GPIO_WritePin>
                          |SEG7_d_Pin|SEG7_e_Pin|SEG7_f_Pin|SEG7_g_Pin
                          |SEG7_1_Pin|SEG7_2_Pin|SEG7_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BT1_Pin BT2_Pin BT3_Pin */
  GPIO_InitStruct.Pin = BT1_Pin|BT2_Pin|BT3_Pin;
 8001018:	230e      	movs	r3, #14
 800101a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001020:	2301      	movs	r3, #1
 8001022:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	4619      	mov	r1, r3
 800102a:	4813      	ldr	r0, [pc, #76]	; (8001078 <MX_GPIO_Init+0xbc>)
 800102c:	f000 faea 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green1_Pin Amber1_Pin Red1_Pin Green2_Pin
                           Amber2_Pin Red2_Pin */
  GPIO_InitStruct.Pin = Green1_Pin|Amber1_Pin|Red1_Pin|Green2_Pin
 8001030:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001034:	60bb      	str	r3, [r7, #8]
                          |Amber2_Pin|Red2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2302      	movs	r3, #2
 8001040:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4619      	mov	r1, r3
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <MX_GPIO_Init+0xbc>)
 800104a:	f000 fadb 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG7_a_Pin SEG7_b_Pin SEG7_c_Pin SEG7_4_Pin
                           SEG7_d_Pin SEG7_e_Pin SEG7_f_Pin SEG7_g_Pin
                           SEG7_1_Pin SEG7_2_Pin SEG7_3_Pin */
  GPIO_InitStruct.Pin = SEG7_a_Pin|SEG7_b_Pin|SEG7_c_Pin|SEG7_4_Pin
 800104e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001052:	60bb      	str	r3, [r7, #8]
                          |SEG7_d_Pin|SEG7_e_Pin|SEG7_f_Pin|SEG7_g_Pin
                          |SEG7_1_Pin|SEG7_2_Pin|SEG7_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	2301      	movs	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2302      	movs	r3, #2
 800105e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	4619      	mov	r1, r3
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_GPIO_Init+0xc0>)
 8001068:	f000 facc 	bl	8001604 <HAL_GPIO_Init>

}
 800106c:	bf00      	nop
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40021000 	.word	0x40021000
 8001078:	40010800 	.word	0x40010800
 800107c:	40010c00 	.word	0x40010c00

08001080 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	timer1Run();
 8001088:	f000 f84a 	bl	8001120 <timer1Run>
	timer2Run();
 800108c:	f000 f862 	bl	8001154 <timer2Run>
	timer3Run();
 8001090:	f000 f87a 	bl	8001188 <timer3Run>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <Error_Handler+0x8>
	...

080010a8 <setTimer1>:
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;
void setTimer1(int duration)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80010b0:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <setTimer1+0x20>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <setTimer1+0x24>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000060 	.word	0x20000060
 80010cc:	20000064 	.word	0x20000064

080010d0 <setTimer2>:
void setTimer2(int duration)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80010d8:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <setTimer2+0x20>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <setTimer2+0x24>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000068 	.word	0x20000068
 80010f4:	2000006c 	.word	0x2000006c

080010f8 <setTimer3>:
void setTimer3(int duration)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001100:	4a05      	ldr	r2, [pc, #20]	; (8001118 <setTimer3+0x20>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <setTimer3+0x24>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000070 	.word	0x20000070
 800111c:	20000074 	.word	0x20000074

08001120 <timer1Run>:
void timer1Run()
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
	if (timer1_counter > 0)
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <timer1Run+0x2c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	dd0b      	ble.n	8001144 <timer1Run+0x24>
	{
		timer1_counter--;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <timer1Run+0x2c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3b01      	subs	r3, #1
 8001132:	4a06      	ldr	r2, [pc, #24]	; (800114c <timer1Run+0x2c>)
 8001134:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0)
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <timer1Run+0x2c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	dc02      	bgt.n	8001144 <timer1Run+0x24>
		{
			timer1_flag = 1;
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <timer1Run+0x30>)
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]
		}

	}
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	20000060 	.word	0x20000060
 8001150:	20000064 	.word	0x20000064

08001154 <timer2Run>:
void timer2Run()
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
	if (timer2_counter > 0)
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <timer2Run+0x2c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	dd0b      	ble.n	8001178 <timer2Run+0x24>
	{
		timer2_counter--;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <timer2Run+0x2c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3b01      	subs	r3, #1
 8001166:	4a06      	ldr	r2, [pc, #24]	; (8001180 <timer2Run+0x2c>)
 8001168:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0)
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <timer2Run+0x2c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	dc02      	bgt.n	8001178 <timer2Run+0x24>
		{
			timer2_flag = 1;
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <timer2Run+0x30>)
 8001174:	2201      	movs	r2, #1
 8001176:	601a      	str	r2, [r3, #0]
		}

	}
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	20000068 	.word	0x20000068
 8001184:	2000006c 	.word	0x2000006c

08001188 <timer3Run>:
void timer3Run()
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
	if (timer3_counter > 0)
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <timer3Run+0x2c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	dd0b      	ble.n	80011ac <timer3Run+0x24>
	{
		timer3_counter--;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <timer3Run+0x2c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3b01      	subs	r3, #1
 800119a:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <timer3Run+0x2c>)
 800119c:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0)
 800119e:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <timer3Run+0x2c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	dc02      	bgt.n	80011ac <timer3Run+0x24>
		{
			timer3_flag = 1;
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <timer3Run+0x30>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
		}

	}
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	20000070 	.word	0x20000070
 80011b8:	20000074 	.word	0x20000074

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_MspInit+0x5c>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	4a14      	ldr	r2, [pc, #80]	; (8001218 <HAL_MspInit+0x5c>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6193      	str	r3, [r2, #24]
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_MspInit+0x5c>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_MspInit+0x5c>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <HAL_MspInit+0x5c>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e4:	61d3      	str	r3, [r2, #28]
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HAL_MspInit+0x5c>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_MspInit+0x60>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_MspInit+0x60>)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	40021000 	.word	0x40021000
 800121c:	40010000 	.word	0x40010000

08001220 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001230:	d113      	bne.n	800125a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_TIM_Base_MspInit+0x44>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <HAL_TIM_Base_MspInit+0x44>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_TIM_Base_MspInit+0x44>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	201c      	movs	r0, #28
 8001250:	f000 f9a1 	bl	8001596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001254:	201c      	movs	r0, #28
 8001256:	f000 f9ba 	bl	80015ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800126c:	e7fe      	b.n	800126c <NMI_Handler+0x4>

0800126e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <MemManage_Handler+0x4>

0800127a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <UsageFault_Handler+0x4>

08001286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr

080012aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ae:	f000 f87f 	bl	80013b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <TIM2_IRQHandler+0x10>)
 80012be:	f000 ffdb 	bl	8002278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200000c8 	.word	0x200000c8

080012cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012d8:	f7ff fff8 	bl	80012cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012de:	490c      	ldr	r1, [pc, #48]	; (8001310 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012e0:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e4:	e002      	b.n	80012ec <LoopCopyDataInit>

080012e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ea:	3304      	adds	r3, #4

080012ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f0:	d3f9      	bcc.n	80012e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f2:	4a09      	ldr	r2, [pc, #36]	; (8001318 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012f4:	4c09      	ldr	r4, [pc, #36]	; (800131c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f8:	e001      	b.n	80012fe <LoopFillZerobss>

080012fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012fc:	3204      	adds	r2, #4

080012fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001300:	d3fb      	bcc.n	80012fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001302:	f001 fb05 	bl	8002910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001306:	f7ff fdb3 	bl	8000e70 <main>
  bx lr
 800130a:	4770      	bx	lr
  ldr r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001310:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001314:	080029ac 	.word	0x080029ac
  ldr r2, =_sbss
 8001318:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800131c:	20000114 	.word	0x20000114

08001320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC1_2_IRQHandler>
	...

08001324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_Init+0x28>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a07      	ldr	r2, [pc, #28]	; (800134c <HAL_Init+0x28>)
 800132e:	f043 0310 	orr.w	r3, r3, #16
 8001332:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001334:	2003      	movs	r0, #3
 8001336:	f000 f923 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133a:	200f      	movs	r0, #15
 800133c:	f000 f808 	bl	8001350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001340:	f7ff ff3c 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40022000 	.word	0x40022000

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_InitTick+0x54>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_InitTick+0x58>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	fbb3 f3f1 	udiv	r3, r3, r1
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f93b 	bl	80015ea <HAL_SYSTICK_Config>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e00e      	b.n	800139c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b0f      	cmp	r3, #15
 8001382:	d80a      	bhi.n	800139a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001384:	2200      	movs	r2, #0
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f000 f903 	bl	8001596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001390:	4a06      	ldr	r2, [pc, #24]	; (80013ac <HAL_InitTick+0x5c>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000024 	.word	0x20000024
 80013a8:	2000002c 	.word	0x2000002c
 80013ac:	20000028 	.word	0x20000028

080013b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_IncTick+0x1c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_IncTick+0x20>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a03      	ldr	r2, [pc, #12]	; (80013d0 <HAL_IncTick+0x20>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	2000002c 	.word	0x2000002c
 80013d0:	20000110 	.word	0x20000110

080013d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;
 80013d8:	4b02      	ldr	r3, [pc, #8]	; (80013e4 <HAL_GetTick+0x10>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	20000110 	.word	0x20000110

080013e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <__NVIC_GetPriorityGrouping+0x18>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f003 0307 	and.w	r3, r3, #7
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0b      	blt.n	8001476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	f003 021f 	and.w	r2, r3, #31
 8001464:	4906      	ldr	r1, [pc, #24]	; (8001480 <__NVIC_EnableIRQ+0x34>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	2001      	movs	r0, #1
 800146e:	fa00 f202 	lsl.w	r2, r0, r2
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	; (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
         );
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	; 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f7ff ff90 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff2d 	bl	80013e8 <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a8:	f7ff ff42 	bl	8001430 <__NVIC_GetPriorityGrouping>
 80015ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7ff ff90 	bl	80014d8 <NVIC_EncodePriority>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff5f 	bl	8001484 <__NVIC_SetPriority>
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff35 	bl	800144c <__NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffa2 	bl	800153c <SysTick_Config>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001604:	b480      	push	{r7}
 8001606:	b08b      	sub	sp, #44	; 0x2c
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001616:	e148      	b.n	80018aa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001618:	2201      	movs	r2, #1
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	429a      	cmp	r2, r3
 8001632:	f040 8137 	bne.w	80018a4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4aa3      	ldr	r2, [pc, #652]	; (80018c8 <HAL_GPIO_Init+0x2c4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d05e      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
 8001640:	4aa1      	ldr	r2, [pc, #644]	; (80018c8 <HAL_GPIO_Init+0x2c4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d875      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 8001646:	4aa1      	ldr	r2, [pc, #644]	; (80018cc <HAL_GPIO_Init+0x2c8>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d058      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
 800164c:	4a9f      	ldr	r2, [pc, #636]	; (80018cc <HAL_GPIO_Init+0x2c8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d86f      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 8001652:	4a9f      	ldr	r2, [pc, #636]	; (80018d0 <HAL_GPIO_Init+0x2cc>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d052      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
 8001658:	4a9d      	ldr	r2, [pc, #628]	; (80018d0 <HAL_GPIO_Init+0x2cc>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d869      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 800165e:	4a9d      	ldr	r2, [pc, #628]	; (80018d4 <HAL_GPIO_Init+0x2d0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d04c      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
 8001664:	4a9b      	ldr	r2, [pc, #620]	; (80018d4 <HAL_GPIO_Init+0x2d0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d863      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 800166a:	4a9b      	ldr	r2, [pc, #620]	; (80018d8 <HAL_GPIO_Init+0x2d4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d046      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
 8001670:	4a99      	ldr	r2, [pc, #612]	; (80018d8 <HAL_GPIO_Init+0x2d4>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d85d      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 8001676:	2b12      	cmp	r3, #18
 8001678:	d82a      	bhi.n	80016d0 <HAL_GPIO_Init+0xcc>
 800167a:	2b12      	cmp	r3, #18
 800167c:	d859      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 800167e:	a201      	add	r2, pc, #4	; (adr r2, 8001684 <HAL_GPIO_Init+0x80>)
 8001680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001684:	080016ff 	.word	0x080016ff
 8001688:	080016d9 	.word	0x080016d9
 800168c:	080016eb 	.word	0x080016eb
 8001690:	0800172d 	.word	0x0800172d
 8001694:	08001733 	.word	0x08001733
 8001698:	08001733 	.word	0x08001733
 800169c:	08001733 	.word	0x08001733
 80016a0:	08001733 	.word	0x08001733
 80016a4:	08001733 	.word	0x08001733
 80016a8:	08001733 	.word	0x08001733
 80016ac:	08001733 	.word	0x08001733
 80016b0:	08001733 	.word	0x08001733
 80016b4:	08001733 	.word	0x08001733
 80016b8:	08001733 	.word	0x08001733
 80016bc:	08001733 	.word	0x08001733
 80016c0:	08001733 	.word	0x08001733
 80016c4:	08001733 	.word	0x08001733
 80016c8:	080016e1 	.word	0x080016e1
 80016cc:	080016f5 	.word	0x080016f5
 80016d0:	4a82      	ldr	r2, [pc, #520]	; (80018dc <HAL_GPIO_Init+0x2d8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016d6:	e02c      	b.n	8001732 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	623b      	str	r3, [r7, #32]
          break;
 80016de:	e029      	b.n	8001734 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	3304      	adds	r3, #4
 80016e6:	623b      	str	r3, [r7, #32]
          break;
 80016e8:	e024      	b.n	8001734 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	3308      	adds	r3, #8
 80016f0:	623b      	str	r3, [r7, #32]
          break;
 80016f2:	e01f      	b.n	8001734 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	330c      	adds	r3, #12
 80016fa:	623b      	str	r3, [r7, #32]
          break;
 80016fc:	e01a      	b.n	8001734 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d102      	bne.n	800170c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001706:	2304      	movs	r3, #4
 8001708:	623b      	str	r3, [r7, #32]
          break;
 800170a:	e013      	b.n	8001734 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d105      	bne.n	8001720 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001714:	2308      	movs	r3, #8
 8001716:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	611a      	str	r2, [r3, #16]
          break;
 800171e:	e009      	b.n	8001734 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001720:	2308      	movs	r3, #8
 8001722:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	615a      	str	r2, [r3, #20]
          break;
 800172a:	e003      	b.n	8001734 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
          break;
 8001730:	e000      	b.n	8001734 <HAL_GPIO_Init+0x130>
          break;
 8001732:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	2bff      	cmp	r3, #255	; 0xff
 8001738:	d801      	bhi.n	800173e <HAL_GPIO_Init+0x13a>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	e001      	b.n	8001742 <HAL_GPIO_Init+0x13e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3304      	adds	r3, #4
 8001742:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2bff      	cmp	r3, #255	; 0xff
 8001748:	d802      	bhi.n	8001750 <HAL_GPIO_Init+0x14c>
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	e002      	b.n	8001756 <HAL_GPIO_Init+0x152>
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	3b08      	subs	r3, #8
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	210f      	movs	r1, #15
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	fa01 f303 	lsl.w	r3, r1, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	401a      	ands	r2, r3
 8001768:	6a39      	ldr	r1, [r7, #32]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	431a      	orrs	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8090 	beq.w	80018a4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001784:	4b56      	ldr	r3, [pc, #344]	; (80018e0 <HAL_GPIO_Init+0x2dc>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a55      	ldr	r2, [pc, #340]	; (80018e0 <HAL_GPIO_Init+0x2dc>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <HAL_GPIO_Init+0x2dc>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800179c:	4a51      	ldr	r2, [pc, #324]	; (80018e4 <HAL_GPIO_Init+0x2e0>)
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	089b      	lsrs	r3, r3, #2
 80017a2:	3302      	adds	r3, #2
 80017a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	220f      	movs	r2, #15
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	4013      	ands	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a49      	ldr	r2, [pc, #292]	; (80018e8 <HAL_GPIO_Init+0x2e4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d00d      	beq.n	80017e4 <HAL_GPIO_Init+0x1e0>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a48      	ldr	r2, [pc, #288]	; (80018ec <HAL_GPIO_Init+0x2e8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d007      	beq.n	80017e0 <HAL_GPIO_Init+0x1dc>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a47      	ldr	r2, [pc, #284]	; (80018f0 <HAL_GPIO_Init+0x2ec>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d101      	bne.n	80017dc <HAL_GPIO_Init+0x1d8>
 80017d8:	2302      	movs	r3, #2
 80017da:	e004      	b.n	80017e6 <HAL_GPIO_Init+0x1e2>
 80017dc:	2303      	movs	r3, #3
 80017de:	e002      	b.n	80017e6 <HAL_GPIO_Init+0x1e2>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <HAL_GPIO_Init+0x1e2>
 80017e4:	2300      	movs	r3, #0
 80017e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e8:	f002 0203 	and.w	r2, r2, #3
 80017ec:	0092      	lsls	r2, r2, #2
 80017ee:	4093      	lsls	r3, r2
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017f6:	493b      	ldr	r1, [pc, #236]	; (80018e4 <HAL_GPIO_Init+0x2e0>)
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3302      	adds	r3, #2
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001810:	4b38      	ldr	r3, [pc, #224]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	4937      	ldr	r1, [pc, #220]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800181e:	4b35      	ldr	r3, [pc, #212]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	43db      	mvns	r3, r3
 8001826:	4933      	ldr	r1, [pc, #204]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 8001828:	4013      	ands	r3, r2
 800182a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d006      	beq.n	8001846 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001838:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	492d      	ldr	r1, [pc, #180]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	60cb      	str	r3, [r1, #12]
 8001844:	e006      	b.n	8001854 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001846:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	43db      	mvns	r3, r3
 800184e:	4929      	ldr	r1, [pc, #164]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 8001850:	4013      	ands	r3, r2
 8001852:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001860:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	4923      	ldr	r1, [pc, #140]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	43db      	mvns	r3, r3
 8001876:	491f      	ldr	r1, [pc, #124]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 8001878:	4013      	ands	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d006      	beq.n	8001896 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4919      	ldr	r1, [pc, #100]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	43db      	mvns	r3, r3
 800189e:	4915      	ldr	r1, [pc, #84]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	3301      	adds	r3, #1
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	fa22 f303 	lsr.w	r3, r2, r3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f47f aeaf 	bne.w	8001618 <HAL_GPIO_Init+0x14>
  }
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	372c      	adds	r7, #44	; 0x2c
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	10320000 	.word	0x10320000
 80018cc:	10310000 	.word	0x10310000
 80018d0:	10220000 	.word	0x10220000
 80018d4:	10210000 	.word	0x10210000
 80018d8:	10120000 	.word	0x10120000
 80018dc:	10110000 	.word	0x10110000
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010000 	.word	0x40010000
 80018e8:	40010800 	.word	0x40010800
 80018ec:	40010c00 	.word	0x40010c00
 80018f0:	40011000 	.word	0x40011000
 80018f4:	40010400 	.word	0x40010400

080018f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	887b      	ldrh	r3, [r7, #2]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	e001      	b.n	800191a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800191a:	7bfb      	ldrb	r3, [r7, #15]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	807b      	strh	r3, [r7, #2]
 8001932:	4613      	mov	r3, r2
 8001934:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001936:	787b      	ldrb	r3, [r7, #1]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800193c:	887a      	ldrh	r2, [r7, #2]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001942:	e003      	b.n	800194c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	041a      	lsls	r2, r3, #16
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	611a      	str	r2, [r3, #16]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001956:	b480      	push	{r7}
 8001958:	b085      	sub	sp, #20
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001968:	887a      	ldrh	r2, [r7, #2]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4013      	ands	r3, r2
 800196e:	041a      	lsls	r2, r3, #16
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	43d9      	mvns	r1, r3
 8001974:	887b      	ldrh	r3, [r7, #2]
 8001976:	400b      	ands	r3, r1
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	611a      	str	r2, [r3, #16]
}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e26c      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8087 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a8:	4b92      	ldr	r3, [pc, #584]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d00c      	beq.n	80019ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b4:	4b8f      	ldr	r3, [pc, #572]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d112      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5e>
 80019c0:	4b8c      	ldr	r3, [pc, #560]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019cc:	d10b      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ce:	4b89      	ldr	r3, [pc, #548]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d06c      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x12c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d168      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e246      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x76>
 80019f0:	4b80      	ldr	r3, [pc, #512]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a7f      	ldr	r2, [pc, #508]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e02e      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x98>
 8001a06:	4b7b      	ldr	r3, [pc, #492]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a7a      	ldr	r2, [pc, #488]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b78      	ldr	r3, [pc, #480]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a77      	ldr	r2, [pc, #476]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e01d      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0xbc>
 8001a2a:	4b72      	ldr	r3, [pc, #456]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a71      	ldr	r2, [pc, #452]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6e      	ldr	r2, [pc, #440]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a44:	4b6b      	ldr	r3, [pc, #428]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a6a      	ldr	r2, [pc, #424]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a67      	ldr	r2, [pc, #412]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff fcb6 	bl	80013d4 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fcb2 	bl	80013d4 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e1fa      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b5d      	ldr	r3, [pc, #372]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0xe4>
 8001a8a:	e014      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fca2 	bl	80013d4 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fc9e 	bl	80013d4 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1e6      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x10c>
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d063      	beq.n	8001b8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ac2:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ace:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d11c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x18c>
 8001ada:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d116      	bne.n	8001b14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	4b43      	ldr	r3, [pc, #268]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <HAL_RCC_OscConfig+0x176>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e1ba      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afe:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4939      	ldr	r1, [pc, #228]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	e03a      	b.n	8001b8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d020      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff fc57 	bl	80013d4 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2a:	f7ff fc53 	bl	80013d4 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e19b      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b48:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4927      	ldr	r1, [pc, #156]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
 8001b5c:	e015      	b.n	8001b8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <HAL_RCC_OscConfig+0x270>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff fc36 	bl	80013d4 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fc32 	bl	80013d4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e17a      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d03a      	beq.n	8001c0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d019      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_RCC_OscConfig+0x274>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba4:	f7ff fc16 	bl	80013d4 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff fc12 	bl	80013d4 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e15a      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f000 fa9a 	bl	8002104 <RCC_Delay>
 8001bd0:	e01c      	b.n	8001c0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_RCC_OscConfig+0x274>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff fbfc 	bl	80013d4 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bde:	e00f      	b.n	8001c00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be0:	f7ff fbf8 	bl	80013d4 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d908      	bls.n	8001c00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e140      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	42420000 	.word	0x42420000
 8001bfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	4b9e      	ldr	r3, [pc, #632]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1e9      	bne.n	8001be0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a6 	beq.w	8001d66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1e:	4b97      	ldr	r3, [pc, #604]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10d      	bne.n	8001c46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	4b94      	ldr	r3, [pc, #592]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a93      	ldr	r2, [pc, #588]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c34:	61d3      	str	r3, [r2, #28]
 8001c36:	4b91      	ldr	r3, [pc, #580]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c42:	2301      	movs	r3, #1
 8001c44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	4b8e      	ldr	r3, [pc, #568]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d118      	bne.n	8001c84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a8a      	ldr	r2, [pc, #552]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5e:	f7ff fbb9 	bl	80013d4 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c66:	f7ff fbb5 	bl	80013d4 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b64      	cmp	r3, #100	; 0x64
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e0fd      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x312>
 8001c8c:	4b7b      	ldr	r3, [pc, #492]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a7a      	ldr	r2, [pc, #488]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	e02d      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x334>
 8001ca2:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4a75      	ldr	r2, [pc, #468]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	6213      	str	r3, [r2, #32]
 8001cae:	4b73      	ldr	r3, [pc, #460]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4a72      	ldr	r2, [pc, #456]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	6213      	str	r3, [r2, #32]
 8001cba:	e01c      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d10c      	bne.n	8001cde <HAL_RCC_OscConfig+0x356>
 8001cc4:	4b6d      	ldr	r3, [pc, #436]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4a6c      	ldr	r2, [pc, #432]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	6213      	str	r3, [r2, #32]
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a69      	ldr	r2, [pc, #420]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6213      	str	r3, [r2, #32]
 8001cdc:	e00b      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001cde:	4b67      	ldr	r3, [pc, #412]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a66      	ldr	r2, [pc, #408]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6213      	str	r3, [r2, #32]
 8001cea:	4b64      	ldr	r3, [pc, #400]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a63      	ldr	r2, [pc, #396]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	f023 0304 	bic.w	r3, r3, #4
 8001cf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d015      	beq.n	8001d2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff fb69 	bl	80013d4 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7ff fb65 	bl	80013d4 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e0ab      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1c:	4b57      	ldr	r3, [pc, #348]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0ee      	beq.n	8001d06 <HAL_RCC_OscConfig+0x37e>
 8001d28:	e014      	b.n	8001d54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2a:	f7ff fb53 	bl	80013d4 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7ff fb4f 	bl	80013d4 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e095      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ee      	bne.n	8001d32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d105      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5a:	4b48      	ldr	r3, [pc, #288]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a47      	ldr	r2, [pc, #284]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8081 	beq.w	8001e72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d70:	4b42      	ldr	r3, [pc, #264]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d061      	beq.n	8001e40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d146      	bne.n	8001e12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d84:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7ff fb23 	bl	80013d4 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d92:	f7ff fb1f 	bl	80013d4 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e067      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da4:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1f0      	bne.n	8001d92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db8:	d108      	bne.n	8001dcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dba:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	492d      	ldr	r1, [pc, #180]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a19      	ldr	r1, [r3, #32]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	4927      	ldr	r1, [pc, #156]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff faf3 	bl	80013d4 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff faef 	bl	80013d4 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e037      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x46a>
 8001e10:	e02f      	b.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fadc 	bl	80013d4 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff fad8 	bl	80013d4 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e020      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x498>
 8001e3e:	e018      	b.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e013      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40007000 	.word	0x40007000
 8001e84:	42420060 	.word	0x42420060

08001e88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0d0      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b6a      	ldr	r3, [pc, #424]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d910      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b67      	ldr	r3, [pc, #412]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 0207 	bic.w	r2, r3, #7
 8001eb2:	4965      	ldr	r1, [pc, #404]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b63      	ldr	r3, [pc, #396]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0b8      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee4:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a52      	ldr	r2, [pc, #328]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	494d      	ldr	r1, [pc, #308]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d040      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d115      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e07f      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e073      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f56:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e06b      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f023 0203 	bic.w	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4936      	ldr	r1, [pc, #216]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f78:	f7ff fa2c 	bl	80013d4 <HAL_GetTick>
 8001f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f80:	f7ff fa28 	bl	80013d4 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e053      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 020c 	and.w	r2, r3, #12
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d1eb      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b27      	ldr	r3, [pc, #156]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d210      	bcs.n	8001fd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4922      	ldr	r1, [pc, #136]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e032      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4916      	ldr	r1, [pc, #88]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	490e      	ldr	r1, [pc, #56]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002016:	f000 f821 	bl	800205c <HAL_RCC_GetSysClockFreq>
 800201a:	4602      	mov	r2, r0
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	490a      	ldr	r1, [pc, #40]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	5ccb      	ldrb	r3, [r1, r3]
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	4a09      	ldr	r2, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1cc>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1d0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff f98a 	bl	8001350 <HAL_InitTick>

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40022000 	.word	0x40022000
 800204c:	40021000 	.word	0x40021000
 8002050:	08002980 	.word	0x08002980
 8002054:	20000024 	.word	0x20000024
 8002058:	20000028 	.word	0x20000028

0800205c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002076:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b04      	cmp	r3, #4
 8002084:	d002      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x30>
 8002086:	2b08      	cmp	r3, #8
 8002088:	d003      	beq.n	8002092 <HAL_RCC_GetSysClockFreq+0x36>
 800208a:	e027      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800208e:	613b      	str	r3, [r7, #16]
      break;
 8002090:	e027      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	0c9b      	lsrs	r3, r3, #18
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800209c:	5cd3      	ldrb	r3, [r2, r3]
 800209e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d010      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	0c5b      	lsrs	r3, r3, #17
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	4a11      	ldr	r2, [pc, #68]	; (80020fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80020be:	fb02 f203 	mul.w	r2, r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	e004      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a0c      	ldr	r2, [pc, #48]	; (8002100 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020d0:	fb02 f303 	mul.w	r3, r2, r3
 80020d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	613b      	str	r3, [r7, #16]
      break;
 80020da:	e002      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80020de:	613b      	str	r3, [r7, #16]
      break;
 80020e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e2:	693b      	ldr	r3, [r7, #16]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	007a1200 	.word	0x007a1200
 80020f8:	08002990 	.word	0x08002990
 80020fc:	080029a0 	.word	0x080029a0
 8002100:	003d0900 	.word	0x003d0900

08002104 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <RCC_Delay+0x34>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0a      	ldr	r2, [pc, #40]	; (800213c <RCC_Delay+0x38>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	0a5b      	lsrs	r3, r3, #9
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002120:	bf00      	nop
  }
  while (Delay --);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1e5a      	subs	r2, r3, #1
 8002126:	60fa      	str	r2, [r7, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1f9      	bne.n	8002120 <RCC_Delay+0x1c>
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	20000024 	.word	0x20000024
 800213c:	10624dd3 	.word	0x10624dd3

08002140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e041      	b.n	80021d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff f85a 	bl	8001220 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3304      	adds	r3, #4
 800217c:	4619      	mov	r1, r3
 800217e:	4610      	mov	r0, r2
 8002180:	f000 fa6e 	bl	8002660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d001      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e035      	b.n	8002264 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a16      	ldr	r2, [pc, #88]	; (8002270 <HAL_TIM_Base_Start_IT+0x90>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d009      	beq.n	800222e <HAL_TIM_Base_Start_IT+0x4e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002222:	d004      	beq.n	800222e <HAL_TIM_Base_Start_IT+0x4e>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a12      	ldr	r2, [pc, #72]	; (8002274 <HAL_TIM_Base_Start_IT+0x94>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d111      	bne.n	8002252 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b06      	cmp	r3, #6
 800223e:	d010      	beq.n	8002262 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002250:	e007      	b.n	8002262 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0201 	orr.w	r2, r2, #1
 8002260:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40012c00 	.word	0x40012c00
 8002274:	40000400 	.word	0x40000400

08002278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d122      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b02      	cmp	r3, #2
 800229a:	d11b      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0202 	mvn.w	r2, #2
 80022a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f9b4 	bl	8002628 <HAL_TIM_IC_CaptureCallback>
 80022c0:	e005      	b.n	80022ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f9a7 	bl	8002616 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f9b6 	bl	800263a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d122      	bne.n	8002328 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d11b      	bne.n	8002328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0204 	mvn.w	r2, #4
 80022f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2202      	movs	r2, #2
 80022fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f98a 	bl	8002628 <HAL_TIM_IC_CaptureCallback>
 8002314:	e005      	b.n	8002322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f97d 	bl	8002616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f98c 	bl	800263a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b08      	cmp	r3, #8
 8002334:	d122      	bne.n	800237c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b08      	cmp	r3, #8
 8002342:	d11b      	bne.n	800237c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0208 	mvn.w	r2, #8
 800234c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2204      	movs	r2, #4
 8002352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f960 	bl	8002628 <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f953 	bl	8002616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f962 	bl	800263a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b10      	cmp	r3, #16
 8002388:	d122      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b10      	cmp	r3, #16
 8002396:	d11b      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0210 	mvn.w	r2, #16
 80023a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2208      	movs	r2, #8
 80023a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f936 	bl	8002628 <HAL_TIM_IC_CaptureCallback>
 80023bc:	e005      	b.n	80023ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f929 	bl	8002616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f938 	bl	800263a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d10e      	bne.n	80023fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d107      	bne.n	80023fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0201 	mvn.w	r2, #1
 80023f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe fe42 	bl	8001080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002406:	2b80      	cmp	r3, #128	; 0x80
 8002408:	d10e      	bne.n	8002428 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002414:	2b80      	cmp	r3, #128	; 0x80
 8002416:	d107      	bne.n	8002428 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fa6b 	bl	80028fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002432:	2b40      	cmp	r3, #64	; 0x40
 8002434:	d10e      	bne.n	8002454 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002440:	2b40      	cmp	r3, #64	; 0x40
 8002442:	d107      	bne.n	8002454 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800244c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f8fc 	bl	800264c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	2b20      	cmp	r3, #32
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b20      	cmp	r3, #32
 800246e:	d107      	bne.n	8002480 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0220 	mvn.w	r2, #32
 8002478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fa36 	bl	80028ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_TIM_ConfigClockSource+0x1c>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e0b4      	b.n	800260e <HAL_TIM_ConfigClockSource+0x186>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024dc:	d03e      	beq.n	800255c <HAL_TIM_ConfigClockSource+0xd4>
 80024de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024e2:	f200 8087 	bhi.w	80025f4 <HAL_TIM_ConfigClockSource+0x16c>
 80024e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ea:	f000 8086 	beq.w	80025fa <HAL_TIM_ConfigClockSource+0x172>
 80024ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f2:	d87f      	bhi.n	80025f4 <HAL_TIM_ConfigClockSource+0x16c>
 80024f4:	2b70      	cmp	r3, #112	; 0x70
 80024f6:	d01a      	beq.n	800252e <HAL_TIM_ConfigClockSource+0xa6>
 80024f8:	2b70      	cmp	r3, #112	; 0x70
 80024fa:	d87b      	bhi.n	80025f4 <HAL_TIM_ConfigClockSource+0x16c>
 80024fc:	2b60      	cmp	r3, #96	; 0x60
 80024fe:	d050      	beq.n	80025a2 <HAL_TIM_ConfigClockSource+0x11a>
 8002500:	2b60      	cmp	r3, #96	; 0x60
 8002502:	d877      	bhi.n	80025f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002504:	2b50      	cmp	r3, #80	; 0x50
 8002506:	d03c      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0xfa>
 8002508:	2b50      	cmp	r3, #80	; 0x50
 800250a:	d873      	bhi.n	80025f4 <HAL_TIM_ConfigClockSource+0x16c>
 800250c:	2b40      	cmp	r3, #64	; 0x40
 800250e:	d058      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0x13a>
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	d86f      	bhi.n	80025f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002514:	2b30      	cmp	r3, #48	; 0x30
 8002516:	d064      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002518:	2b30      	cmp	r3, #48	; 0x30
 800251a:	d86b      	bhi.n	80025f4 <HAL_TIM_ConfigClockSource+0x16c>
 800251c:	2b20      	cmp	r3, #32
 800251e:	d060      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002520:	2b20      	cmp	r3, #32
 8002522:	d867      	bhi.n	80025f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002524:	2b00      	cmp	r3, #0
 8002526:	d05c      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002528:	2b10      	cmp	r3, #16
 800252a:	d05a      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x15a>
 800252c:	e062      	b.n	80025f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6899      	ldr	r1, [r3, #8]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f000 f95e 	bl	80027fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	609a      	str	r2, [r3, #8]
      break;
 800255a:	e04f      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6899      	ldr	r1, [r3, #8]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f000 f947 	bl	80027fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800257e:	609a      	str	r2, [r3, #8]
      break;
 8002580:	e03c      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6859      	ldr	r1, [r3, #4]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	461a      	mov	r2, r3
 8002590:	f000 f8be 	bl	8002710 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2150      	movs	r1, #80	; 0x50
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f915 	bl	80027ca <TIM_ITRx_SetConfig>
      break;
 80025a0:	e02c      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6859      	ldr	r1, [r3, #4]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	461a      	mov	r2, r3
 80025b0:	f000 f8dc 	bl	800276c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2160      	movs	r1, #96	; 0x60
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 f905 	bl	80027ca <TIM_ITRx_SetConfig>
      break;
 80025c0:	e01c      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6859      	ldr	r1, [r3, #4]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	461a      	mov	r2, r3
 80025d0:	f000 f89e 	bl	8002710 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2140      	movs	r1, #64	; 0x40
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f8f5 	bl	80027ca <TIM_ITRx_SetConfig>
      break;
 80025e0:	e00c      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4619      	mov	r1, r3
 80025ec:	4610      	mov	r0, r2
 80025ee:	f000 f8ec 	bl	80027ca <TIM_ITRx_SetConfig>
      break;
 80025f2:	e003      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      break;
 80025f8:	e000      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800260c:	7bfb      	ldrb	r3, [r7, #15]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
	...

08002660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a25      	ldr	r2, [pc, #148]	; (8002708 <TIM_Base_SetConfig+0xa8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d007      	beq.n	8002688 <TIM_Base_SetConfig+0x28>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267e:	d003      	beq.n	8002688 <TIM_Base_SetConfig+0x28>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a22      	ldr	r2, [pc, #136]	; (800270c <TIM_Base_SetConfig+0xac>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d108      	bne.n	800269a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a1a      	ldr	r2, [pc, #104]	; (8002708 <TIM_Base_SetConfig+0xa8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d007      	beq.n	80026b2 <TIM_Base_SetConfig+0x52>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a8:	d003      	beq.n	80026b2 <TIM_Base_SetConfig+0x52>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a17      	ldr	r2, [pc, #92]	; (800270c <TIM_Base_SetConfig+0xac>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d108      	bne.n	80026c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a07      	ldr	r2, [pc, #28]	; (8002708 <TIM_Base_SetConfig+0xa8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d103      	bne.n	80026f8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	615a      	str	r2, [r3, #20]
}
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	40012c00 	.word	0x40012c00
 800270c:	40000400 	.word	0x40000400

08002710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	f023 0201 	bic.w	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800273a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f023 030a 	bic.w	r3, r3, #10
 800274c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	621a      	str	r2, [r3, #32]
}
 8002762:	bf00      	nop
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	f023 0210 	bic.w	r2, r3, #16
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	031b      	lsls	r3, r3, #12
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	621a      	str	r2, [r3, #32]
}
 80027c0:	bf00      	nop
 80027c2:	371c      	adds	r7, #28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b085      	sub	sp, #20
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f043 0307 	orr.w	r3, r3, #7
 80027ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	609a      	str	r2, [r3, #8]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027fe:	b480      	push	{r7}
 8002800:	b087      	sub	sp, #28
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002818:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	021a      	lsls	r2, r3, #8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	431a      	orrs	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	4313      	orrs	r3, r2
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4313      	orrs	r3, r2
 800282a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	609a      	str	r2, [r3, #8]
}
 8002832:	bf00      	nop
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002850:	2302      	movs	r3, #2
 8002852:	e041      	b.n	80028d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d009      	beq.n	80028ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a0:	d004      	beq.n	80028ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a10      	ldr	r2, [pc, #64]	; (80028e8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d10c      	bne.n	80028c6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40012c00 	.word	0x40012c00
 80028e8:	40000400 	.word	0x40000400

080028ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <__libc_init_array>:
 8002910:	b570      	push	{r4, r5, r6, lr}
 8002912:	2600      	movs	r6, #0
 8002914:	4d0c      	ldr	r5, [pc, #48]	; (8002948 <__libc_init_array+0x38>)
 8002916:	4c0d      	ldr	r4, [pc, #52]	; (800294c <__libc_init_array+0x3c>)
 8002918:	1b64      	subs	r4, r4, r5
 800291a:	10a4      	asrs	r4, r4, #2
 800291c:	42a6      	cmp	r6, r4
 800291e:	d109      	bne.n	8002934 <__libc_init_array+0x24>
 8002920:	f000 f822 	bl	8002968 <_init>
 8002924:	2600      	movs	r6, #0
 8002926:	4d0a      	ldr	r5, [pc, #40]	; (8002950 <__libc_init_array+0x40>)
 8002928:	4c0a      	ldr	r4, [pc, #40]	; (8002954 <__libc_init_array+0x44>)
 800292a:	1b64      	subs	r4, r4, r5
 800292c:	10a4      	asrs	r4, r4, #2
 800292e:	42a6      	cmp	r6, r4
 8002930:	d105      	bne.n	800293e <__libc_init_array+0x2e>
 8002932:	bd70      	pop	{r4, r5, r6, pc}
 8002934:	f855 3b04 	ldr.w	r3, [r5], #4
 8002938:	4798      	blx	r3
 800293a:	3601      	adds	r6, #1
 800293c:	e7ee      	b.n	800291c <__libc_init_array+0xc>
 800293e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002942:	4798      	blx	r3
 8002944:	3601      	adds	r6, #1
 8002946:	e7f2      	b.n	800292e <__libc_init_array+0x1e>
 8002948:	080029a4 	.word	0x080029a4
 800294c:	080029a4 	.word	0x080029a4
 8002950:	080029a4 	.word	0x080029a4
 8002954:	080029a8 	.word	0x080029a8

08002958 <memset>:
 8002958:	4603      	mov	r3, r0
 800295a:	4402      	add	r2, r0
 800295c:	4293      	cmp	r3, r2
 800295e:	d100      	bne.n	8002962 <memset+0xa>
 8002960:	4770      	bx	lr
 8002962:	f803 1b01 	strb.w	r1, [r3], #1
 8002966:	e7f9      	b.n	800295c <memset+0x4>

08002968 <_init>:
 8002968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296a:	bf00      	nop
 800296c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296e:	bc08      	pop	{r3}
 8002970:	469e      	mov	lr, r3
 8002972:	4770      	bx	lr

08002974 <_fini>:
 8002974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002976:	bf00      	nop
 8002978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800297a:	bc08      	pop	{r3}
 800297c:	469e      	mov	lr, r3
 800297e:	4770      	bx	lr
