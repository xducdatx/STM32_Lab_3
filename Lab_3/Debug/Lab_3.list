
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000290c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a18  08002a18  00012a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a3c  08002a3c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002a3c  08002a3c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a3c  08002a3c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a3c  08002a3c  00012a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a40  08002a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000030  08002a74  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002a74  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fa5  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001958  00000000  00000000  00028ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002a958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002b390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168fc  00000000  00000000  0002bce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad86  00000000  00000000  000425dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823ab  00000000  00000000  0004d362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf70d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028cc  00000000  00000000  000cf760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a00 	.word	0x08002a00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002a00 	.word	0x08002a00

0800014c <initialButton>:
int BT3_flag;
int TimerForKeyPress = 200;


void initialButton() // KHỞI TẠO CÁC GIÁ TRỊ BAN ĐẦU
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	// i = 0 (BT1), i = 1 (BT2), i = 3 (BT3)
	BT1_flag = 0;
 8000152:	4b16      	ldr	r3, [pc, #88]	; (80001ac <initialButton+0x60>)
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
	BT2_flag = 0;
 8000158:	4b15      	ldr	r3, [pc, #84]	; (80001b0 <initialButton+0x64>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
	BT3_flag = 0;
 800015e:	4b15      	ldr	r3, [pc, #84]	; (80001b4 <initialButton+0x68>)
 8000160:	2200      	movs	r2, #0
 8000162:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_OF_BUTTON; i++)
 8000164:	2300      	movs	r3, #0
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	e016      	b.n	8000198 <initialButton+0x4c>
	{
		KeyReg0[i] = NORMAL_STATE;
 800016a:	4a13      	ldr	r2, [pc, #76]	; (80001b8 <initialButton+0x6c>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2101      	movs	r1, #1
 8000170:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg1[i] = NORMAL_STATE;
 8000174:	4a11      	ldr	r2, [pc, #68]	; (80001bc <initialButton+0x70>)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	2101      	movs	r1, #1
 800017a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg2[i] = NORMAL_STATE;
 800017e:	4a10      	ldr	r2, [pc, #64]	; (80001c0 <initialButton+0x74>)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	2101      	movs	r1, #1
 8000184:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg3[i] = NORMAL_STATE;
 8000188:	4a0e      	ldr	r2, [pc, #56]	; (80001c4 <initialButton+0x78>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_BUTTON; i++)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	3301      	adds	r3, #1
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2b02      	cmp	r3, #2
 800019c:	dde5      	ble.n	800016a <initialButton+0x1e>
	}
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	370c      	adds	r7, #12
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	200000a4 	.word	0x200000a4
 80001b0:	200000a0 	.word	0x200000a0
 80001b4:	20000078 	.word	0x20000078
 80001b8:	20000088 	.word	0x20000088
 80001bc:	20000094 	.word	0x20000094
 80001c0:	200000a8 	.word	0x200000a8
 80001c4:	2000007c 	.word	0x2000007c

080001c8 <isButton1Pressed>:
int isButton1Pressed()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	if (BT1_flag == 1)
 80001cc:	4b06      	ldr	r3, [pc, #24]	; (80001e8 <isButton1Pressed+0x20>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d104      	bne.n	80001de <isButton1Pressed+0x16>
	{
		BT1_flag = 0;
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <isButton1Pressed+0x20>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
		return 1;
 80001da:	2301      	movs	r3, #1
 80001dc:	e000      	b.n	80001e0 <isButton1Pressed+0x18>
	}
	return 0;
 80001de:	2300      	movs	r3, #0
}
 80001e0:	4618      	mov	r0, r3
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	200000a4 	.word	0x200000a4

080001ec <isButton2Pressed>:
int isButton2Pressed()
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	if (BT2_flag == 1)
 80001f0:	4b06      	ldr	r3, [pc, #24]	; (800020c <isButton2Pressed+0x20>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d104      	bne.n	8000202 <isButton2Pressed+0x16>
	{
		BT2_flag = 0;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <isButton2Pressed+0x20>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
		return 1;
 80001fe:	2301      	movs	r3, #1
 8000200:	e000      	b.n	8000204 <isButton2Pressed+0x18>
	}
	return 0;
 8000202:	2300      	movs	r3, #0
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200000a0 	.word	0x200000a0

08000210 <isButton3Pressed>:
int isButton3Pressed()
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	if (BT3_flag == 1)
 8000214:	4b06      	ldr	r3, [pc, #24]	; (8000230 <isButton3Pressed+0x20>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b01      	cmp	r3, #1
 800021a:	d104      	bne.n	8000226 <isButton3Pressed+0x16>
	{
		BT3_flag = 0;
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <isButton3Pressed+0x20>)
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
		return 1;
 8000222:	2301      	movs	r3, #1
 8000224:	e000      	b.n	8000228 <isButton3Pressed+0x18>
	}
	return 0;
 8000226:	2300      	movs	r3, #0
}
 8000228:	4618      	mov	r0, r3
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	20000078 	.word	0x20000078

08000234 <getKeyInput>:
void getKeyInput()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTON; i++)
 800023a:	2300      	movs	r3, #0
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	e090      	b.n	8000362 <getKeyInput+0x12e>
	{
		KeyReg0[i] = KeyReg1[i];
 8000240:	4a4c      	ldr	r2, [pc, #304]	; (8000374 <getKeyInput+0x140>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	494b      	ldr	r1, [pc, #300]	; (8000378 <getKeyInput+0x144>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000250:	4a4a      	ldr	r2, [pc, #296]	; (800037c <getKeyInput+0x148>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000258:	4946      	ldr	r1, [pc, #280]	; (8000374 <getKeyInput+0x140>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (i == 0) KeyReg2[i] = HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d10a      	bne.n	800027c <getKeyInput+0x48>
 8000266:	2102      	movs	r1, #2
 8000268:	4845      	ldr	r0, [pc, #276]	; (8000380 <getKeyInput+0x14c>)
 800026a:	f001 fb91 	bl	8001990 <HAL_GPIO_ReadPin>
 800026e:	4603      	mov	r3, r0
 8000270:	4619      	mov	r1, r3
 8000272:	4a42      	ldr	r2, [pc, #264]	; (800037c <getKeyInput+0x148>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800027a:	e01a      	b.n	80002b2 <getKeyInput+0x7e>
		else if (i == 1) KeyReg2[i] = HAL_GPIO_ReadPin(BT2_GPIO_Port, BT2_Pin);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d10a      	bne.n	8000298 <getKeyInput+0x64>
 8000282:	2104      	movs	r1, #4
 8000284:	483e      	ldr	r0, [pc, #248]	; (8000380 <getKeyInput+0x14c>)
 8000286:	f001 fb83 	bl	8001990 <HAL_GPIO_ReadPin>
 800028a:	4603      	mov	r3, r0
 800028c:	4619      	mov	r1, r3
 800028e:	4a3b      	ldr	r2, [pc, #236]	; (800037c <getKeyInput+0x148>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000296:	e00c      	b.n	80002b2 <getKeyInput+0x7e>
		else if (i == 2) KeyReg2[i] = HAL_GPIO_ReadPin(BT3_GPIO_Port, BT3_Pin);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b02      	cmp	r3, #2
 800029c:	d109      	bne.n	80002b2 <getKeyInput+0x7e>
 800029e:	2108      	movs	r1, #8
 80002a0:	4837      	ldr	r0, [pc, #220]	; (8000380 <getKeyInput+0x14c>)
 80002a2:	f001 fb75 	bl	8001990 <HAL_GPIO_ReadPin>
 80002a6:	4603      	mov	r3, r0
 80002a8:	4619      	mov	r1, r3
 80002aa:	4a34      	ldr	r2, [pc, #208]	; (800037c <getKeyInput+0x148>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i]))
 80002b2:	4a31      	ldr	r2, [pc, #196]	; (8000378 <getKeyInput+0x144>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ba:	492e      	ldr	r1, [pc, #184]	; (8000374 <getKeyInput+0x140>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d14a      	bne.n	800035c <getKeyInput+0x128>
 80002c6:	4a2b      	ldr	r2, [pc, #172]	; (8000374 <getKeyInput+0x140>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ce:	492b      	ldr	r1, [pc, #172]	; (800037c <getKeyInput+0x148>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d140      	bne.n	800035c <getKeyInput+0x128>
		{
			if (KeyReg3[i] != KeyReg2[i]) // NHẤN THẢ
 80002da:	4a2a      	ldr	r2, [pc, #168]	; (8000384 <getKeyInput+0x150>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002e2:	4926      	ldr	r1, [pc, #152]	; (800037c <getKeyInput+0x148>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d025      	beq.n	800033a <getKeyInput+0x106>
			{
				KeyReg3[i] = KeyReg2[i];
 80002ee:	4a23      	ldr	r2, [pc, #140]	; (800037c <getKeyInput+0x148>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f6:	4923      	ldr	r1, [pc, #140]	; (8000384 <getKeyInput+0x150>)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE)
 80002fe:	4a1f      	ldr	r2, [pc, #124]	; (800037c <getKeyInput+0x148>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d128      	bne.n	800035c <getKeyInput+0x128>
				{
					if (i == 0) BT1_flag = 1;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d103      	bne.n	8000318 <getKeyInput+0xe4>
 8000310:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <getKeyInput+0x154>)
 8000312:	2201      	movs	r2, #1
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	e00c      	b.n	8000332 <getKeyInput+0xfe>
					else if (i == 1) BT2_flag = 1;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d103      	bne.n	8000326 <getKeyInput+0xf2>
 800031e:	4b1b      	ldr	r3, [pc, #108]	; (800038c <getKeyInput+0x158>)
 8000320:	2201      	movs	r2, #1
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	e005      	b.n	8000332 <getKeyInput+0xfe>
					else if (i == 2) BT3_flag = 1;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2b02      	cmp	r3, #2
 800032a:	d102      	bne.n	8000332 <getKeyInput+0xfe>
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <getKeyInput+0x15c>)
 800032e:	2201      	movs	r2, #1
 8000330:	601a      	str	r2, [r3, #0]
					TimerForKeyPress = 200;
 8000332:	4b18      	ldr	r3, [pc, #96]	; (8000394 <getKeyInput+0x160>)
 8000334:	22c8      	movs	r2, #200	; 0xc8
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	e010      	b.n	800035c <getKeyInput+0x128>
				}
			}
			else // NHẤN GIỮ
			{
				TimerForKeyPress--;
 800033a:	4b16      	ldr	r3, [pc, #88]	; (8000394 <getKeyInput+0x160>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	3b01      	subs	r3, #1
 8000340:	4a14      	ldr	r2, [pc, #80]	; (8000394 <getKeyInput+0x160>)
 8000342:	6013      	str	r3, [r2, #0]
				if (TimerForKeyPress == 0)
 8000344:	4b13      	ldr	r3, [pc, #76]	; (8000394 <getKeyInput+0x160>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d107      	bne.n	800035c <getKeyInput+0x128>
				{
					KeyReg3[i] = NORMAL_STATE;
 800034c:	4a0d      	ldr	r2, [pc, #52]	; (8000384 <getKeyInput+0x150>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2101      	movs	r1, #1
 8000352:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress = 200;
 8000356:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <getKeyInput+0x160>)
 8000358:	22c8      	movs	r2, #200	; 0xc8
 800035a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_OF_BUTTON; i++)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	3301      	adds	r3, #1
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2b02      	cmp	r3, #2
 8000366:	f77f af6b 	ble.w	8000240 <getKeyInput+0xc>
				}
			}
		}
	}
}
 800036a:	bf00      	nop
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000094 	.word	0x20000094
 8000378:	20000088 	.word	0x20000088
 800037c:	200000a8 	.word	0x200000a8
 8000380:	40010800 	.word	0x40010800
 8000384:	2000007c 	.word	0x2000007c
 8000388:	200000a4 	.word	0x200000a4
 800038c:	200000a0 	.word	0x200000a0
 8000390:	20000078 	.word	0x20000078
 8000394:	20000000 	.word	0x20000000

08000398 <fsm_processing>:
int timeAmber = 2;
int timeRedTemp;
int timeGreenTemp;
int timeAmberTemp;
void fsm_processing()
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	// TĂNG MODE KHI BUTTON 1 ĐƯỢC NHẤN
	switch(Mode)
 800039c:	4b9b      	ldr	r3, [pc, #620]	; (800060c <fsm_processing+0x274>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b04      	cmp	r3, #4
 80003a2:	f200 82d5 	bhi.w	8000950 <fsm_processing+0x5b8>
 80003a6:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <fsm_processing+0x14>)
 80003a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ac:	080003c1 	.word	0x080003c1
 80003b0:	0800041b 	.word	0x0800041b
 80003b4:	080005d9 	.word	0x080005d9
 80003b8:	080006f1 	.word	0x080006f1
 80003bc:	080007c7 	.word	0x080007c7
	{
	case Initial:
		// ĐỌC NÚT NHẤN VÀ XỬ LÍ KHI NHẬN ĐƯỢC TÍN HIỆU
		if (timer3_flag == 1)
 80003c0:	4b93      	ldr	r3, [pc, #588]	; (8000610 <fsm_processing+0x278>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d104      	bne.n	80003d2 <fsm_processing+0x3a>
		{
			getKeyInput();
 80003c8:	f7ff ff34 	bl	8000234 <getKeyInput>
			setTimer3(10);
 80003cc:	200a      	movs	r0, #10
 80003ce:	f000 fed7 	bl	8001180 <setTimer3>
		}
		if (isButton1Pressed() == 1)
 80003d2:	f7ff fef9 	bl	80001c8 <isButton1Pressed>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d106      	bne.n	80003ea <fsm_processing+0x52>
		{
			Mode = MODE1;
 80003dc:	4b8b      	ldr	r3, [pc, #556]	; (800060c <fsm_processing+0x274>)
 80003de:	2201      	movs	r2, #1
 80003e0:	701a      	strb	r2, [r3, #0]
			Index = 0;
 80003e2:	4b8c      	ldr	r3, [pc, #560]	; (8000614 <fsm_processing+0x27c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
			break;
 80003e8:	e2bd      	b.n	8000966 <fsm_processing+0x5ce>
		}
		// HIỂN THỊ LED 7 ĐOẠN
		if (timer1_flag == 1)
 80003ea:	4b8b      	ldr	r3, [pc, #556]	; (8000618 <fsm_processing+0x280>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	f040 82b0 	bne.w	8000954 <fsm_processing+0x5bc>
		{
			if (Index > 3) Index = 0;
 80003f4:	4b87      	ldr	r3, [pc, #540]	; (8000614 <fsm_processing+0x27c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b03      	cmp	r3, #3
 80003fa:	dd02      	ble.n	8000402 <fsm_processing+0x6a>
 80003fc:	4b85      	ldr	r3, [pc, #532]	; (8000614 <fsm_processing+0x27c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 8000402:	4b84      	ldr	r3, [pc, #528]	; (8000614 <fsm_processing+0x27c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	1c5a      	adds	r2, r3, #1
 8000408:	4982      	ldr	r1, [pc, #520]	; (8000614 <fsm_processing+0x27c>)
 800040a:	600a      	str	r2, [r1, #0]
 800040c:	4618      	mov	r0, r3
 800040e:	f000 fc67 	bl	8000ce0 <update7SEG>
			setTimer1(250);
 8000412:	20fa      	movs	r0, #250	; 0xfa
 8000414:	f000 fe7c 	bl	8001110 <setTimer1>
		}
		break;
 8000418:	e29c      	b.n	8000954 <fsm_processing+0x5bc>
	case MODE1:
		// ĐỌC NÚT NHẤN VÀ XỬ LÍ KHI NHẬN ĐƯỢC TÍN HIỆU
		if (timer3_flag == 1)
 800041a:	4b7d      	ldr	r3, [pc, #500]	; (8000610 <fsm_processing+0x278>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2b01      	cmp	r3, #1
 8000420:	d104      	bne.n	800042c <fsm_processing+0x94>
		{
			getKeyInput();
 8000422:	f7ff ff07 	bl	8000234 <getKeyInput>
			setTimer3(10);
 8000426:	200a      	movs	r0, #10
 8000428:	f000 feaa 	bl	8001180 <setTimer3>
		}
		if (isButton1Pressed() == 1)
 800042c:	f7ff fecc 	bl	80001c8 <isButton1Pressed>
 8000430:	4603      	mov	r3, r0
 8000432:	2b01      	cmp	r3, #1
 8000434:	d111      	bne.n	800045a <fsm_processing+0xc2>
		{
			Mode = MODE2;
 8000436:	4b75      	ldr	r3, [pc, #468]	; (800060c <fsm_processing+0x274>)
 8000438:	2202      	movs	r2, #2
 800043a:	701a      	strb	r2, [r3, #0]
			timeRedTemp = timeRed;
 800043c:	4b77      	ldr	r3, [pc, #476]	; (800061c <fsm_processing+0x284>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a77      	ldr	r2, [pc, #476]	; (8000620 <fsm_processing+0x288>)
 8000442:	6013      	str	r3, [r2, #0]
			led_off(Red1);
 8000444:	2040      	movs	r0, #64	; 0x40
 8000446:	f000 fd07 	bl	8000e58 <led_off>
			led_off(Red2);
 800044a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800044e:	f000 fd03 	bl	8000e58 <led_off>
			Index = 0;
 8000452:	4b70      	ldr	r3, [pc, #448]	; (8000614 <fsm_processing+0x27c>)
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
			break;
 8000458:	e285      	b.n	8000966 <fsm_processing+0x5ce>
		}
		if (timer2_flag == 1)// HIỂN THỊ LED ĐƠN + CẬP NHẬT GIÁ TRỊ CHO LED 7 ĐOẠN
 800045a:	4b72      	ldr	r3, [pc, #456]	; (8000624 <fsm_processing+0x28c>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b01      	cmp	r3, #1
 8000460:	f040 80a2 	bne.w	80005a8 <fsm_processing+0x210>
		{
			//LED TRÊN DƯỚI
			if (count1 == 0)
 8000464:	4b70      	ldr	r3, [pc, #448]	; (8000628 <fsm_processing+0x290>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d13d      	bne.n	80004e8 <fsm_processing+0x150>
			{
				if (status1 == 0) // RED
 800046c:	4b6f      	ldr	r3, [pc, #444]	; (800062c <fsm_processing+0x294>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d110      	bne.n	8000496 <fsm_processing+0xfe>
				{
					led_on(Red1);
 8000474:	2040      	movs	r0, #64	; 0x40
 8000476:	f000 fcdd 	bl	8000e34 <led_on>
					led_off(Green1);
 800047a:	2010      	movs	r0, #16
 800047c:	f000 fcec 	bl	8000e58 <led_off>
					led_off(Amber1);
 8000480:	2020      	movs	r0, #32
 8000482:	f000 fce9 	bl	8000e58 <led_off>
					status1 = 2;
 8000486:	4b69      	ldr	r3, [pc, #420]	; (800062c <fsm_processing+0x294>)
 8000488:	2202      	movs	r2, #2
 800048a:	601a      	str	r2, [r3, #0]
					count1 = timeRed;
 800048c:	4b63      	ldr	r3, [pc, #396]	; (800061c <fsm_processing+0x284>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a65      	ldr	r2, [pc, #404]	; (8000628 <fsm_processing+0x290>)
 8000492:	6013      	str	r3, [r2, #0]
 8000494:	e028      	b.n	80004e8 <fsm_processing+0x150>
				}
				else if (status1 == 1) // AMBER
 8000496:	4b65      	ldr	r3, [pc, #404]	; (800062c <fsm_processing+0x294>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d110      	bne.n	80004c0 <fsm_processing+0x128>
				{
					led_off(Red1);
 800049e:	2040      	movs	r0, #64	; 0x40
 80004a0:	f000 fcda 	bl	8000e58 <led_off>
					led_on(Amber1);
 80004a4:	2020      	movs	r0, #32
 80004a6:	f000 fcc5 	bl	8000e34 <led_on>
					led_off(Green1);
 80004aa:	2010      	movs	r0, #16
 80004ac:	f000 fcd4 	bl	8000e58 <led_off>
					status1 = 0;
 80004b0:	4b5e      	ldr	r3, [pc, #376]	; (800062c <fsm_processing+0x294>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
					count1 = timeAmber;
 80004b6:	4b5e      	ldr	r3, [pc, #376]	; (8000630 <fsm_processing+0x298>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a5b      	ldr	r2, [pc, #364]	; (8000628 <fsm_processing+0x290>)
 80004bc:	6013      	str	r3, [r2, #0]
 80004be:	e013      	b.n	80004e8 <fsm_processing+0x150>
				}
				else if (status1 == 2) // GREEN
 80004c0:	4b5a      	ldr	r3, [pc, #360]	; (800062c <fsm_processing+0x294>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b02      	cmp	r3, #2
 80004c6:	d10f      	bne.n	80004e8 <fsm_processing+0x150>
				{
					led_off(Red1);
 80004c8:	2040      	movs	r0, #64	; 0x40
 80004ca:	f000 fcc5 	bl	8000e58 <led_off>
					led_off(Amber1);
 80004ce:	2020      	movs	r0, #32
 80004d0:	f000 fcc2 	bl	8000e58 <led_off>
					led_on(Green1);
 80004d4:	2010      	movs	r0, #16
 80004d6:	f000 fcad 	bl	8000e34 <led_on>
					status1 = 1;
 80004da:	4b54      	ldr	r3, [pc, #336]	; (800062c <fsm_processing+0x294>)
 80004dc:	2201      	movs	r2, #1
 80004de:	601a      	str	r2, [r3, #0]
					count1 = timeGreen;
 80004e0:	4b54      	ldr	r3, [pc, #336]	; (8000634 <fsm_processing+0x29c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a50      	ldr	r2, [pc, #320]	; (8000628 <fsm_processing+0x290>)
 80004e6:	6013      	str	r3, [r2, #0]
				}
			}

			//LED TRÁI PHẢI

			if (count2 == 0)
 80004e8:	4b53      	ldr	r3, [pc, #332]	; (8000638 <fsm_processing+0x2a0>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d143      	bne.n	8000578 <fsm_processing+0x1e0>
			{
				if (status2 == 0) // RED
 80004f0:	4b52      	ldr	r3, [pc, #328]	; (800063c <fsm_processing+0x2a4>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d112      	bne.n	800051e <fsm_processing+0x186>
				{
					led_on(Red2);
 80004f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004fc:	f000 fc9a 	bl	8000e34 <led_on>
					led_off(Green2);
 8000500:	2080      	movs	r0, #128	; 0x80
 8000502:	f000 fca9 	bl	8000e58 <led_off>
					led_off(Amber2);
 8000506:	f44f 7080 	mov.w	r0, #256	; 0x100
 800050a:	f000 fca5 	bl	8000e58 <led_off>
					status2 = 2;
 800050e:	4b4b      	ldr	r3, [pc, #300]	; (800063c <fsm_processing+0x2a4>)
 8000510:	2202      	movs	r2, #2
 8000512:	601a      	str	r2, [r3, #0]
					count2 = timeRed;
 8000514:	4b41      	ldr	r3, [pc, #260]	; (800061c <fsm_processing+0x284>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a47      	ldr	r2, [pc, #284]	; (8000638 <fsm_processing+0x2a0>)
 800051a:	6013      	str	r3, [r2, #0]
 800051c:	e02c      	b.n	8000578 <fsm_processing+0x1e0>
				}
				else if (status2 == 1) // AMBER
 800051e:	4b47      	ldr	r3, [pc, #284]	; (800063c <fsm_processing+0x2a4>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d112      	bne.n	800054c <fsm_processing+0x1b4>
				{
					led_off(Red2);
 8000526:	f44f 7000 	mov.w	r0, #512	; 0x200
 800052a:	f000 fc95 	bl	8000e58 <led_off>
					led_on(Amber2);
 800052e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000532:	f000 fc7f 	bl	8000e34 <led_on>
					led_off(Green2);
 8000536:	2080      	movs	r0, #128	; 0x80
 8000538:	f000 fc8e 	bl	8000e58 <led_off>
					status2 = 0;
 800053c:	4b3f      	ldr	r3, [pc, #252]	; (800063c <fsm_processing+0x2a4>)
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
					count2 = timeAmber;
 8000542:	4b3b      	ldr	r3, [pc, #236]	; (8000630 <fsm_processing+0x298>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a3c      	ldr	r2, [pc, #240]	; (8000638 <fsm_processing+0x2a0>)
 8000548:	6013      	str	r3, [r2, #0]
 800054a:	e015      	b.n	8000578 <fsm_processing+0x1e0>
				}
				else if (status2 == 2) // GREEN
 800054c:	4b3b      	ldr	r3, [pc, #236]	; (800063c <fsm_processing+0x2a4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b02      	cmp	r3, #2
 8000552:	d111      	bne.n	8000578 <fsm_processing+0x1e0>
				{
					led_off(Red2);
 8000554:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000558:	f000 fc7e 	bl	8000e58 <led_off>
					led_off(Amber2);
 800055c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000560:	f000 fc7a 	bl	8000e58 <led_off>
					led_on(Green2);
 8000564:	2080      	movs	r0, #128	; 0x80
 8000566:	f000 fc65 	bl	8000e34 <led_on>
					status2 = 1;
 800056a:	4b34      	ldr	r3, [pc, #208]	; (800063c <fsm_processing+0x2a4>)
 800056c:	2201      	movs	r2, #1
 800056e:	601a      	str	r2, [r3, #0]
					count2 = timeGreen;
 8000570:	4b30      	ldr	r3, [pc, #192]	; (8000634 <fsm_processing+0x29c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a30      	ldr	r2, [pc, #192]	; (8000638 <fsm_processing+0x2a0>)
 8000576:	6013      	str	r3, [r2, #0]
				}
			}
			count1--;
 8000578:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <fsm_processing+0x290>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3b01      	subs	r3, #1
 800057e:	4a2a      	ldr	r2, [pc, #168]	; (8000628 <fsm_processing+0x290>)
 8000580:	6013      	str	r3, [r2, #0]
			count2--;
 8000582:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <fsm_processing+0x2a0>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3b01      	subs	r3, #1
 8000588:	4a2b      	ldr	r2, [pc, #172]	; (8000638 <fsm_processing+0x2a0>)
 800058a:	6013      	str	r3, [r2, #0]
			valueSEG12 = count1;
 800058c:	4b26      	ldr	r3, [pc, #152]	; (8000628 <fsm_processing+0x290>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a2b      	ldr	r2, [pc, #172]	; (8000640 <fsm_processing+0x2a8>)
 8000592:	6013      	str	r3, [r2, #0]
			valueSEG34 = count2;
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <fsm_processing+0x2a0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a2a      	ldr	r2, [pc, #168]	; (8000644 <fsm_processing+0x2ac>)
 800059a:	6013      	str	r3, [r2, #0]
			updateClockBuffer();
 800059c:	f000 fbf2 	bl	8000d84 <updateClockBuffer>
			setTimer2(1000);
 80005a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a4:	f000 fdd0 	bl	8001148 <setTimer2>
		}
		if (timer1_flag == 1) // HIỂN THỊ LED 7 ĐOẠN
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <fsm_processing+0x280>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	f040 81d3 	bne.w	8000958 <fsm_processing+0x5c0>
		{
			if (Index > 3) Index = 0;
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <fsm_processing+0x27c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	dd02      	ble.n	80005c0 <fsm_processing+0x228>
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <fsm_processing+0x27c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <fsm_processing+0x27c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	1c5a      	adds	r2, r3, #1
 80005c6:	4913      	ldr	r1, [pc, #76]	; (8000614 <fsm_processing+0x27c>)
 80005c8:	600a      	str	r2, [r1, #0]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fb88 	bl	8000ce0 <update7SEG>
			setTimer1(250);
 80005d0:	20fa      	movs	r0, #250	; 0xfa
 80005d2:	f000 fd9d 	bl	8001110 <setTimer1>
		}
		break;
 80005d6:	e1bf      	b.n	8000958 <fsm_processing+0x5c0>
	case MODE2:
		// ĐỌC NÚT NHẤN VÀ XỬ LÍ KHI NHẬN ĐƯỢC TÍN HIỆU
		if (timer3_flag == 1)
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <fsm_processing+0x278>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d104      	bne.n	80005ea <fsm_processing+0x252>
		{
			getKeyInput();
 80005e0:	f7ff fe28 	bl	8000234 <getKeyInput>
			setTimer3(10);
 80005e4:	200a      	movs	r0, #10
 80005e6:	f000 fdcb 	bl	8001180 <setTimer3>
		}
		if (isButton1Pressed() == 1)
 80005ea:	f7ff fded 	bl	80001c8 <isButton1Pressed>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d12b      	bne.n	800064c <fsm_processing+0x2b4>
		{
			Mode = MODE3;
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <fsm_processing+0x274>)
 80005f6:	2203      	movs	r2, #3
 80005f8:	701a      	strb	r2, [r3, #0]
			timeAmberTemp = timeAmber;
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <fsm_processing+0x298>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a12      	ldr	r2, [pc, #72]	; (8000648 <fsm_processing+0x2b0>)
 8000600:	6013      	str	r3, [r2, #0]
			Index = 0;
 8000602:	4b04      	ldr	r3, [pc, #16]	; (8000614 <fsm_processing+0x27c>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
			break;
 8000608:	e1ad      	b.n	8000966 <fsm_processing+0x5ce>
 800060a:	bf00      	nop
 800060c:	2000004c 	.word	0x2000004c
 8000610:	20000074 	.word	0x20000074
 8000614:	2000005c 	.word	0x2000005c
 8000618:	20000064 	.word	0x20000064
 800061c:	20000008 	.word	0x20000008
 8000620:	200000bc 	.word	0x200000bc
 8000624:	2000006c 	.word	0x2000006c
 8000628:	20000054 	.word	0x20000054
 800062c:	20000050 	.word	0x20000050
 8000630:	20000010 	.word	0x20000010
 8000634:	2000000c 	.word	0x2000000c
 8000638:	20000058 	.word	0x20000058
 800063c:	20000004 	.word	0x20000004
 8000640:	200000c4 	.word	0x200000c4
 8000644:	200000c0 	.word	0x200000c0
 8000648:	200000b8 	.word	0x200000b8
		}
		if (isButton2Pressed() == 1)
 800064c:	f7ff fdce 	bl	80001ec <isButton2Pressed>
 8000650:	4603      	mov	r3, r0
 8000652:	2b01      	cmp	r3, #1
 8000654:	d113      	bne.n	800067e <fsm_processing+0x2e6>
		{
			if(timeRedTemp >= 1 && timeRedTemp <= 99)
 8000656:	4b85      	ldr	r3, [pc, #532]	; (800086c <fsm_processing+0x4d4>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	dd08      	ble.n	8000670 <fsm_processing+0x2d8>
 800065e:	4b83      	ldr	r3, [pc, #524]	; (800086c <fsm_processing+0x4d4>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b63      	cmp	r3, #99	; 0x63
 8000664:	dc04      	bgt.n	8000670 <fsm_processing+0x2d8>
			timeRedTemp++;
 8000666:	4b81      	ldr	r3, [pc, #516]	; (800086c <fsm_processing+0x4d4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	4a7f      	ldr	r2, [pc, #508]	; (800086c <fsm_processing+0x4d4>)
 800066e:	6013      	str	r3, [r2, #0]
			if (timeRedTemp >= 100) timeRedTemp = 1;
 8000670:	4b7e      	ldr	r3, [pc, #504]	; (800086c <fsm_processing+0x4d4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b63      	cmp	r3, #99	; 0x63
 8000676:	dd02      	ble.n	800067e <fsm_processing+0x2e6>
 8000678:	4b7c      	ldr	r3, [pc, #496]	; (800086c <fsm_processing+0x4d4>)
 800067a:	2201      	movs	r2, #1
 800067c:	601a      	str	r2, [r3, #0]
		}
		if (isButton3Pressed() == 1)
 800067e:	f7ff fdc7 	bl	8000210 <isButton3Pressed>
 8000682:	4603      	mov	r3, r0
 8000684:	2b01      	cmp	r3, #1
 8000686:	d103      	bne.n	8000690 <fsm_processing+0x2f8>
		{
			timeRed = timeRedTemp;
 8000688:	4b78      	ldr	r3, [pc, #480]	; (800086c <fsm_processing+0x4d4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a78      	ldr	r2, [pc, #480]	; (8000870 <fsm_processing+0x4d8>)
 800068e:	6013      	str	r3, [r2, #0]
		}
		led_off(Green1);
 8000690:	2010      	movs	r0, #16
 8000692:	f000 fbe1 	bl	8000e58 <led_off>
		led_off(Green2);
 8000696:	2080      	movs	r0, #128	; 0x80
 8000698:	f000 fbde 	bl	8000e58 <led_off>
		led_off(Amber1);
 800069c:	2020      	movs	r0, #32
 800069e:	f000 fbdb 	bl	8000e58 <led_off>
		led_off(Amber2);
 80006a2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006a6:	f000 fbd7 	bl	8000e58 <led_off>
		valueSEG12 = 2;
 80006aa:	4b72      	ldr	r3, [pc, #456]	; (8000874 <fsm_processing+0x4dc>)
 80006ac:	2202      	movs	r2, #2
 80006ae:	601a      	str	r2, [r3, #0]
		valueSEG34 = timeRedTemp;
 80006b0:	4b6e      	ldr	r3, [pc, #440]	; (800086c <fsm_processing+0x4d4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a70      	ldr	r2, [pc, #448]	; (8000878 <fsm_processing+0x4e0>)
 80006b6:	6013      	str	r3, [r2, #0]
		updateClockBuffer();
 80006b8:	f000 fb64 	bl	8000d84 <updateClockBuffer>
		if (timer1_flag == 1) // HIỂN THỊ LED 7 ĐOẠN
 80006bc:	4b6f      	ldr	r3, [pc, #444]	; (800087c <fsm_processing+0x4e4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	f040 814b 	bne.w	800095c <fsm_processing+0x5c4>
		{
			if (Index > 3) Index = 0;
 80006c6:	4b6e      	ldr	r3, [pc, #440]	; (8000880 <fsm_processing+0x4e8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	dd02      	ble.n	80006d4 <fsm_processing+0x33c>
 80006ce:	4b6c      	ldr	r3, [pc, #432]	; (8000880 <fsm_processing+0x4e8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 80006d4:	4b6a      	ldr	r3, [pc, #424]	; (8000880 <fsm_processing+0x4e8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	1c5a      	adds	r2, r3, #1
 80006da:	4969      	ldr	r1, [pc, #420]	; (8000880 <fsm_processing+0x4e8>)
 80006dc:	600a      	str	r2, [r1, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fafe 	bl	8000ce0 <update7SEG>
			setTimer1(250);
 80006e4:	20fa      	movs	r0, #250	; 0xfa
 80006e6:	f000 fd13 	bl	8001110 <setTimer1>
			blinkingLedRed();
 80006ea:	f000 fbc7 	bl	8000e7c <blinkingLedRed>
		}
		break;
 80006ee:	e135      	b.n	800095c <fsm_processing+0x5c4>
	case MODE3:
		// ĐỌC NÚT NHẤN VÀ XỬ LÍ KHI NHẬN ĐƯỢC TÍN HIỆU
		if (timer3_flag == 1)
 80006f0:	4b64      	ldr	r3, [pc, #400]	; (8000884 <fsm_processing+0x4ec>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d104      	bne.n	8000702 <fsm_processing+0x36a>
		{
			getKeyInput();
 80006f8:	f7ff fd9c 	bl	8000234 <getKeyInput>
			setTimer3(10);
 80006fc:	200a      	movs	r0, #10
 80006fe:	f000 fd3f 	bl	8001180 <setTimer3>
		}
		if (isButton1Pressed() == 1)
 8000702:	f7ff fd61 	bl	80001c8 <isButton1Pressed>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d10a      	bne.n	8000722 <fsm_processing+0x38a>
		{
			Mode = MODE4;
 800070c:	4b5e      	ldr	r3, [pc, #376]	; (8000888 <fsm_processing+0x4f0>)
 800070e:	2204      	movs	r2, #4
 8000710:	701a      	strb	r2, [r3, #0]
			timeGreenTemp = timeGreen;
 8000712:	4b5e      	ldr	r3, [pc, #376]	; (800088c <fsm_processing+0x4f4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a5e      	ldr	r2, [pc, #376]	; (8000890 <fsm_processing+0x4f8>)
 8000718:	6013      	str	r3, [r2, #0]
			Index = 0;
 800071a:	4b59      	ldr	r3, [pc, #356]	; (8000880 <fsm_processing+0x4e8>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
			break;
 8000720:	e121      	b.n	8000966 <fsm_processing+0x5ce>
		}
		if (isButton2Pressed() == 1)
 8000722:	f7ff fd63 	bl	80001ec <isButton2Pressed>
 8000726:	4603      	mov	r3, r0
 8000728:	2b01      	cmp	r3, #1
 800072a:	d113      	bne.n	8000754 <fsm_processing+0x3bc>
		{
			if(timeAmberTemp >= 1 && timeAmberTemp <= 99)
 800072c:	4b59      	ldr	r3, [pc, #356]	; (8000894 <fsm_processing+0x4fc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	dd08      	ble.n	8000746 <fsm_processing+0x3ae>
 8000734:	4b57      	ldr	r3, [pc, #348]	; (8000894 <fsm_processing+0x4fc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b63      	cmp	r3, #99	; 0x63
 800073a:	dc04      	bgt.n	8000746 <fsm_processing+0x3ae>
			timeAmberTemp++;
 800073c:	4b55      	ldr	r3, [pc, #340]	; (8000894 <fsm_processing+0x4fc>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	3301      	adds	r3, #1
 8000742:	4a54      	ldr	r2, [pc, #336]	; (8000894 <fsm_processing+0x4fc>)
 8000744:	6013      	str	r3, [r2, #0]
			if (timeAmberTemp >= 100) timeAmberTemp = 1;
 8000746:	4b53      	ldr	r3, [pc, #332]	; (8000894 <fsm_processing+0x4fc>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b63      	cmp	r3, #99	; 0x63
 800074c:	dd02      	ble.n	8000754 <fsm_processing+0x3bc>
 800074e:	4b51      	ldr	r3, [pc, #324]	; (8000894 <fsm_processing+0x4fc>)
 8000750:	2201      	movs	r2, #1
 8000752:	601a      	str	r2, [r3, #0]
		}
		if (isButton3Pressed() == 1)
 8000754:	f7ff fd5c 	bl	8000210 <isButton3Pressed>
 8000758:	4603      	mov	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	d103      	bne.n	8000766 <fsm_processing+0x3ce>
		{
			timeAmber = timeAmberTemp;
 800075e:	4b4d      	ldr	r3, [pc, #308]	; (8000894 <fsm_processing+0x4fc>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a4d      	ldr	r2, [pc, #308]	; (8000898 <fsm_processing+0x500>)
 8000764:	6013      	str	r3, [r2, #0]
		}
		led_off(Red1);
 8000766:	2040      	movs	r0, #64	; 0x40
 8000768:	f000 fb76 	bl	8000e58 <led_off>
		led_off(Red2);
 800076c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000770:	f000 fb72 	bl	8000e58 <led_off>
		led_off(Green1);
 8000774:	2010      	movs	r0, #16
 8000776:	f000 fb6f 	bl	8000e58 <led_off>
		led_off(Green2);
 800077a:	2080      	movs	r0, #128	; 0x80
 800077c:	f000 fb6c 	bl	8000e58 <led_off>
		valueSEG12 = 3;
 8000780:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <fsm_processing+0x4dc>)
 8000782:	2203      	movs	r2, #3
 8000784:	601a      	str	r2, [r3, #0]
		valueSEG34 = timeAmberTemp;
 8000786:	4b43      	ldr	r3, [pc, #268]	; (8000894 <fsm_processing+0x4fc>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a3b      	ldr	r2, [pc, #236]	; (8000878 <fsm_processing+0x4e0>)
 800078c:	6013      	str	r3, [r2, #0]
		updateClockBuffer();
 800078e:	f000 faf9 	bl	8000d84 <updateClockBuffer>
		if (timer1_flag == 1) // HIỂN THỊ LED 7 ĐOẠN
 8000792:	4b3a      	ldr	r3, [pc, #232]	; (800087c <fsm_processing+0x4e4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b01      	cmp	r3, #1
 8000798:	f040 80e2 	bne.w	8000960 <fsm_processing+0x5c8>
		{
			if (Index > 3) Index = 0;
 800079c:	4b38      	ldr	r3, [pc, #224]	; (8000880 <fsm_processing+0x4e8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	dd02      	ble.n	80007aa <fsm_processing+0x412>
 80007a4:	4b36      	ldr	r3, [pc, #216]	; (8000880 <fsm_processing+0x4e8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 80007aa:	4b35      	ldr	r3, [pc, #212]	; (8000880 <fsm_processing+0x4e8>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	4933      	ldr	r1, [pc, #204]	; (8000880 <fsm_processing+0x4e8>)
 80007b2:	600a      	str	r2, [r1, #0]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fa93 	bl	8000ce0 <update7SEG>
			setTimer1(250);
 80007ba:	20fa      	movs	r0, #250	; 0xfa
 80007bc:	f000 fca8 	bl	8001110 <setTimer1>
			blinkingLedAmber();
 80007c0:	f000 fb7a 	bl	8000eb8 <blinkingLedAmber>
		}
		break;
 80007c4:	e0cc      	b.n	8000960 <fsm_processing+0x5c8>
	case MODE4:
		// ĐỌC NÚT NHẤN VÀ XỬ LÍ KHI NHẬN ĐƯỢC TÍN HIỆU
		if (timer3_flag == 1)
 80007c6:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <fsm_processing+0x4ec>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d104      	bne.n	80007d8 <fsm_processing+0x440>
		{
			getKeyInput();
 80007ce:	f7ff fd31 	bl	8000234 <getKeyInput>
			setTimer3(10);
 80007d2:	200a      	movs	r0, #10
 80007d4:	f000 fcd4 	bl	8001180 <setTimer3>
		}
		if (isButton1Pressed() == 1)
 80007d8:	f7ff fcf6 	bl	80001c8 <isButton1Pressed>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d164      	bne.n	80008ac <fsm_processing+0x514>
		{
			if (timeRed == timeGreen + timeAmber)
 80007e2:	4b2a      	ldr	r3, [pc, #168]	; (800088c <fsm_processing+0x4f4>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <fsm_processing+0x500>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	441a      	add	r2, r3
 80007ec:	4b20      	ldr	r3, [pc, #128]	; (8000870 <fsm_processing+0x4d8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d103      	bne.n	80007fc <fsm_processing+0x464>
			{
				Mode = MODE1;
 80007f4:	4b24      	ldr	r3, [pc, #144]	; (8000888 <fsm_processing+0x4f0>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
 80007fa:	e013      	b.n	8000824 <fsm_processing+0x48c>
			}
			else
			{
				Mode = Initial;
 80007fc:	4b22      	ldr	r3, [pc, #136]	; (8000888 <fsm_processing+0x4f0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
				timeRed = 5;
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <fsm_processing+0x4d8>)
 8000804:	2205      	movs	r2, #5
 8000806:	601a      	str	r2, [r3, #0]
				timeGreen = 3;
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <fsm_processing+0x4f4>)
 800080a:	2203      	movs	r2, #3
 800080c:	601a      	str	r2, [r3, #0]
				timeAmber = 2;
 800080e:	4b22      	ldr	r3, [pc, #136]	; (8000898 <fsm_processing+0x500>)
 8000810:	2202      	movs	r2, #2
 8000812:	601a      	str	r2, [r3, #0]
				valueSEG12 = 88;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <fsm_processing+0x4dc>)
 8000816:	2258      	movs	r2, #88	; 0x58
 8000818:	601a      	str	r2, [r3, #0]
				valueSEG34 = 88;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <fsm_processing+0x4e0>)
 800081c:	2258      	movs	r2, #88	; 0x58
 800081e:	601a      	str	r2, [r3, #0]
				updateClockBuffer();
 8000820:	f000 fab0 	bl	8000d84 <updateClockBuffer>
			}
			count1 = 0;
 8000824:	4b1d      	ldr	r3, [pc, #116]	; (800089c <fsm_processing+0x504>)
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
			count2 = 0;
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <fsm_processing+0x508>)
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
			status1 = 0;
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <fsm_processing+0x50c>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
			status2 = 2;
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <fsm_processing+0x510>)
 8000838:	2202      	movs	r2, #2
 800083a:	601a      	str	r2, [r3, #0]
			led_off(Red1);
 800083c:	2040      	movs	r0, #64	; 0x40
 800083e:	f000 fb0b 	bl	8000e58 <led_off>
			led_off(Red2);
 8000842:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000846:	f000 fb07 	bl	8000e58 <led_off>
			led_off(Green1);
 800084a:	2010      	movs	r0, #16
 800084c:	f000 fb04 	bl	8000e58 <led_off>
			led_off(Green2);
 8000850:	2080      	movs	r0, #128	; 0x80
 8000852:	f000 fb01 	bl	8000e58 <led_off>
			led_off(Amber1);
 8000856:	2020      	movs	r0, #32
 8000858:	f000 fafe 	bl	8000e58 <led_off>
			led_off(Amber2);
 800085c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000860:	f000 fafa 	bl	8000e58 <led_off>
			Index = 0;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <fsm_processing+0x4e8>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
			break;
 800086a:	e07c      	b.n	8000966 <fsm_processing+0x5ce>
 800086c:	200000bc 	.word	0x200000bc
 8000870:	20000008 	.word	0x20000008
 8000874:	200000c4 	.word	0x200000c4
 8000878:	200000c0 	.word	0x200000c0
 800087c:	20000064 	.word	0x20000064
 8000880:	2000005c 	.word	0x2000005c
 8000884:	20000074 	.word	0x20000074
 8000888:	2000004c 	.word	0x2000004c
 800088c:	2000000c 	.word	0x2000000c
 8000890:	200000b4 	.word	0x200000b4
 8000894:	200000b8 	.word	0x200000b8
 8000898:	20000010 	.word	0x20000010
 800089c:	20000054 	.word	0x20000054
 80008a0:	20000058 	.word	0x20000058
 80008a4:	20000050 	.word	0x20000050
 80008a8:	20000004 	.word	0x20000004
		}
		if (isButton2Pressed() == 1)
 80008ac:	f7ff fc9e 	bl	80001ec <isButton2Pressed>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d113      	bne.n	80008de <fsm_processing+0x546>
		{
			if(timeGreenTemp >= 1 && timeGreenTemp <= 99)
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <fsm_processing+0x5d4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	dd08      	ble.n	80008d0 <fsm_processing+0x538>
 80008be:	4b2b      	ldr	r3, [pc, #172]	; (800096c <fsm_processing+0x5d4>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b63      	cmp	r3, #99	; 0x63
 80008c4:	dc04      	bgt.n	80008d0 <fsm_processing+0x538>
			timeGreenTemp++;
 80008c6:	4b29      	ldr	r3, [pc, #164]	; (800096c <fsm_processing+0x5d4>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3301      	adds	r3, #1
 80008cc:	4a27      	ldr	r2, [pc, #156]	; (800096c <fsm_processing+0x5d4>)
 80008ce:	6013      	str	r3, [r2, #0]
			if (timeGreenTemp >= 100) timeGreenTemp = 1;
 80008d0:	4b26      	ldr	r3, [pc, #152]	; (800096c <fsm_processing+0x5d4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b63      	cmp	r3, #99	; 0x63
 80008d6:	dd02      	ble.n	80008de <fsm_processing+0x546>
 80008d8:	4b24      	ldr	r3, [pc, #144]	; (800096c <fsm_processing+0x5d4>)
 80008da:	2201      	movs	r2, #1
 80008dc:	601a      	str	r2, [r3, #0]
		}
		if (isButton3Pressed() == 1)
 80008de:	f7ff fc97 	bl	8000210 <isButton3Pressed>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d103      	bne.n	80008f0 <fsm_processing+0x558>
		{
			timeGreen = timeGreenTemp;
 80008e8:	4b20      	ldr	r3, [pc, #128]	; (800096c <fsm_processing+0x5d4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a20      	ldr	r2, [pc, #128]	; (8000970 <fsm_processing+0x5d8>)
 80008ee:	6013      	str	r3, [r2, #0]
		}
		led_off(Red1);
 80008f0:	2040      	movs	r0, #64	; 0x40
 80008f2:	f000 fab1 	bl	8000e58 <led_off>
		led_off(Red2);
 80008f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008fa:	f000 faad 	bl	8000e58 <led_off>
		led_off(Amber1);
 80008fe:	2020      	movs	r0, #32
 8000900:	f000 faaa 	bl	8000e58 <led_off>
		led_off(Amber2);
 8000904:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000908:	f000 faa6 	bl	8000e58 <led_off>
		valueSEG12 = 4;
 800090c:	4b19      	ldr	r3, [pc, #100]	; (8000974 <fsm_processing+0x5dc>)
 800090e:	2204      	movs	r2, #4
 8000910:	601a      	str	r2, [r3, #0]
		valueSEG34 = timeGreenTemp;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <fsm_processing+0x5d4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a18      	ldr	r2, [pc, #96]	; (8000978 <fsm_processing+0x5e0>)
 8000918:	6013      	str	r3, [r2, #0]
		updateClockBuffer();
 800091a:	f000 fa33 	bl	8000d84 <updateClockBuffer>
		if (timer1_flag == 1) // HIỂN THỊ LED 7 ĐOẠN
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <fsm_processing+0x5e4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d11e      	bne.n	8000964 <fsm_processing+0x5cc>
		{
			if (Index > 3) Index = 0;
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <fsm_processing+0x5e8>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b03      	cmp	r3, #3
 800092c:	dd02      	ble.n	8000934 <fsm_processing+0x59c>
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <fsm_processing+0x5e8>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
			update7SEG(Index++);
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <fsm_processing+0x5e8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	1c5a      	adds	r2, r3, #1
 800093a:	4911      	ldr	r1, [pc, #68]	; (8000980 <fsm_processing+0x5e8>)
 800093c:	600a      	str	r2, [r1, #0]
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f9ce 	bl	8000ce0 <update7SEG>
			setTimer1(250);
 8000944:	20fa      	movs	r0, #250	; 0xfa
 8000946:	f000 fbe3 	bl	8001110 <setTimer1>
			blinkingLedGreen();
 800094a:	f000 faa7 	bl	8000e9c <blinkingLedGreen>
		}
		break;
 800094e:	e009      	b.n	8000964 <fsm_processing+0x5cc>

	default:
		break;
 8000950:	bf00      	nop
 8000952:	e008      	b.n	8000966 <fsm_processing+0x5ce>
		break;
 8000954:	bf00      	nop
 8000956:	e006      	b.n	8000966 <fsm_processing+0x5ce>
		break;
 8000958:	bf00      	nop
 800095a:	e004      	b.n	8000966 <fsm_processing+0x5ce>
		break;
 800095c:	bf00      	nop
 800095e:	e002      	b.n	8000966 <fsm_processing+0x5ce>
		break;
 8000960:	bf00      	nop
 8000962:	e000      	b.n	8000966 <fsm_processing+0x5ce>
		break;
 8000964:	bf00      	nop
	}
	//
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000b4 	.word	0x200000b4
 8000970:	2000000c 	.word	0x2000000c
 8000974:	200000c4 	.word	0x200000c4
 8000978:	200000c0 	.word	0x200000c0
 800097c:	20000064 	.word	0x20000064
 8000980:	2000005c 	.word	0x2000005c

08000984 <display7SEG>:
 */
#include "led_display.h"


void display7SEG(int num) // HIỆN THỊ LED 7 ĐOẠN
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
   	if (num == 0)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d123      	bne.n	80009da <display7SEG+0x56>
    {
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2101      	movs	r1, #1
 8000996:	48c2      	ldr	r0, [pc, #776]	; (8000ca0 <display7SEG+0x31c>)
 8000998:	f001 f811 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2102      	movs	r1, #2
 80009a0:	48bf      	ldr	r0, [pc, #764]	; (8000ca0 <display7SEG+0x31c>)
 80009a2:	f001 f80c 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2104      	movs	r1, #4
 80009aa:	48bd      	ldr	r0, [pc, #756]	; (8000ca0 <display7SEG+0x31c>)
 80009ac:	f001 f807 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2108      	movs	r1, #8
 80009b4:	48ba      	ldr	r0, [pc, #744]	; (8000ca0 <display7SEG+0x31c>)
 80009b6:	f001 f802 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2110      	movs	r1, #16
 80009be:	48b8      	ldr	r0, [pc, #736]	; (8000ca0 <display7SEG+0x31c>)
 80009c0:	f000 fffd 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2120      	movs	r1, #32
 80009c8:	48b5      	ldr	r0, [pc, #724]	; (8000ca0 <display7SEG+0x31c>)
 80009ca:	f000 fff8 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 1);
 80009ce:	2201      	movs	r2, #1
 80009d0:	2140      	movs	r1, #64	; 0x40
 80009d2:	48b3      	ldr	r0, [pc, #716]	; (8000ca0 <display7SEG+0x31c>)
 80009d4:	f000 fff3 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
   	}
}
 80009d8:	e15d      	b.n	8000c96 <display7SEG+0x312>
   	else if (num == 1)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d123      	bne.n	8000a28 <display7SEG+0xa4>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 1);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2101      	movs	r1, #1
 80009e4:	48ae      	ldr	r0, [pc, #696]	; (8000ca0 <display7SEG+0x31c>)
 80009e6:	f000 ffea 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2102      	movs	r1, #2
 80009ee:	48ac      	ldr	r0, [pc, #688]	; (8000ca0 <display7SEG+0x31c>)
 80009f0:	f000 ffe5 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2104      	movs	r1, #4
 80009f8:	48a9      	ldr	r0, [pc, #676]	; (8000ca0 <display7SEG+0x31c>)
 80009fa:	f000 ffe0 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 1);
 80009fe:	2201      	movs	r2, #1
 8000a00:	2108      	movs	r1, #8
 8000a02:	48a7      	ldr	r0, [pc, #668]	; (8000ca0 <display7SEG+0x31c>)
 8000a04:	f000 ffdb 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	48a4      	ldr	r0, [pc, #656]	; (8000ca0 <display7SEG+0x31c>)
 8000a0e:	f000 ffd6 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 1);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2120      	movs	r1, #32
 8000a16:	48a2      	ldr	r0, [pc, #648]	; (8000ca0 <display7SEG+0x31c>)
 8000a18:	f000 ffd1 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 1);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2140      	movs	r1, #64	; 0x40
 8000a20:	489f      	ldr	r0, [pc, #636]	; (8000ca0 <display7SEG+0x31c>)
 8000a22:	f000 ffcc 	bl	80019be <HAL_GPIO_WritePin>
}
 8000a26:	e136      	b.n	8000c96 <display7SEG+0x312>
   	else if (num == 2)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d123      	bne.n	8000a76 <display7SEG+0xf2>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2101      	movs	r1, #1
 8000a32:	489b      	ldr	r0, [pc, #620]	; (8000ca0 <display7SEG+0x31c>)
 8000a34:	f000 ffc3 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	4898      	ldr	r0, [pc, #608]	; (8000ca0 <display7SEG+0x31c>)
 8000a3e:	f000 ffbe 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 1);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2104      	movs	r1, #4
 8000a46:	4896      	ldr	r0, [pc, #600]	; (8000ca0 <display7SEG+0x31c>)
 8000a48:	f000 ffb9 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2108      	movs	r1, #8
 8000a50:	4893      	ldr	r0, [pc, #588]	; (8000ca0 <display7SEG+0x31c>)
 8000a52:	f000 ffb4 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2110      	movs	r1, #16
 8000a5a:	4891      	ldr	r0, [pc, #580]	; (8000ca0 <display7SEG+0x31c>)
 8000a5c:	f000 ffaf 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2120      	movs	r1, #32
 8000a64:	488e      	ldr	r0, [pc, #568]	; (8000ca0 <display7SEG+0x31c>)
 8000a66:	f000 ffaa 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2140      	movs	r1, #64	; 0x40
 8000a6e:	488c      	ldr	r0, [pc, #560]	; (8000ca0 <display7SEG+0x31c>)
 8000a70:	f000 ffa5 	bl	80019be <HAL_GPIO_WritePin>
}
 8000a74:	e10f      	b.n	8000c96 <display7SEG+0x312>
   	else if (num == 3)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	d123      	bne.n	8000ac4 <display7SEG+0x140>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4887      	ldr	r0, [pc, #540]	; (8000ca0 <display7SEG+0x31c>)
 8000a82:	f000 ff9c 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4885      	ldr	r0, [pc, #532]	; (8000ca0 <display7SEG+0x31c>)
 8000a8c:	f000 ff97 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2104      	movs	r1, #4
 8000a94:	4882      	ldr	r0, [pc, #520]	; (8000ca0 <display7SEG+0x31c>)
 8000a96:	f000 ff92 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	4880      	ldr	r0, [pc, #512]	; (8000ca0 <display7SEG+0x31c>)
 8000aa0:	f000 ff8d 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2110      	movs	r1, #16
 8000aa8:	487d      	ldr	r0, [pc, #500]	; (8000ca0 <display7SEG+0x31c>)
 8000aaa:	f000 ff88 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 1);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2120      	movs	r1, #32
 8000ab2:	487b      	ldr	r0, [pc, #492]	; (8000ca0 <display7SEG+0x31c>)
 8000ab4:	f000 ff83 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2140      	movs	r1, #64	; 0x40
 8000abc:	4878      	ldr	r0, [pc, #480]	; (8000ca0 <display7SEG+0x31c>)
 8000abe:	f000 ff7e 	bl	80019be <HAL_GPIO_WritePin>
}
 8000ac2:	e0e8      	b.n	8000c96 <display7SEG+0x312>
   	else if (num == 4)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	d123      	bne.n	8000b12 <display7SEG+0x18e>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2101      	movs	r1, #1
 8000ace:	4874      	ldr	r0, [pc, #464]	; (8000ca0 <display7SEG+0x31c>)
 8000ad0:	f000 ff75 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	4871      	ldr	r0, [pc, #452]	; (8000ca0 <display7SEG+0x31c>)
 8000ada:	f000 ff70 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2104      	movs	r1, #4
 8000ae2:	486f      	ldr	r0, [pc, #444]	; (8000ca0 <display7SEG+0x31c>)
 8000ae4:	f000 ff6b 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 1);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2108      	movs	r1, #8
 8000aec:	486c      	ldr	r0, [pc, #432]	; (8000ca0 <display7SEG+0x31c>)
 8000aee:	f000 ff66 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2110      	movs	r1, #16
 8000af6:	486a      	ldr	r0, [pc, #424]	; (8000ca0 <display7SEG+0x31c>)
 8000af8:	f000 ff61 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2120      	movs	r1, #32
 8000b00:	4867      	ldr	r0, [pc, #412]	; (8000ca0 <display7SEG+0x31c>)
 8000b02:	f000 ff5c 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2140      	movs	r1, #64	; 0x40
 8000b0a:	4865      	ldr	r0, [pc, #404]	; (8000ca0 <display7SEG+0x31c>)
 8000b0c:	f000 ff57 	bl	80019be <HAL_GPIO_WritePin>
}
 8000b10:	e0c1      	b.n	8000c96 <display7SEG+0x312>
   	else if (num == 5)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b05      	cmp	r3, #5
 8000b16:	d123      	bne.n	8000b60 <display7SEG+0x1dc>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	4860      	ldr	r0, [pc, #384]	; (8000ca0 <display7SEG+0x31c>)
 8000b1e:	f000 ff4e 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 1);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2102      	movs	r1, #2
 8000b26:	485e      	ldr	r0, [pc, #376]	; (8000ca0 <display7SEG+0x31c>)
 8000b28:	f000 ff49 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2104      	movs	r1, #4
 8000b30:	485b      	ldr	r0, [pc, #364]	; (8000ca0 <display7SEG+0x31c>)
 8000b32:	f000 ff44 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2108      	movs	r1, #8
 8000b3a:	4859      	ldr	r0, [pc, #356]	; (8000ca0 <display7SEG+0x31c>)
 8000b3c:	f000 ff3f 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2110      	movs	r1, #16
 8000b44:	4856      	ldr	r0, [pc, #344]	; (8000ca0 <display7SEG+0x31c>)
 8000b46:	f000 ff3a 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	4854      	ldr	r0, [pc, #336]	; (8000ca0 <display7SEG+0x31c>)
 8000b50:	f000 ff35 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2140      	movs	r1, #64	; 0x40
 8000b58:	4851      	ldr	r0, [pc, #324]	; (8000ca0 <display7SEG+0x31c>)
 8000b5a:	f000 ff30 	bl	80019be <HAL_GPIO_WritePin>
}
 8000b5e:	e09a      	b.n	8000c96 <display7SEG+0x312>
   	else if (num == 6)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d123      	bne.n	8000bae <display7SEG+0x22a>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2101      	movs	r1, #1
 8000b6a:	484d      	ldr	r0, [pc, #308]	; (8000ca0 <display7SEG+0x31c>)
 8000b6c:	f000 ff27 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 1);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2102      	movs	r1, #2
 8000b74:	484a      	ldr	r0, [pc, #296]	; (8000ca0 <display7SEG+0x31c>)
 8000b76:	f000 ff22 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	4848      	ldr	r0, [pc, #288]	; (8000ca0 <display7SEG+0x31c>)
 8000b80:	f000 ff1d 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2108      	movs	r1, #8
 8000b88:	4845      	ldr	r0, [pc, #276]	; (8000ca0 <display7SEG+0x31c>)
 8000b8a:	f000 ff18 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2110      	movs	r1, #16
 8000b92:	4843      	ldr	r0, [pc, #268]	; (8000ca0 <display7SEG+0x31c>)
 8000b94:	f000 ff13 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2120      	movs	r1, #32
 8000b9c:	4840      	ldr	r0, [pc, #256]	; (8000ca0 <display7SEG+0x31c>)
 8000b9e:	f000 ff0e 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	483e      	ldr	r0, [pc, #248]	; (8000ca0 <display7SEG+0x31c>)
 8000ba8:	f000 ff09 	bl	80019be <HAL_GPIO_WritePin>
}
 8000bac:	e073      	b.n	8000c96 <display7SEG+0x312>
   	else if (num == 7)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b07      	cmp	r3, #7
 8000bb2:	d123      	bne.n	8000bfc <display7SEG+0x278>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	4839      	ldr	r0, [pc, #228]	; (8000ca0 <display7SEG+0x31c>)
 8000bba:	f000 ff00 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	4837      	ldr	r0, [pc, #220]	; (8000ca0 <display7SEG+0x31c>)
 8000bc4:	f000 fefb 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2104      	movs	r1, #4
 8000bcc:	4834      	ldr	r0, [pc, #208]	; (8000ca0 <display7SEG+0x31c>)
 8000bce:	f000 fef6 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 1);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	4832      	ldr	r0, [pc, #200]	; (8000ca0 <display7SEG+0x31c>)
 8000bd8:	f000 fef1 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2110      	movs	r1, #16
 8000be0:	482f      	ldr	r0, [pc, #188]	; (8000ca0 <display7SEG+0x31c>)
 8000be2:	f000 feec 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 1);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2120      	movs	r1, #32
 8000bea:	482d      	ldr	r0, [pc, #180]	; (8000ca0 <display7SEG+0x31c>)
 8000bec:	f000 fee7 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 1);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2140      	movs	r1, #64	; 0x40
 8000bf4:	482a      	ldr	r0, [pc, #168]	; (8000ca0 <display7SEG+0x31c>)
 8000bf6:	f000 fee2 	bl	80019be <HAL_GPIO_WritePin>
}
 8000bfa:	e04c      	b.n	8000c96 <display7SEG+0x312>
   	else if (num == 8)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b08      	cmp	r3, #8
 8000c00:	d123      	bne.n	8000c4a <display7SEG+0x2c6>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2101      	movs	r1, #1
 8000c06:	4826      	ldr	r0, [pc, #152]	; (8000ca0 <display7SEG+0x31c>)
 8000c08:	f000 fed9 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2102      	movs	r1, #2
 8000c10:	4823      	ldr	r0, [pc, #140]	; (8000ca0 <display7SEG+0x31c>)
 8000c12:	f000 fed4 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2104      	movs	r1, #4
 8000c1a:	4821      	ldr	r0, [pc, #132]	; (8000ca0 <display7SEG+0x31c>)
 8000c1c:	f000 fecf 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2108      	movs	r1, #8
 8000c24:	481e      	ldr	r0, [pc, #120]	; (8000ca0 <display7SEG+0x31c>)
 8000c26:	f000 feca 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2110      	movs	r1, #16
 8000c2e:	481c      	ldr	r0, [pc, #112]	; (8000ca0 <display7SEG+0x31c>)
 8000c30:	f000 fec5 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2120      	movs	r1, #32
 8000c38:	4819      	ldr	r0, [pc, #100]	; (8000ca0 <display7SEG+0x31c>)
 8000c3a:	f000 fec0 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2140      	movs	r1, #64	; 0x40
 8000c42:	4817      	ldr	r0, [pc, #92]	; (8000ca0 <display7SEG+0x31c>)
 8000c44:	f000 febb 	bl	80019be <HAL_GPIO_WritePin>
}
 8000c48:	e025      	b.n	8000c96 <display7SEG+0x312>
   	else if (num == 9)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b09      	cmp	r3, #9
 8000c4e:	d122      	bne.n	8000c96 <display7SEG+0x312>
   		HAL_GPIO_WritePin(SEG7_a_GPIO_Port, SEG7_a_Pin, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2101      	movs	r1, #1
 8000c54:	4812      	ldr	r0, [pc, #72]	; (8000ca0 <display7SEG+0x31c>)
 8000c56:	f000 feb2 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_b_GPIO_Port, SEG7_b_Pin, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	4810      	ldr	r0, [pc, #64]	; (8000ca0 <display7SEG+0x31c>)
 8000c60:	f000 fead 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_c_GPIO_Port, SEG7_c_Pin, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2104      	movs	r1, #4
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <display7SEG+0x31c>)
 8000c6a:	f000 fea8 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_d_GPIO_Port, SEG7_d_Pin, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2108      	movs	r1, #8
 8000c72:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <display7SEG+0x31c>)
 8000c74:	f000 fea3 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_e_GPIO_Port, SEG7_e_Pin, 1);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <display7SEG+0x31c>)
 8000c7e:	f000 fe9e 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_f_GPIO_Port, SEG7_f_Pin, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2120      	movs	r1, #32
 8000c86:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <display7SEG+0x31c>)
 8000c88:	f000 fe99 	bl	80019be <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(SEG7_g_GPIO_Port, SEG7_g_Pin, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2140      	movs	r1, #64	; 0x40
 8000c90:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <display7SEG+0x31c>)
 8000c92:	f000 fe94 	bl	80019be <HAL_GPIO_WritePin>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40010c00 	.word	0x40010c00

08000ca4 <unEnableAll>:
int led_buffer[4] = {8, 8, 8, 8};
void unEnableAll() // SET TẤT CẢ CÁC LED TẮT NHỜ ĐẶT CHÂN CONTROL LÊN 1
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG7_1_GPIO_Port, SEG7_1_Pin, 1);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <unEnableAll+0x38>)
 8000cae:	f000 fe86 	bl	80019be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG7_2_GPIO_Port, SEG7_2_Pin, 1);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb8:	4808      	ldr	r0, [pc, #32]	; (8000cdc <unEnableAll+0x38>)
 8000cba:	f000 fe80 	bl	80019be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG7_3_GPIO_Port, SEG7_3_Pin, 1);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <unEnableAll+0x38>)
 8000cc6:	f000 fe7a 	bl	80019be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG7_4_GPIO_Port, SEG7_4_Pin, 1);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <unEnableAll+0x38>)
 8000cd2:	f000 fe74 	bl	80019be <HAL_GPIO_WritePin>
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40010c00 	.word	0x40010c00

08000ce0 <update7SEG>:
void update7SEG(int index) // QUÉT LED
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d841      	bhi.n	8000d72 <update7SEG+0x92>
 8000cee:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <update7SEG+0x14>)
 8000cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf4:	08000d05 	.word	0x08000d05
 8000cf8:	08000d1f 	.word	0x08000d1f
 8000cfc:	08000d3b 	.word	0x08000d3b
 8000d00:	08000d57 	.word	0x08000d57
	switch (index)
	{
		case 0:
			unEnableAll();
 8000d04:	f7ff ffce 	bl	8000ca4 <unEnableAll>
			HAL_GPIO_WritePin(SEG7_1_GPIO_Port, SEG7_1_Pin, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	481b      	ldr	r0, [pc, #108]	; (8000d7c <update7SEG+0x9c>)
 8000d0e:	f000 fe56 	bl	80019be <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000d12:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <update7SEG+0xa0>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fe34 	bl	8000984 <display7SEG>
			break;
 8000d1c:	e02a      	b.n	8000d74 <update7SEG+0x94>
		case 1:
			unEnableAll();
 8000d1e:	f7ff ffc1 	bl	8000ca4 <unEnableAll>
			HAL_GPIO_WritePin(SEG7_2_GPIO_Port, SEG7_2_Pin, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d28:	4814      	ldr	r0, [pc, #80]	; (8000d7c <update7SEG+0x9c>)
 8000d2a:	f000 fe48 	bl	80019be <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <update7SEG+0xa0>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fe26 	bl	8000984 <display7SEG>
			break;
 8000d38:	e01c      	b.n	8000d74 <update7SEG+0x94>
		case 2:
			unEnableAll();
 8000d3a:	f7ff ffb3 	bl	8000ca4 <unEnableAll>
			HAL_GPIO_WritePin(SEG7_3_GPIO_Port, SEG7_3_Pin, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <update7SEG+0x9c>)
 8000d46:	f000 fe3a 	bl	80019be <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <update7SEG+0xa0>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fe18 	bl	8000984 <display7SEG>
			break;
 8000d54:	e00e      	b.n	8000d74 <update7SEG+0x94>
		case 3:
			unEnableAll();
 8000d56:	f7ff ffa5 	bl	8000ca4 <unEnableAll>
			HAL_GPIO_WritePin(SEG7_4_GPIO_Port, SEG7_4_Pin, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d60:	4806      	ldr	r0, [pc, #24]	; (8000d7c <update7SEG+0x9c>)
 8000d62:	f000 fe2c 	bl	80019be <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <update7SEG+0xa0>)
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fe0a 	bl	8000984 <display7SEG>
			break;
 8000d70:	e000      	b.n	8000d74 <update7SEG+0x94>
		default:
			break;
 8000d72:	bf00      	nop
	}
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40010c00 	.word	0x40010c00
 8000d80:	20000014 	.word	0x20000014

08000d84 <updateClockBuffer>:
int valueSEG12;
int valueSEG34;
void updateClockBuffer() // CẬP NHẬT GIÁ TRỊ CHO BUFFER
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	if (valueSEG12 <= 9)
 8000d88:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <updateClockBuffer+0xa0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b09      	cmp	r3, #9
 8000d8e:	dc07      	bgt.n	8000da0 <updateClockBuffer+0x1c>
	{
		led_buffer[0] = 0;
 8000d90:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <updateClockBuffer+0xa4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
		led_buffer[1] = valueSEG12;
 8000d96:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <updateClockBuffer+0xa0>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a23      	ldr	r2, [pc, #140]	; (8000e28 <updateClockBuffer+0xa4>)
 8000d9c:	6053      	str	r3, [r2, #4]
 8000d9e:	e018      	b.n	8000dd2 <updateClockBuffer+0x4e>
	}
	else
	{
		led_buffer[0] = valueSEG12 / 10;
 8000da0:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <updateClockBuffer+0xa0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <updateClockBuffer+0xa8>)
 8000da6:	fb82 1203 	smull	r1, r2, r2, r3
 8000daa:	1092      	asrs	r2, r2, #2
 8000dac:	17db      	asrs	r3, r3, #31
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	4a1d      	ldr	r2, [pc, #116]	; (8000e28 <updateClockBuffer+0xa4>)
 8000db2:	6013      	str	r3, [r2, #0]
		led_buffer[1] = valueSEG12 % 10;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <updateClockBuffer+0xa0>)
 8000db6:	6819      	ldr	r1, [r3, #0]
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <updateClockBuffer+0xa8>)
 8000dba:	fb83 2301 	smull	r2, r3, r3, r1
 8000dbe:	109a      	asrs	r2, r3, #2
 8000dc0:	17cb      	asrs	r3, r1, #31
 8000dc2:	1ad2      	subs	r2, r2, r3
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	1aca      	subs	r2, r1, r3
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <updateClockBuffer+0xa4>)
 8000dd0:	605a      	str	r2, [r3, #4]
	}
	if (valueSEG34 <= 9)
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <updateClockBuffer+0xac>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b09      	cmp	r3, #9
 8000dd8:	dc07      	bgt.n	8000dea <updateClockBuffer+0x66>
	{
		led_buffer[2] = 0;
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <updateClockBuffer+0xa4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
		led_buffer[3] = valueSEG34;
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <updateClockBuffer+0xac>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <updateClockBuffer+0xa4>)
 8000de6:	60d3      	str	r3, [r2, #12]
	else
	{
		led_buffer[2] = valueSEG34 / 10;
		led_buffer[3] = valueSEG34 % 10;
	}
}
 8000de8:	e018      	b.n	8000e1c <updateClockBuffer+0x98>
		led_buffer[2] = valueSEG34 / 10;
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <updateClockBuffer+0xac>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <updateClockBuffer+0xa8>)
 8000df0:	fb82 1203 	smull	r1, r2, r2, r3
 8000df4:	1092      	asrs	r2, r2, #2
 8000df6:	17db      	asrs	r3, r3, #31
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <updateClockBuffer+0xa4>)
 8000dfc:	6093      	str	r3, [r2, #8]
		led_buffer[3] = valueSEG34 % 10;
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <updateClockBuffer+0xac>)
 8000e00:	6819      	ldr	r1, [r3, #0]
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <updateClockBuffer+0xa8>)
 8000e04:	fb83 2301 	smull	r2, r3, r3, r1
 8000e08:	109a      	asrs	r2, r3, #2
 8000e0a:	17cb      	asrs	r3, r1, #31
 8000e0c:	1ad2      	subs	r2, r2, r3
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	1aca      	subs	r2, r1, r3
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <updateClockBuffer+0xa4>)
 8000e1a:	60da      	str	r2, [r3, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	200000c4 	.word	0x200000c4
 8000e28:	20000014 	.word	0x20000014
 8000e2c:	66666667 	.word	0x66666667
 8000e30:	200000c0 	.word	0x200000c0

08000e34 <led_on>:
void led_on(int pin)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, pin, 0);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	2200      	movs	r2, #0
 8000e42:	4619      	mov	r1, r3
 8000e44:	4803      	ldr	r0, [pc, #12]	; (8000e54 <led_on+0x20>)
 8000e46:	f000 fdba 	bl	80019be <HAL_GPIO_WritePin>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40010800 	.word	0x40010800

08000e58 <led_off>:
void led_off(int pin)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, pin, 1);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	2201      	movs	r2, #1
 8000e66:	4619      	mov	r1, r3
 8000e68:	4803      	ldr	r0, [pc, #12]	; (8000e78 <led_off+0x20>)
 8000e6a:	f000 fda8 	bl	80019be <HAL_GPIO_WritePin>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40010800 	.word	0x40010800

08000e7c <blinkingLedRed>:
void blinkingLedRed()
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Red1_GPIO_Port, Red1_Pin);
 8000e80:	2140      	movs	r1, #64	; 0x40
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <blinkingLedRed+0x1c>)
 8000e84:	f000 fdb3 	bl	80019ee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Red2_GPIO_Port, Red2_Pin);
 8000e88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <blinkingLedRed+0x1c>)
 8000e8e:	f000 fdae 	bl	80019ee <HAL_GPIO_TogglePin>
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40010800 	.word	0x40010800

08000e9c <blinkingLedGreen>:
void blinkingLedGreen()
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Green1_GPIO_Port, Green1_Pin);
 8000ea0:	2110      	movs	r1, #16
 8000ea2:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <blinkingLedGreen+0x18>)
 8000ea4:	f000 fda3 	bl	80019ee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Green2_GPIO_Port, Green2_Pin);
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <blinkingLedGreen+0x18>)
 8000eac:	f000 fd9f 	bl	80019ee <HAL_GPIO_TogglePin>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40010800 	.word	0x40010800

08000eb8 <blinkingLedAmber>:
void blinkingLedAmber()
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Amber1_GPIO_Port, Amber1_Pin);
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <blinkingLedAmber+0x1c>)
 8000ec0:	f000 fd95 	bl	80019ee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Amber2_GPIO_Port, Amber2_Pin);
 8000ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <blinkingLedAmber+0x1c>)
 8000eca:	f000 fd90 	bl	80019ee <HAL_GPIO_TogglePin>
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40010800 	.word	0x40010800

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000edc:	f000 fa6e 	bl	80013bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee0:	f000 f818 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee4:	f000 f89e 	bl	8001024 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ee8:	f000 f850 	bl	8000f8c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000eec:	4808      	ldr	r0, [pc, #32]	; (8000f10 <main+0x38>)
 8000eee:	f001 f9c3 	bl	8002278 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Exercise 10 all task in final project
  initialButton();
 8000ef2:	f7ff f92b 	bl	800014c <initialButton>
  setTimer1(250); // TIMER ĐỂ QUÉT LED
 8000ef6:	20fa      	movs	r0, #250	; 0xfa
 8000ef8:	f000 f90a 	bl	8001110 <setTimer1>
  setTimer2(1000); // TIMER ĐỂ CẬP NHẬT GIÁ TRỊ LED
 8000efc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f00:	f000 f922 	bl	8001148 <setTimer2>
  setTimer3(10); // TIMER ĐỂ READ VALUE CỦA BUTTON
 8000f04:	200a      	movs	r0, #10
 8000f06:	f000 f93b 	bl	8001180 <setTimer3>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_processing();
 8000f0a:	f7ff fa45 	bl	8000398 <fsm_processing>
 8000f0e:	e7fc      	b.n	8000f0a <main+0x32>
 8000f10:	200000c8 	.word	0x200000c8

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b090      	sub	sp, #64	; 0x40
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0318 	add.w	r3, r7, #24
 8000f1e:	2228      	movs	r2, #40	; 0x28
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fd64 	bl	80029f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3e:	2310      	movs	r3, #16
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f46:	f107 0318 	add.w	r3, r7, #24
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fd68 	bl	8001a20 <HAL_RCC_OscConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f56:	f000 f8d5 	bl	8001104 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 ffd4 	bl	8001f20 <HAL_RCC_ClockConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f7e:	f000 f8c1 	bl	8001104 <Error_Handler>
  }
}
 8000f82:	bf00      	nop
 8000f84:	3740      	adds	r7, #64	; 0x40
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <MX_TIM2_Init+0x94>)
 8000faa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <MX_TIM2_Init+0x94>)
 8000fb2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb8:	4b19      	ldr	r3, [pc, #100]	; (8001020 <MX_TIM2_Init+0x94>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_TIM2_Init+0x94>)
 8000fc0:	2209      	movs	r2, #9
 8000fc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_TIM2_Init+0x94>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <MX_TIM2_Init+0x94>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fd0:	4813      	ldr	r0, [pc, #76]	; (8001020 <MX_TIM2_Init+0x94>)
 8000fd2:	f001 f901 	bl	80021d8 <HAL_TIM_Base_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fdc:	f000 f892 	bl	8001104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	4619      	mov	r1, r3
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <MX_TIM2_Init+0x94>)
 8000fee:	f001 fa97 	bl	8002520 <HAL_TIM_ConfigClockSource>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ff8:	f000 f884 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_TIM2_Init+0x94>)
 800100a:	f001 fc63 	bl	80028d4 <HAL_TIMEx_MasterConfigSynchronization>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001014:	f000 f876 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200000c8 	.word	0x200000c8

08001024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001038:	4b28      	ldr	r3, [pc, #160]	; (80010dc <MX_GPIO_Init+0xb8>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a27      	ldr	r2, [pc, #156]	; (80010dc <MX_GPIO_Init+0xb8>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b25      	ldr	r3, [pc, #148]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a21      	ldr	r2, [pc, #132]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001056:	f043 0308 	orr.w	r3, r3, #8
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <MX_GPIO_Init+0xb8>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green1_Pin|Amber1_Pin|Red1_Pin|Green2_Pin
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 800106e:	481c      	ldr	r0, [pc, #112]	; (80010e0 <MX_GPIO_Init+0xbc>)
 8001070:	f000 fca5 	bl	80019be <HAL_GPIO_WritePin>
                          |Amber2_Pin|Red2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG7_a_Pin|SEG7_b_Pin|SEG7_c_Pin|SEG7_4_Pin
 8001074:	2200      	movs	r2, #0
 8001076:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800107a:	481a      	ldr	r0, [pc, #104]	; (80010e4 <MX_GPIO_Init+0xc0>)
 800107c:	f000 fc9f 	bl	80019be <HAL_GPIO_WritePin>
                          |SEG7_d_Pin|SEG7_e_Pin|SEG7_f_Pin|SEG7_g_Pin
                          |SEG7_1_Pin|SEG7_2_Pin|SEG7_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BT1_Pin BT2_Pin BT3_Pin */
  GPIO_InitStruct.Pin = BT1_Pin|BT2_Pin|BT3_Pin;
 8001080:	230e      	movs	r3, #14
 8001082:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001088:	2301      	movs	r3, #1
 800108a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	4619      	mov	r1, r3
 8001092:	4813      	ldr	r0, [pc, #76]	; (80010e0 <MX_GPIO_Init+0xbc>)
 8001094:	f000 fb02 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : Green1_Pin Amber1_Pin Red1_Pin Green2_Pin
                           Amber2_Pin Red2_Pin */
  GPIO_InitStruct.Pin = Green1_Pin|Amber1_Pin|Red1_Pin|Green2_Pin
 8001098:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 800109c:	60bb      	str	r3, [r7, #8]
                          |Amber2_Pin|Red2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2302      	movs	r3, #2
 80010a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	4619      	mov	r1, r3
 80010b0:	480b      	ldr	r0, [pc, #44]	; (80010e0 <MX_GPIO_Init+0xbc>)
 80010b2:	f000 faf3 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG7_a_Pin SEG7_b_Pin SEG7_c_Pin SEG7_4_Pin
                           SEG7_d_Pin SEG7_e_Pin SEG7_f_Pin SEG7_g_Pin
                           SEG7_1_Pin SEG7_2_Pin SEG7_3_Pin */
  GPIO_InitStruct.Pin = SEG7_a_Pin|SEG7_b_Pin|SEG7_c_Pin|SEG7_4_Pin
 80010b6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010ba:	60bb      	str	r3, [r7, #8]
                          |SEG7_d_Pin|SEG7_e_Pin|SEG7_f_Pin|SEG7_g_Pin
                          |SEG7_1_Pin|SEG7_2_Pin|SEG7_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2302      	movs	r3, #2
 80010c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	4619      	mov	r1, r3
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_GPIO_Init+0xc0>)
 80010d0:	f000 fae4 	bl	800169c <HAL_GPIO_Init>

}
 80010d4:	bf00      	nop
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010800 	.word	0x40010800
 80010e4:	40010c00 	.word	0x40010c00

080010e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	timer1Run();
 80010f0:	f000 f862 	bl	80011b8 <timer1Run>
	timer2Run();
 80010f4:	f000 f87a 	bl	80011ec <timer2Run>
	timer3Run();
 80010f8:	f000 f892 	bl	8001220 <timer3Run>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001108:	b672      	cpsid	i
}
 800110a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800110c:	e7fe      	b.n	800110c <Error_Handler+0x8>
	...

08001110 <setTimer1>:
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;
void setTimer1(int duration)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <setTimer1+0x2c>)
 800111c:	fb82 1203 	smull	r1, r2, r2, r3
 8001120:	1092      	asrs	r2, r2, #2
 8001122:	17db      	asrs	r3, r3, #31
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	4a06      	ldr	r2, [pc, #24]	; (8001140 <setTimer1+0x30>)
 8001128:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <setTimer1+0x34>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	66666667 	.word	0x66666667
 8001140:	20000060 	.word	0x20000060
 8001144:	20000064 	.word	0x20000064

08001148 <setTimer2>:
void setTimer2(int duration)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <setTimer2+0x2c>)
 8001154:	fb82 1203 	smull	r1, r2, r2, r3
 8001158:	1092      	asrs	r2, r2, #2
 800115a:	17db      	asrs	r3, r3, #31
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	4a06      	ldr	r2, [pc, #24]	; (8001178 <setTimer2+0x30>)
 8001160:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <setTimer2+0x34>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	66666667 	.word	0x66666667
 8001178:	20000068 	.word	0x20000068
 800117c:	2000006c 	.word	0x2000006c

08001180 <setTimer3>:
void setTimer3(int duration)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <setTimer3+0x2c>)
 800118c:	fb82 1203 	smull	r1, r2, r2, r3
 8001190:	1092      	asrs	r2, r2, #2
 8001192:	17db      	asrs	r3, r3, #31
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <setTimer3+0x30>)
 8001198:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <setTimer3+0x34>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	66666667 	.word	0x66666667
 80011b0:	20000070 	.word	0x20000070
 80011b4:	20000074 	.word	0x20000074

080011b8 <timer1Run>:
void timer1Run()
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
	if (timer1_counter > 0)
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <timer1Run+0x2c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	dd0b      	ble.n	80011dc <timer1Run+0x24>
	{
		timer1_counter--;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <timer1Run+0x2c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <timer1Run+0x2c>)
 80011cc:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0)
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <timer1Run+0x2c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	dc02      	bgt.n	80011dc <timer1Run+0x24>
		{
			timer1_flag = 1;
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <timer1Run+0x30>)
 80011d8:	2201      	movs	r2, #1
 80011da:	601a      	str	r2, [r3, #0]
		}

	}
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	20000060 	.word	0x20000060
 80011e8:	20000064 	.word	0x20000064

080011ec <timer2Run>:
void timer2Run()
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	if (timer2_counter > 0)
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <timer2Run+0x2c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	dd0b      	ble.n	8001210 <timer2Run+0x24>
	{
		timer2_counter--;
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <timer2Run+0x2c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	4a06      	ldr	r2, [pc, #24]	; (8001218 <timer2Run+0x2c>)
 8001200:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0)
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <timer2Run+0x2c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	dc02      	bgt.n	8001210 <timer2Run+0x24>
		{
			timer2_flag = 1;
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <timer2Run+0x30>)
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]
		}

	}
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	20000068 	.word	0x20000068
 800121c:	2000006c 	.word	0x2000006c

08001220 <timer3Run>:
void timer3Run()
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
	if (timer3_counter > 0)
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <timer3Run+0x2c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	dd0b      	ble.n	8001244 <timer3Run+0x24>
	{
		timer3_counter--;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <timer3Run+0x2c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3b01      	subs	r3, #1
 8001232:	4a06      	ldr	r2, [pc, #24]	; (800124c <timer3Run+0x2c>)
 8001234:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0)
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <timer3Run+0x2c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	dc02      	bgt.n	8001244 <timer3Run+0x24>
		{
			timer3_flag = 1;
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <timer3Run+0x30>)
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]
		}

	}
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	20000070 	.word	0x20000070
 8001250:	20000074 	.word	0x20000074

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_MspInit+0x5c>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <HAL_MspInit+0x5c>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6193      	str	r3, [r2, #24]
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_MspInit+0x5c>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_MspInit+0x5c>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <HAL_MspInit+0x5c>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	61d3      	str	r3, [r2, #28]
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <HAL_MspInit+0x5c>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_MspInit+0x60>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_MspInit+0x60>)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010000 	.word	0x40010000

080012b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c8:	d113      	bne.n	80012f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_TIM_Base_MspInit+0x44>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <HAL_TIM_Base_MspInit+0x44>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_TIM_Base_MspInit+0x44>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	201c      	movs	r0, #28
 80012e8:	f000 f9a1 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012ec:	201c      	movs	r0, #28
 80012ee:	f000 f9ba 	bl	8001666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000

08001300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <NMI_Handler+0x4>

08001306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <HardFault_Handler+0x4>

0800130c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <MemManage_Handler+0x4>

08001312 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <UsageFault_Handler+0x4>

0800131e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr

08001336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr

08001342 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001346:	f000 f87f 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <TIM2_IRQHandler+0x10>)
 8001356:	f000 ffdb 	bl	8002310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200000c8 	.word	0x200000c8

08001364 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001370:	f7ff fff8 	bl	8001364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001374:	480b      	ldr	r0, [pc, #44]	; (80013a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001376:	490c      	ldr	r1, [pc, #48]	; (80013a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001378:	4a0c      	ldr	r2, [pc, #48]	; (80013ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a09      	ldr	r2, [pc, #36]	; (80013b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800138c:	4c09      	ldr	r4, [pc, #36]	; (80013b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139a:	f001 fb05 	bl	80029a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800139e:	f7ff fd9b 	bl	8000ed8 <main>
  bx lr
 80013a2:	4770      	bx	lr
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80013ac:	08002a44 	.word	0x08002a44
  ldr r2, =_sbss
 80013b0:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80013b4:	20000114 	.word	0x20000114

080013b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC1_2_IRQHandler>
	...

080013bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_Init+0x28>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_Init+0x28>)
 80013c6:	f043 0310 	orr.w	r3, r3, #16
 80013ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 f923 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	200f      	movs	r0, #15
 80013d4:	f000 f808 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff ff3c 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40022000 	.word	0x40022000

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f93b 	bl	8001682 <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f000 f903 	bl	800162e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000024 	.word	0x20000024
 8001440:	2000002c 	.word	0x2000002c
 8001444:	20000028 	.word	0x20000028

08001448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_IncTick+0x1c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_IncTick+0x20>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <HAL_IncTick+0x20>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	2000002c 	.word	0x2000002c
 8001468:	20000110 	.word	0x20000110

0800146c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b02      	ldr	r3, [pc, #8]	; (800147c <HAL_GetTick+0x10>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20000110 	.word	0x20000110

08001480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800149c:	4013      	ands	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b2:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	60d3      	str	r3, [r2, #12]
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	f003 0307 	and.w	r3, r3, #7
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	db0b      	blt.n	800150e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	f003 021f 	and.w	r2, r3, #31
 80014fc:	4906      	ldr	r1, [pc, #24]	; (8001518 <__NVIC_EnableIRQ+0x34>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	2001      	movs	r0, #1
 8001506:	fa00 f202 	lsl.w	r2, r0, r2
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	e000e100 	.word	0xe000e100

0800151c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	6039      	str	r1, [r7, #0]
 8001526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	2b00      	cmp	r3, #0
 800152e:	db0a      	blt.n	8001546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	490c      	ldr	r1, [pc, #48]	; (8001568 <__NVIC_SetPriority+0x4c>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	0112      	lsls	r2, r2, #4
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	440b      	add	r3, r1
 8001540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001544:	e00a      	b.n	800155c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4908      	ldr	r1, [pc, #32]	; (800156c <__NVIC_SetPriority+0x50>)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	3b04      	subs	r3, #4
 8001554:	0112      	lsls	r2, r2, #4
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	440b      	add	r3, r1
 800155a:	761a      	strb	r2, [r3, #24]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000e100 	.word	0xe000e100
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f1c3 0307 	rsb	r3, r3, #7
 800158a:	2b04      	cmp	r3, #4
 800158c:	bf28      	it	cs
 800158e:	2304      	movcs	r3, #4
 8001590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3304      	adds	r3, #4
 8001596:	2b06      	cmp	r3, #6
 8001598:	d902      	bls.n	80015a0 <NVIC_EncodePriority+0x30>
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3b03      	subs	r3, #3
 800159e:	e000      	b.n	80015a2 <NVIC_EncodePriority+0x32>
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	f04f 32ff 	mov.w	r2, #4294967295
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43da      	mvns	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	401a      	ands	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b8:	f04f 31ff 	mov.w	r1, #4294967295
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa01 f303 	lsl.w	r3, r1, r3
 80015c2:	43d9      	mvns	r1, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	4313      	orrs	r3, r2
         );
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3724      	adds	r7, #36	; 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f7ff ff90 	bl	800151c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff2d 	bl	8001480 <__NVIC_SetPriorityGrouping>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001640:	f7ff ff42 	bl	80014c8 <__NVIC_GetPriorityGrouping>
 8001644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	6978      	ldr	r0, [r7, #20]
 800164c:	f7ff ff90 	bl	8001570 <NVIC_EncodePriority>
 8001650:	4602      	mov	r2, r0
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff5f 	bl	800151c <__NVIC_SetPriority>
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff35 	bl	80014e4 <__NVIC_EnableIRQ>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffa2 	bl	80015d4 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b08b      	sub	sp, #44	; 0x2c
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ae:	e148      	b.n	8001942 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016b0:	2201      	movs	r2, #1
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	f040 8137 	bne.w	800193c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	4aa3      	ldr	r2, [pc, #652]	; (8001960 <HAL_GPIO_Init+0x2c4>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d05e      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 80016d8:	4aa1      	ldr	r2, [pc, #644]	; (8001960 <HAL_GPIO_Init+0x2c4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d875      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 80016de:	4aa1      	ldr	r2, [pc, #644]	; (8001964 <HAL_GPIO_Init+0x2c8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d058      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 80016e4:	4a9f      	ldr	r2, [pc, #636]	; (8001964 <HAL_GPIO_Init+0x2c8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d86f      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 80016ea:	4a9f      	ldr	r2, [pc, #636]	; (8001968 <HAL_GPIO_Init+0x2cc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d052      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 80016f0:	4a9d      	ldr	r2, [pc, #628]	; (8001968 <HAL_GPIO_Init+0x2cc>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d869      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 80016f6:	4a9d      	ldr	r2, [pc, #628]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d04c      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 80016fc:	4a9b      	ldr	r2, [pc, #620]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d863      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 8001702:	4a9b      	ldr	r2, [pc, #620]	; (8001970 <HAL_GPIO_Init+0x2d4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d046      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 8001708:	4a99      	ldr	r2, [pc, #612]	; (8001970 <HAL_GPIO_Init+0x2d4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d85d      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 800170e:	2b12      	cmp	r3, #18
 8001710:	d82a      	bhi.n	8001768 <HAL_GPIO_Init+0xcc>
 8001712:	2b12      	cmp	r3, #18
 8001714:	d859      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 8001716:	a201      	add	r2, pc, #4	; (adr r2, 800171c <HAL_GPIO_Init+0x80>)
 8001718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171c:	08001797 	.word	0x08001797
 8001720:	08001771 	.word	0x08001771
 8001724:	08001783 	.word	0x08001783
 8001728:	080017c5 	.word	0x080017c5
 800172c:	080017cb 	.word	0x080017cb
 8001730:	080017cb 	.word	0x080017cb
 8001734:	080017cb 	.word	0x080017cb
 8001738:	080017cb 	.word	0x080017cb
 800173c:	080017cb 	.word	0x080017cb
 8001740:	080017cb 	.word	0x080017cb
 8001744:	080017cb 	.word	0x080017cb
 8001748:	080017cb 	.word	0x080017cb
 800174c:	080017cb 	.word	0x080017cb
 8001750:	080017cb 	.word	0x080017cb
 8001754:	080017cb 	.word	0x080017cb
 8001758:	080017cb 	.word	0x080017cb
 800175c:	080017cb 	.word	0x080017cb
 8001760:	08001779 	.word	0x08001779
 8001764:	0800178d 	.word	0x0800178d
 8001768:	4a82      	ldr	r2, [pc, #520]	; (8001974 <HAL_GPIO_Init+0x2d8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800176e:	e02c      	b.n	80017ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	623b      	str	r3, [r7, #32]
          break;
 8001776:	e029      	b.n	80017cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	3304      	adds	r3, #4
 800177e:	623b      	str	r3, [r7, #32]
          break;
 8001780:	e024      	b.n	80017cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	3308      	adds	r3, #8
 8001788:	623b      	str	r3, [r7, #32]
          break;
 800178a:	e01f      	b.n	80017cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	330c      	adds	r3, #12
 8001792:	623b      	str	r3, [r7, #32]
          break;
 8001794:	e01a      	b.n	80017cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800179e:	2304      	movs	r3, #4
 80017a0:	623b      	str	r3, [r7, #32]
          break;
 80017a2:	e013      	b.n	80017cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d105      	bne.n	80017b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017ac:	2308      	movs	r3, #8
 80017ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	611a      	str	r2, [r3, #16]
          break;
 80017b6:	e009      	b.n	80017cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b8:	2308      	movs	r3, #8
 80017ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	615a      	str	r2, [r3, #20]
          break;
 80017c2:	e003      	b.n	80017cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017c4:	2300      	movs	r3, #0
 80017c6:	623b      	str	r3, [r7, #32]
          break;
 80017c8:	e000      	b.n	80017cc <HAL_GPIO_Init+0x130>
          break;
 80017ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2bff      	cmp	r3, #255	; 0xff
 80017d0:	d801      	bhi.n	80017d6 <HAL_GPIO_Init+0x13a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	e001      	b.n	80017da <HAL_GPIO_Init+0x13e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3304      	adds	r3, #4
 80017da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2bff      	cmp	r3, #255	; 0xff
 80017e0:	d802      	bhi.n	80017e8 <HAL_GPIO_Init+0x14c>
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	e002      	b.n	80017ee <HAL_GPIO_Init+0x152>
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	3b08      	subs	r3, #8
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	210f      	movs	r1, #15
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	401a      	ands	r2, r3
 8001800:	6a39      	ldr	r1, [r7, #32]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	431a      	orrs	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8090 	beq.w	800193c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800181c:	4b56      	ldr	r3, [pc, #344]	; (8001978 <HAL_GPIO_Init+0x2dc>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a55      	ldr	r2, [pc, #340]	; (8001978 <HAL_GPIO_Init+0x2dc>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b53      	ldr	r3, [pc, #332]	; (8001978 <HAL_GPIO_Init+0x2dc>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001834:	4a51      	ldr	r2, [pc, #324]	; (800197c <HAL_GPIO_Init+0x2e0>)
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	3302      	adds	r3, #2
 800183c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001840:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	220f      	movs	r2, #15
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4013      	ands	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a49      	ldr	r2, [pc, #292]	; (8001980 <HAL_GPIO_Init+0x2e4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d00d      	beq.n	800187c <HAL_GPIO_Init+0x1e0>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a48      	ldr	r2, [pc, #288]	; (8001984 <HAL_GPIO_Init+0x2e8>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d007      	beq.n	8001878 <HAL_GPIO_Init+0x1dc>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a47      	ldr	r2, [pc, #284]	; (8001988 <HAL_GPIO_Init+0x2ec>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d101      	bne.n	8001874 <HAL_GPIO_Init+0x1d8>
 8001870:	2302      	movs	r3, #2
 8001872:	e004      	b.n	800187e <HAL_GPIO_Init+0x1e2>
 8001874:	2303      	movs	r3, #3
 8001876:	e002      	b.n	800187e <HAL_GPIO_Init+0x1e2>
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <HAL_GPIO_Init+0x1e2>
 800187c:	2300      	movs	r3, #0
 800187e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001880:	f002 0203 	and.w	r2, r2, #3
 8001884:	0092      	lsls	r2, r2, #2
 8001886:	4093      	lsls	r3, r2
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800188e:	493b      	ldr	r1, [pc, #236]	; (800197c <HAL_GPIO_Init+0x2e0>)
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018a8:	4b38      	ldr	r3, [pc, #224]	; (800198c <HAL_GPIO_Init+0x2f0>)
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	4937      	ldr	r1, [pc, #220]	; (800198c <HAL_GPIO_Init+0x2f0>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018b6:	4b35      	ldr	r3, [pc, #212]	; (800198c <HAL_GPIO_Init+0x2f0>)
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	43db      	mvns	r3, r3
 80018be:	4933      	ldr	r1, [pc, #204]	; (800198c <HAL_GPIO_Init+0x2f0>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d006      	beq.n	80018de <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018d0:	4b2e      	ldr	r3, [pc, #184]	; (800198c <HAL_GPIO_Init+0x2f0>)
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	492d      	ldr	r1, [pc, #180]	; (800198c <HAL_GPIO_Init+0x2f0>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	60cb      	str	r3, [r1, #12]
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018de:	4b2b      	ldr	r3, [pc, #172]	; (800198c <HAL_GPIO_Init+0x2f0>)
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	4929      	ldr	r1, [pc, #164]	; (800198c <HAL_GPIO_Init+0x2f0>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018f8:	4b24      	ldr	r3, [pc, #144]	; (800198c <HAL_GPIO_Init+0x2f0>)
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	4923      	ldr	r1, [pc, #140]	; (800198c <HAL_GPIO_Init+0x2f0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_GPIO_Init+0x2f0>)
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	43db      	mvns	r3, r3
 800190e:	491f      	ldr	r1, [pc, #124]	; (800198c <HAL_GPIO_Init+0x2f0>)
 8001910:	4013      	ands	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_GPIO_Init+0x2f0>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4919      	ldr	r1, [pc, #100]	; (800198c <HAL_GPIO_Init+0x2f0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	600b      	str	r3, [r1, #0]
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800192e:	4b17      	ldr	r3, [pc, #92]	; (800198c <HAL_GPIO_Init+0x2f0>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	43db      	mvns	r3, r3
 8001936:	4915      	ldr	r1, [pc, #84]	; (800198c <HAL_GPIO_Init+0x2f0>)
 8001938:	4013      	ands	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	3301      	adds	r3, #1
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	f47f aeaf 	bne.w	80016b0 <HAL_GPIO_Init+0x14>
  }
}
 8001952:	bf00      	nop
 8001954:	bf00      	nop
 8001956:	372c      	adds	r7, #44	; 0x2c
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	10320000 	.word	0x10320000
 8001964:	10310000 	.word	0x10310000
 8001968:	10220000 	.word	0x10220000
 800196c:	10210000 	.word	0x10210000
 8001970:	10120000 	.word	0x10120000
 8001974:	10110000 	.word	0x10110000
 8001978:	40021000 	.word	0x40021000
 800197c:	40010000 	.word	0x40010000
 8001980:	40010800 	.word	0x40010800
 8001984:	40010c00 	.word	0x40010c00
 8001988:	40011000 	.word	0x40011000
 800198c:	40010400 	.word	0x40010400

08001990 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	887b      	ldrh	r3, [r7, #2]
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019a8:	2301      	movs	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	e001      	b.n	80019b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	460b      	mov	r3, r1
 80019c8:	807b      	strh	r3, [r7, #2]
 80019ca:	4613      	mov	r3, r2
 80019cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ce:	787b      	ldrb	r3, [r7, #1]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019d4:	887a      	ldrh	r2, [r7, #2]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019da:	e003      	b.n	80019e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019dc:	887b      	ldrh	r3, [r7, #2]
 80019de:	041a      	lsls	r2, r3, #16
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	611a      	str	r2, [r3, #16]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr

080019ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	460b      	mov	r3, r1
 80019f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a00:	887a      	ldrh	r2, [r7, #2]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4013      	ands	r3, r2
 8001a06:	041a      	lsls	r2, r3, #16
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	887b      	ldrh	r3, [r7, #2]
 8001a0e:	400b      	ands	r3, r1
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	611a      	str	r2, [r3, #16]
}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e26c      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 8087 	beq.w	8001b4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a40:	4b92      	ldr	r3, [pc, #584]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d00c      	beq.n	8001a66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a4c:	4b8f      	ldr	r3, [pc, #572]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d112      	bne.n	8001a7e <HAL_RCC_OscConfig+0x5e>
 8001a58:	4b8c      	ldr	r3, [pc, #560]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a64:	d10b      	bne.n	8001a7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a66:	4b89      	ldr	r3, [pc, #548]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d06c      	beq.n	8001b4c <HAL_RCC_OscConfig+0x12c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d168      	bne.n	8001b4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e246      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x76>
 8001a88:	4b80      	ldr	r3, [pc, #512]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a7f      	ldr	r2, [pc, #508]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	e02e      	b.n	8001af4 <HAL_RCC_OscConfig+0xd4>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x98>
 8001a9e:	4b7b      	ldr	r3, [pc, #492]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a7a      	ldr	r2, [pc, #488]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b78      	ldr	r3, [pc, #480]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a77      	ldr	r2, [pc, #476]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e01d      	b.n	8001af4 <HAL_RCC_OscConfig+0xd4>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0xbc>
 8001ac2:	4b72      	ldr	r3, [pc, #456]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a71      	ldr	r2, [pc, #452]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b6f      	ldr	r3, [pc, #444]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a6e      	ldr	r2, [pc, #440]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e00b      	b.n	8001af4 <HAL_RCC_OscConfig+0xd4>
 8001adc:	4b6b      	ldr	r3, [pc, #428]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a6a      	ldr	r2, [pc, #424]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b68      	ldr	r3, [pc, #416]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a67      	ldr	r2, [pc, #412]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff fcb6 	bl	800146c <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff fcb2 	bl	800146c <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	; 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e1fa      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b5d      	ldr	r3, [pc, #372]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0xe4>
 8001b22:	e014      	b.n	8001b4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fca2 	bl	800146c <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff fc9e 	bl	800146c <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e1e6      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3e:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x10c>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d063      	beq.n	8001c22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b5a:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00b      	beq.n	8001b7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b66:	4b49      	ldr	r3, [pc, #292]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d11c      	bne.n	8001bac <HAL_RCC_OscConfig+0x18c>
 8001b72:	4b46      	ldr	r3, [pc, #280]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d116      	bne.n	8001bac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7e:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HAL_RCC_OscConfig+0x176>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e1ba      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b96:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4939      	ldr	r1, [pc, #228]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001baa:	e03a      	b.n	8001c22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d020      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb4:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bba:	f7ff fc57 	bl	800146c <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc2:	f7ff fc53 	bl	800146c <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e19b      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4927      	ldr	r1, [pc, #156]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
 8001bf4:	e015      	b.n	8001c22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf6:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fc36 	bl	800146c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c04:	f7ff fc32 	bl	800146c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e17a      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c16:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d03a      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d019      	beq.n	8001c6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3c:	f7ff fc16 	bl	800146c <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c44:	f7ff fc12 	bl	800146c <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e15a      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c62:	2001      	movs	r0, #1
 8001c64:	f000 fa9a 	bl	800219c <RCC_Delay>
 8001c68:	e01c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c70:	f7ff fbfc 	bl	800146c <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c76:	e00f      	b.n	8001c98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c78:	f7ff fbf8 	bl	800146c <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d908      	bls.n	8001c98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e140      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	42420000 	.word	0x42420000
 8001c94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c98:	4b9e      	ldr	r3, [pc, #632]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1e9      	bne.n	8001c78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80a6 	beq.w	8001dfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb6:	4b97      	ldr	r3, [pc, #604]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10d      	bne.n	8001cde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	4b94      	ldr	r3, [pc, #592]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	4a93      	ldr	r2, [pc, #588]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	61d3      	str	r3, [r2, #28]
 8001cce:	4b91      	ldr	r3, [pc, #580]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cde:	4b8e      	ldr	r3, [pc, #568]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d118      	bne.n	8001d1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cea:	4b8b      	ldr	r3, [pc, #556]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a8a      	ldr	r2, [pc, #552]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff fbb9 	bl	800146c <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfe:	f7ff fbb5 	bl	800146c <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b64      	cmp	r3, #100	; 0x64
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e0fd      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	4b81      	ldr	r3, [pc, #516]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d106      	bne.n	8001d32 <HAL_RCC_OscConfig+0x312>
 8001d24:	4b7b      	ldr	r3, [pc, #492]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4a7a      	ldr	r2, [pc, #488]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6213      	str	r3, [r2, #32]
 8001d30:	e02d      	b.n	8001d8e <HAL_RCC_OscConfig+0x36e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x334>
 8001d3a:	4b76      	ldr	r3, [pc, #472]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4a75      	ldr	r2, [pc, #468]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	6213      	str	r3, [r2, #32]
 8001d46:	4b73      	ldr	r3, [pc, #460]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a72      	ldr	r2, [pc, #456]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	f023 0304 	bic.w	r3, r3, #4
 8001d50:	6213      	str	r3, [r2, #32]
 8001d52:	e01c      	b.n	8001d8e <HAL_RCC_OscConfig+0x36e>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d10c      	bne.n	8001d76 <HAL_RCC_OscConfig+0x356>
 8001d5c:	4b6d      	ldr	r3, [pc, #436]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4a6c      	ldr	r2, [pc, #432]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	6213      	str	r3, [r2, #32]
 8001d68:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a69      	ldr	r2, [pc, #420]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e00b      	b.n	8001d8e <HAL_RCC_OscConfig+0x36e>
 8001d76:	4b67      	ldr	r3, [pc, #412]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4a66      	ldr	r2, [pc, #408]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	6213      	str	r3, [r2, #32]
 8001d82:	4b64      	ldr	r3, [pc, #400]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4a63      	ldr	r2, [pc, #396]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	f023 0304 	bic.w	r3, r3, #4
 8001d8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d015      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7ff fb69 	bl	800146c <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7ff fb65 	bl	800146c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0ab      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db4:	4b57      	ldr	r3, [pc, #348]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0ee      	beq.n	8001d9e <HAL_RCC_OscConfig+0x37e>
 8001dc0:	e014      	b.n	8001dec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fb53 	bl	800146c <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7ff fb4f 	bl	800146c <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e095      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de0:	4b4c      	ldr	r3, [pc, #304]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1ee      	bne.n	8001dca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dec:	7dfb      	ldrb	r3, [r7, #23]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d105      	bne.n	8001dfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df2:	4b48      	ldr	r3, [pc, #288]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	4a47      	ldr	r2, [pc, #284]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 8081 	beq.w	8001f0a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e08:	4b42      	ldr	r3, [pc, #264]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d061      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d146      	bne.n	8001eaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1c:	4b3f      	ldr	r3, [pc, #252]	; (8001f1c <HAL_RCC_OscConfig+0x4fc>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7ff fb23 	bl	800146c <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7ff fb1f 	bl	800146c <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e067      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3c:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e50:	d108      	bne.n	8001e64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e52:	4b30      	ldr	r3, [pc, #192]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	492d      	ldr	r1, [pc, #180]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e64:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a19      	ldr	r1, [r3, #32]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	430b      	orrs	r3, r1
 8001e76:	4927      	ldr	r1, [pc, #156]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_RCC_OscConfig+0x4fc>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7ff faf3 	bl	800146c <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7ff faef 	bl	800146c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e037      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x46a>
 8001ea8:	e02f      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <HAL_RCC_OscConfig+0x4fc>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fadc 	bl	800146c <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7ff fad8 	bl	800146c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e020      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x498>
 8001ed6:	e018      	b.n	8001f0a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e013      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d001      	beq.n	8001f0a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40007000 	.word	0x40007000
 8001f1c:	42420060 	.word	0x42420060

08001f20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0d0      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f34:	4b6a      	ldr	r3, [pc, #424]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d910      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b67      	ldr	r3, [pc, #412]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 0207 	bic.w	r2, r3, #7
 8001f4a:	4965      	ldr	r1, [pc, #404]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0b8      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f7c:	4b59      	ldr	r3, [pc, #356]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a58      	ldr	r2, [pc, #352]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f94:	4b53      	ldr	r3, [pc, #332]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4a52      	ldr	r2, [pc, #328]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa0:	4b50      	ldr	r3, [pc, #320]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	494d      	ldr	r1, [pc, #308]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d040      	beq.n	8002040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d115      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e07f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d107      	bne.n	8001fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fde:	4b41      	ldr	r3, [pc, #260]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e073      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e06b      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffe:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f023 0203 	bic.w	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4936      	ldr	r1, [pc, #216]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002010:	f7ff fa2c 	bl	800146c <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	e00a      	b.n	800202e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002018:	f7ff fa28 	bl	800146c <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	; 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e053      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 020c 	and.w	r2, r3, #12
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	429a      	cmp	r2, r3
 800203e:	d1eb      	bne.n	8002018 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d210      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 0207 	bic.w	r2, r3, #7
 8002056:	4922      	ldr	r1, [pc, #136]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e032      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4916      	ldr	r1, [pc, #88]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	490e      	ldr	r1, [pc, #56]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ae:	f000 f821 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 80020b2:	4602      	mov	r2, r0
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	490a      	ldr	r1, [pc, #40]	; (80020e8 <HAL_RCC_ClockConfig+0x1c8>)
 80020c0:	5ccb      	ldrb	r3, [r1, r3]
 80020c2:	fa22 f303 	lsr.w	r3, r2, r3
 80020c6:	4a09      	ldr	r2, [pc, #36]	; (80020ec <HAL_RCC_ClockConfig+0x1cc>)
 80020c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_RCC_ClockConfig+0x1d0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff f98a 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40022000 	.word	0x40022000
 80020e4:	40021000 	.word	0x40021000
 80020e8:	08002a18 	.word	0x08002a18
 80020ec:	20000024 	.word	0x20000024
 80020f0:	20000028 	.word	0x20000028

080020f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800210e:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <HAL_RCC_GetSysClockFreq+0x94>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b04      	cmp	r3, #4
 800211c:	d002      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0x30>
 800211e:	2b08      	cmp	r3, #8
 8002120:	d003      	beq.n	800212a <HAL_RCC_GetSysClockFreq+0x36>
 8002122:	e027      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_RCC_GetSysClockFreq+0x98>)
 8002126:	613b      	str	r3, [r7, #16]
      break;
 8002128:	e027      	b.n	800217a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	0c9b      	lsrs	r3, r3, #18
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	4a17      	ldr	r2, [pc, #92]	; (8002190 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002134:	5cd3      	ldrb	r3, [r2, r3]
 8002136:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d010      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_RCC_GetSysClockFreq+0x94>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	0c5b      	lsrs	r3, r3, #17
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	4a11      	ldr	r2, [pc, #68]	; (8002194 <HAL_RCC_GetSysClockFreq+0xa0>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a0d      	ldr	r2, [pc, #52]	; (800218c <HAL_RCC_GetSysClockFreq+0x98>)
 8002156:	fb02 f203 	mul.w	r2, r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	e004      	b.n	800216e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a0c      	ldr	r2, [pc, #48]	; (8002198 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002168:	fb02 f303 	mul.w	r3, r2, r3
 800216c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	613b      	str	r3, [r7, #16]
      break;
 8002172:	e002      	b.n	800217a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_RCC_GetSysClockFreq+0x98>)
 8002176:	613b      	str	r3, [r7, #16]
      break;
 8002178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800217a:	693b      	ldr	r3, [r7, #16]
}
 800217c:	4618      	mov	r0, r3
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40021000 	.word	0x40021000
 800218c:	007a1200 	.word	0x007a1200
 8002190:	08002a28 	.word	0x08002a28
 8002194:	08002a38 	.word	0x08002a38
 8002198:	003d0900 	.word	0x003d0900

0800219c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <RCC_Delay+0x34>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <RCC_Delay+0x38>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0a5b      	lsrs	r3, r3, #9
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021b8:	bf00      	nop
  }
  while (Delay --);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1e5a      	subs	r2, r3, #1
 80021be:	60fa      	str	r2, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f9      	bne.n	80021b8 <RCC_Delay+0x1c>
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	20000024 	.word	0x20000024
 80021d4:	10624dd3 	.word	0x10624dd3

080021d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e041      	b.n	800226e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff f85a 	bl	80012b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3304      	adds	r3, #4
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f000 fa6e 	bl	80026f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d001      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e035      	b.n	80022fc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a16      	ldr	r2, [pc, #88]	; (8002308 <HAL_TIM_Base_Start_IT+0x90>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d009      	beq.n	80022c6 <HAL_TIM_Base_Start_IT+0x4e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ba:	d004      	beq.n	80022c6 <HAL_TIM_Base_Start_IT+0x4e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a12      	ldr	r2, [pc, #72]	; (800230c <HAL_TIM_Base_Start_IT+0x94>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d111      	bne.n	80022ea <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b06      	cmp	r3, #6
 80022d6:	d010      	beq.n	80022fa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e8:	e007      	b.n	80022fa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40012c00 	.word	0x40012c00
 800230c:	40000400 	.word	0x40000400

08002310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b02      	cmp	r3, #2
 8002324:	d122      	bne.n	800236c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b02      	cmp	r3, #2
 8002332:	d11b      	bne.n	800236c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0202 	mvn.w	r2, #2
 800233c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f9b4 	bl	80026c0 <HAL_TIM_IC_CaptureCallback>
 8002358:	e005      	b.n	8002366 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f9a7 	bl	80026ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f9b6 	bl	80026d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b04      	cmp	r3, #4
 8002378:	d122      	bne.n	80023c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b04      	cmp	r3, #4
 8002386:	d11b      	bne.n	80023c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0204 	mvn.w	r2, #4
 8002390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2202      	movs	r2, #2
 8002396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f98a 	bl	80026c0 <HAL_TIM_IC_CaptureCallback>
 80023ac:	e005      	b.n	80023ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f97d 	bl	80026ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f98c 	bl	80026d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d122      	bne.n	8002414 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d11b      	bne.n	8002414 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0208 	mvn.w	r2, #8
 80023e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2204      	movs	r2, #4
 80023ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f960 	bl	80026c0 <HAL_TIM_IC_CaptureCallback>
 8002400:	e005      	b.n	800240e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f953 	bl	80026ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f962 	bl	80026d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	2b10      	cmp	r3, #16
 8002420:	d122      	bne.n	8002468 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b10      	cmp	r3, #16
 800242e:	d11b      	bne.n	8002468 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0210 	mvn.w	r2, #16
 8002438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2208      	movs	r2, #8
 800243e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f936 	bl	80026c0 <HAL_TIM_IC_CaptureCallback>
 8002454:	e005      	b.n	8002462 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f929 	bl	80026ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f938 	bl	80026d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b01      	cmp	r3, #1
 8002474:	d10e      	bne.n	8002494 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b01      	cmp	r3, #1
 8002482:	d107      	bne.n	8002494 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0201 	mvn.w	r2, #1
 800248c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe fe2a 	bl	80010e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249e:	2b80      	cmp	r3, #128	; 0x80
 80024a0:	d10e      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ac:	2b80      	cmp	r3, #128	; 0x80
 80024ae:	d107      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fa6b 	bl	8002996 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ca:	2b40      	cmp	r3, #64	; 0x40
 80024cc:	d10e      	bne.n	80024ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d8:	2b40      	cmp	r3, #64	; 0x40
 80024da:	d107      	bne.n	80024ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f8fc 	bl	80026e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d10e      	bne.n	8002518 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b20      	cmp	r3, #32
 8002506:	d107      	bne.n	8002518 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0220 	mvn.w	r2, #32
 8002510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fa36 	bl	8002984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_TIM_ConfigClockSource+0x1c>
 8002538:	2302      	movs	r3, #2
 800253a:	e0b4      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x186>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800255a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002574:	d03e      	beq.n	80025f4 <HAL_TIM_ConfigClockSource+0xd4>
 8002576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800257a:	f200 8087 	bhi.w	800268c <HAL_TIM_ConfigClockSource+0x16c>
 800257e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002582:	f000 8086 	beq.w	8002692 <HAL_TIM_ConfigClockSource+0x172>
 8002586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258a:	d87f      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x16c>
 800258c:	2b70      	cmp	r3, #112	; 0x70
 800258e:	d01a      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0xa6>
 8002590:	2b70      	cmp	r3, #112	; 0x70
 8002592:	d87b      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x16c>
 8002594:	2b60      	cmp	r3, #96	; 0x60
 8002596:	d050      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x11a>
 8002598:	2b60      	cmp	r3, #96	; 0x60
 800259a:	d877      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x16c>
 800259c:	2b50      	cmp	r3, #80	; 0x50
 800259e:	d03c      	beq.n	800261a <HAL_TIM_ConfigClockSource+0xfa>
 80025a0:	2b50      	cmp	r3, #80	; 0x50
 80025a2:	d873      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x16c>
 80025a4:	2b40      	cmp	r3, #64	; 0x40
 80025a6:	d058      	beq.n	800265a <HAL_TIM_ConfigClockSource+0x13a>
 80025a8:	2b40      	cmp	r3, #64	; 0x40
 80025aa:	d86f      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x16c>
 80025ac:	2b30      	cmp	r3, #48	; 0x30
 80025ae:	d064      	beq.n	800267a <HAL_TIM_ConfigClockSource+0x15a>
 80025b0:	2b30      	cmp	r3, #48	; 0x30
 80025b2:	d86b      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x16c>
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	d060      	beq.n	800267a <HAL_TIM_ConfigClockSource+0x15a>
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d867      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x16c>
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d05c      	beq.n	800267a <HAL_TIM_ConfigClockSource+0x15a>
 80025c0:	2b10      	cmp	r3, #16
 80025c2:	d05a      	beq.n	800267a <HAL_TIM_ConfigClockSource+0x15a>
 80025c4:	e062      	b.n	800268c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6899      	ldr	r1, [r3, #8]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f000 f95e 	bl	8002896 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	609a      	str	r2, [r3, #8]
      break;
 80025f2:	e04f      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6899      	ldr	r1, [r3, #8]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f000 f947 	bl	8002896 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002616:	609a      	str	r2, [r3, #8]
      break;
 8002618:	e03c      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	461a      	mov	r2, r3
 8002628:	f000 f8be 	bl	80027a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2150      	movs	r1, #80	; 0x50
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f915 	bl	8002862 <TIM_ITRx_SetConfig>
      break;
 8002638:	e02c      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6859      	ldr	r1, [r3, #4]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	461a      	mov	r2, r3
 8002648:	f000 f8dc 	bl	8002804 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2160      	movs	r1, #96	; 0x60
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f905 	bl	8002862 <TIM_ITRx_SetConfig>
      break;
 8002658:	e01c      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6859      	ldr	r1, [r3, #4]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	461a      	mov	r2, r3
 8002668:	f000 f89e 	bl	80027a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2140      	movs	r1, #64	; 0x40
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f8f5 	bl	8002862 <TIM_ITRx_SetConfig>
      break;
 8002678:	e00c      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4619      	mov	r1, r3
 8002684:	4610      	mov	r0, r2
 8002686:	f000 f8ec 	bl	8002862 <TIM_ITRx_SetConfig>
      break;
 800268a:	e003      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
      break;
 8002690:	e000      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002692:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
	...

080026f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a25      	ldr	r2, [pc, #148]	; (80027a0 <TIM_Base_SetConfig+0xa8>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d007      	beq.n	8002720 <TIM_Base_SetConfig+0x28>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002716:	d003      	beq.n	8002720 <TIM_Base_SetConfig+0x28>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a22      	ldr	r2, [pc, #136]	; (80027a4 <TIM_Base_SetConfig+0xac>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d108      	bne.n	8002732 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a1a      	ldr	r2, [pc, #104]	; (80027a0 <TIM_Base_SetConfig+0xa8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d007      	beq.n	800274a <TIM_Base_SetConfig+0x52>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002740:	d003      	beq.n	800274a <TIM_Base_SetConfig+0x52>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <TIM_Base_SetConfig+0xac>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d108      	bne.n	800275c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4313      	orrs	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a07      	ldr	r2, [pc, #28]	; (80027a0 <TIM_Base_SetConfig+0xa8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d103      	bne.n	8002790 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	615a      	str	r2, [r3, #20]
}
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	40012c00 	.word	0x40012c00
 80027a4:	40000400 	.word	0x40000400

080027a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	f023 0201 	bic.w	r2, r3, #1
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f023 030a 	bic.w	r3, r3, #10
 80027e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	621a      	str	r2, [r3, #32]
}
 80027fa:	bf00      	nop
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f023 0210 	bic.w	r2, r3, #16
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800282e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	031b      	lsls	r3, r3, #12
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002840:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	621a      	str	r2, [r3, #32]
}
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	f043 0307 	orr.w	r3, r3, #7
 8002884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	609a      	str	r2, [r3, #8]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002896:	b480      	push	{r7}
 8002898:	b087      	sub	sp, #28
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	021a      	lsls	r2, r3, #8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	431a      	orrs	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	4313      	orrs	r3, r2
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	609a      	str	r2, [r3, #8]
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e041      	b.n	8002970 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a14      	ldr	r2, [pc, #80]	; (800297c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d009      	beq.n	8002944 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002938:	d004      	beq.n	8002944 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a10      	ldr	r2, [pc, #64]	; (8002980 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d10c      	bne.n	800295e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800294a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	4313      	orrs	r3, r2
 8002954:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40012c00 	.word	0x40012c00
 8002980:	40000400 	.word	0x40000400

08002984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <__libc_init_array>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	2600      	movs	r6, #0
 80029ac:	4d0c      	ldr	r5, [pc, #48]	; (80029e0 <__libc_init_array+0x38>)
 80029ae:	4c0d      	ldr	r4, [pc, #52]	; (80029e4 <__libc_init_array+0x3c>)
 80029b0:	1b64      	subs	r4, r4, r5
 80029b2:	10a4      	asrs	r4, r4, #2
 80029b4:	42a6      	cmp	r6, r4
 80029b6:	d109      	bne.n	80029cc <__libc_init_array+0x24>
 80029b8:	f000 f822 	bl	8002a00 <_init>
 80029bc:	2600      	movs	r6, #0
 80029be:	4d0a      	ldr	r5, [pc, #40]	; (80029e8 <__libc_init_array+0x40>)
 80029c0:	4c0a      	ldr	r4, [pc, #40]	; (80029ec <__libc_init_array+0x44>)
 80029c2:	1b64      	subs	r4, r4, r5
 80029c4:	10a4      	asrs	r4, r4, #2
 80029c6:	42a6      	cmp	r6, r4
 80029c8:	d105      	bne.n	80029d6 <__libc_init_array+0x2e>
 80029ca:	bd70      	pop	{r4, r5, r6, pc}
 80029cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d0:	4798      	blx	r3
 80029d2:	3601      	adds	r6, #1
 80029d4:	e7ee      	b.n	80029b4 <__libc_init_array+0xc>
 80029d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029da:	4798      	blx	r3
 80029dc:	3601      	adds	r6, #1
 80029de:	e7f2      	b.n	80029c6 <__libc_init_array+0x1e>
 80029e0:	08002a3c 	.word	0x08002a3c
 80029e4:	08002a3c 	.word	0x08002a3c
 80029e8:	08002a3c 	.word	0x08002a3c
 80029ec:	08002a40 	.word	0x08002a40

080029f0 <memset>:
 80029f0:	4603      	mov	r3, r0
 80029f2:	4402      	add	r2, r0
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d100      	bne.n	80029fa <memset+0xa>
 80029f8:	4770      	bx	lr
 80029fa:	f803 1b01 	strb.w	r1, [r3], #1
 80029fe:	e7f9      	b.n	80029f4 <memset+0x4>

08002a00 <_init>:
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a02:	bf00      	nop
 8002a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a06:	bc08      	pop	{r3}
 8002a08:	469e      	mov	lr, r3
 8002a0a:	4770      	bx	lr

08002a0c <_fini>:
 8002a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0e:	bf00      	nop
 8002a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a12:	bc08      	pop	{r3}
 8002a14:	469e      	mov	lr, r3
 8002a16:	4770      	bx	lr
